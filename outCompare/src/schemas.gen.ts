// This file is auto-generated by @hey-api/openapi-ts

export const $ATogFLISammeOrganisasjonDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        inntektPrMnd: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $AbacJournalpostMottakDto = {
    properties: {
        forsendelseMottatt: {
            format: 'date',
            type: 'string'
        },
        forsendelseMottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        kanalReferanse: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[a-zA-Z0-9\\\\/\\.\\:\\-_=]*$',
            type: 'string'
        },
        payload: {
            maxLength: 392000,
            minLength: 0,
            pattern: '^[a-zA-Z0-9\\-_=]*$',
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['forsendelseMottattTidspunkt', 'journalpostId', 'saksnummer', 'type', 'ytelseType'],
    type: 'object'
} as const;

export const $AbacJournalpostMottakOpprettSakDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        forsendelseMottatt: {
            format: 'date',
            type: 'string'
        },
        forsendelseMottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        kanalReferanse: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[a-zA-Z0-9\\\\/\\.\\:\\-_=]*$',
            type: 'string'
        },
        payload: {
            maxLength: 392000,
            minLength: 0,
            pattern: '^[a-zA-Z0-9\\-_=]*$',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        type: {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['aktørId', 'forsendelseMottattTidspunkt', 'journalpostId', 'periode', 'saksnummer', 'type', 'ytelseType'],
    type: 'object'
} as const;

export const $AbakusKodeverkIaygrunnlag = {
    properties: {
        virksomhetType: {
            enum: ['DAGMAMMA', 'FISKE', 'JORDBRUK_SKOGBRUK', 'ANNEN', '-'],
            type: 'string'
        }
    },
    required: ['virksomhetType'],
    type: 'object'
} as const;

export const $AksjonspunktDto = {
    properties: {
        aksjonspunktType: {
            enum: ['AUTO', 'MANU', 'OVST', 'SAOV', '-'],
            type: 'string'
        },
        begrunnelse: {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        besluttersBegrunnelse: {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        definisjon: {
            enum: ['5009', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5023', '5026', '5028', '5030', '5033', '5034', '5040', '5038', '5039', '5054', '5042', '5046', '5067', '5059', '5047', '5049', '5050', '5051', '5052', '5053', '5055', '5056', '5057', '5058', '5068', '5072', '5080', '5084', '5085', '5089', '5090', '5077', '9069', '9071', '6002', '6005', '6006', '6004', '6008', '6003', '6007', '6011', '6014', '6015', '6017', '6016', '6068', '7001', '7003', '7005', '7006', '7008', '7009', '7014', '7019', '7020', '7022', '7023', '7025', '7030', '7035', '9068', '9070', '7041', '8000', '8003', '8005', '8004', '9001', '9002', '9020', '9099', '9003', '9004', '9013', '9014', '9015', '9005', '9006', '9007', '9008', '9200', '9201', '9202', '9203', '9290', '9291', '9300', '9301', '9302', '9303', '9999', null],
            type: 'string'
        },
        erAktivt: {
            type: 'boolean'
        },
        fristTid: {
            format: 'date-time',
            type: 'string'
        },
        kanLoses: {
            type: 'boolean'
        },
        opprettetAv: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Alnum}ÆØÅæøå\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        status: {
            enum: ['AVBR', 'OPPR', 'UTFO'],
            type: 'string'
        },
        toTrinnsBehandling: {
            type: 'boolean'
        },
        toTrinnsBehandlingGodkjent: {
            type: 'boolean'
        },
        'venteårsak': {
            enum: ['-', 'ANKE_OVERSENDT_TIL_TRYGDERETTEN', 'ANKE_VENTER_PAA_MERKNADER_FRA_BRUKER', 'AVV_DOK', 'AVV_IM_MOT_AAREG', 'AVV_IM_MOT_SØKNAD_AT', 'AVV_SØKNADSPERIODER', 'AVV_FODSEL', 'AVV_RESPONS_REVURDERING', 'FOR_TIDLIG_SOKNAD', 'GRADERING_FLERE_ARBEIDSFORHOLD', 'REFUSJON_3_MÅNEDER', 'SCANN', 'UTV_FRIST', 'VENT_FEIL_ENDRINGSSØKNAD', 'VENT_GRADERING_UTEN_BEREGNINGSGRUNNLAG', 'VENT_INFOTRYGD', 'VENT_INNTEKT_RAPPORTERINGSFRIST', 'VENT_MILITÆR_OG_BG_UNDER_3G', 'VENT_OPDT_INNTEKTSMELDING', 'VENT_OPPTJENING_OPPLYSNINGER', 'VENT_PÅ_NY_INNTEKTSMELDING_MED_GYLDIG_ARB_ID', 'VENT_REGISTERINNHENTING', 'VENT_PÅ_SISTE_AAP_MELDEKORT', 'VENT_SØKNAD_SENDT_INFORMASJONSBREV', 'VENT_TIDLIGERE_BEHANDLING', 'VENT_ÅPEN_BEHANDLING', 'VENT_MANGL_FUNKSJ_SAKSBEHANDLER', 'VENTER_SVAR_PORTEN', 'VENTER_SVAR_TEAMS', 'ANDRE_INNTEKTSOPPLYSNINGER', 'INNTEKTSMELDING', 'LEGEERKLÆRING', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'VENTER_ETTERLYS_IM', 'VENTER_ETTERLYS_IM_VARSEL', 'OPPD_ÅPEN_BEH', 'VENT_DEKGRAD_REGEL', 'VENT_ØKONOMI', 'VENT_TILBAKEKREVING', 'VENTELØNN_ELLER_MILITÆR_MED_FLERE_AKTIVITETER', 'VENT_BEREGNING_TILBAKE_I_TID', 'BRUKER_70ÅR_VED_REFUSJON', 'VENT_LOVENDRING_8_41', 'INGEN_PERIODE_UTEN_YTELSE', 'PERIODE_MED_AVSLAG', 'MANGLENDE_FUNKSJONALITET', 'KORTVARIG_ARBEID', 'FRISINN_ATFL_SAMME_ORG', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT', 'FRISINN_VARIANT_NY_FL', 'FRISINN_VARIANT_NY_SN_2019', 'FRISINN_VARIANT_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT', 'FRISINN_VARIANT_KOMBINERT_NY_FL', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2020', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_ENDRET_INNTEKTSTYPE', 'AVV_SOKN_IT_PERIODER', 'AVV_SOKN_NAERING', 'AVV_SOKN_FRILANS', 'DELVIS_TILRETTELEGGING_OG_REFUSJON_SVP', 'AAP_DP_SISTE_10_MND_SVP', 'FL_SN_IKKE_STOTTET_FOR_SVP'],
            type: 'string'
        },
        'venteårsakVariant': {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        vilkarType: {
            enum: ['K9_VILKÅRET', 'MEDLEMSKAPSVILKÅRET', 'OMSORGEN_FOR', 'ALDERSVILKÅR', 'ALDERSVILKÅR_BARN', 'MEDISINSKEVILKÅR_UNDER_18_ÅR', 'MEDISINSKEVILKÅR_18_ÅR', 'SØKNADSFRIST', 'SØKERSOPPLYSNINGSPLIKT', 'OPPTJENINGSPERIODEVILKÅR', 'OPPTJENINGSVILKÅRET', 'BEREGNINGSGRUNNLAGVILKÅR', 'I_LIVETS_SLUTTFASE', 'NØDVENDIG_OPPLÆRING', 'GODKJENT_OPPLÆRINGSINSTITUSJON', 'GJENNOMGÅ_OPPLÆRING', 'LANGVARIG_SYKDOM', 'UTVIDETRETT', 'UDEFINERT'],
            type: 'string'
        },
        vurderPaNyttArsaker: {
            items: {
                enum: ['FEIL_FAKTA', 'FEIL_LOV', 'FEIL_REGEL', 'ANNET', '-'],
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        }
    },
    type: 'object'
} as const;

export const $Aktivitet = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/Arbeidsforhold'
        },
        uttaksperioder: {
            items: {
                '$ref': '#/components/schemas/Uttaksperiode'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $AktivitetDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        internArbeidsforholdRef: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        uttakArbeidType: {
            enum: ['AT', 'SN', 'FL', 'MIDL_INAKTIV', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'BA', 'IKKE_YRKESAKTIV', 'ANNET'],
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'internArbeidsforholdRef', 'uttakArbeidType'],
    type: 'object'
} as const;

export const $AktivitetGraderingDto = {
    properties: {
        andelGraderingDto: {
            items: {
                '$ref': '#/components/schemas/AndelGraderingDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $AktivitetTomDatoMappingDto = {
    properties: {
        aktiviteter: {
            items: {
                '$ref': '#/components/schemas/BeregningAktivitetDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['aktiviteter', 'tom'],
    type: 'object'
} as const;

export const $AktivitetsAvtaleDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'sisteLønnsendringsdato': {
            format: 'date',
            type: 'string'
        },
        stillingsprosent: {
            type: 'number'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $Aktør = {
    discriminator: {
        propertyName: 'identType'
    },
    properties: {
        identType: {
            type: 'string'
        }
    },
    required: ['identType'],
    type: 'object'
} as const;

export const $AktørIdDto = {
    properties: {
        'aktørId': {
            type: 'string'
        }
    },
    required: ['aktørId'],
    type: 'object'
} as const;

export const $AktørIdPersonident = {
    allOf: [
        {
            '$ref': '#/components/schemas/Aktør'
        },
        {
            properties: {
                ident: {
                    pattern: '^\\d{13}+$',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    required: ['ident'],
    type: 'object'
} as const;

export const $AktørInfoDto = {
    properties: {
        aktoerId: {
            type: 'string'
        },
        fagsaker: {
            items: {
                '$ref': '#/components/schemas/FagsakDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        person: {
            '$ref': '#/components/schemas/PersonDto'
        }
    },
    type: 'object'
} as const;

export const $AktørListeDto = {
    properties: {
        'aktører': {
            items: {
                maxLength: 10000,
                minLength: 0,
                type: 'string'
            },
            maxItems: 10000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['aktører'],
    type: 'object'
} as const;

export const $AleneOmOmsorgen = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                aleneOmOmsorgenFor: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $AndelForFaktaOmBeregningDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        belopReadOnly: {
            type: 'number'
        },
        fastsattBelop: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        },
        refusjonskrav: {
            type: 'number'
        },
        skalKunneEndreAktivitet: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $AndelGraderingDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        arbeidsforholdRef: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        graderinger: {
            items: {
                '$ref': '#/components/schemas/GraderingDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['aktivitetStatus'],
    type: 'object'
} as const;

export const $AndelMedBeløpDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        fastsattBelopPrMnd: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $AngittPersonDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        'fødselsdato': {
            format: 'date',
            type: 'string'
        },
        navn: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        personIdent: {
            type: 'string'
        },
        rolle: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        situasjonKode: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        tilleggsopplysninger: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $AnvistAndel = {
    properties: {
        arbeidsforholdId: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        dagsats: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        refusjonsgrad: {
            type: 'number'
        },
        utbetalingsgrad: {
            type: 'number'
        }
    },
    required: ['dagsats'],
    type: 'object'
} as const;

export const $ArbeidDto = {
    properties: {
        yrkesaktiviteter: {
            items: {
                '$ref': '#/components/schemas/YrkesaktivitetDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $Arbeidsforhold = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        arbeidsforholdId: {
            type: 'string'
        },
        organisasjonsnummer: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsforholdDto = {
    properties: {
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsforholdIdDto = {
    properties: {
        eksternArbeidsforholdId: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        internArbeidsforholdId: {
            format: 'uuid',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsforholdInformasjonDto = {
    properties: {
        overstyringer: {
            items: {
                '$ref': '#/components/schemas/ArbeidsforholdOverstyringDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        referanser: {
            items: {
                '$ref': '#/components/schemas/ArbeidsforholdReferanseDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array',
            uniqueItems: true
        }
    },
    type: 'object'
} as const;

export const $ArbeidsforholdOverstyringDto = {
    properties: {
        arbeidsforholdRefDto: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        handling: {
            enum: ['-', 'BRUK', 'NYTT_ARBEIDSFORHOLD', 'BRUK_UTEN_INNTEKTSMELDING', 'IKKE_BRUK', 'SLÅTT_SAMMEN_MED_ANNET', 'LAGT_TIL_AV_SAKSBEHANDLER', 'BASERT_PÅ_INNTEKTSMELDING', 'BRUK_MED_OVERSTYRT_PERIODE', 'INNTEKT_IKKE_MED_I_BG'],
            type: 'string'
        }
    },
    required: ['arbeidsgiver'],
    type: 'object'
} as const;

export const $ArbeidsforholdReferanseDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        eksternReferanse: {
            '$ref': '#/components/schemas/EksternArbeidsforholdRef'
        },
        internReferanse: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        }
    },
    required: ['arbeidsgiver'],
    type: 'object'
} as const;

export const $Arbeidsgiver = {
    properties: {
        'arbeidsgiverAktørId': {
            maxLength: 20,
            minLength: 0,
            pattern: '^\\d+$',
            type: 'string'
        },
        arbeidsgiverOrgnr: {
            maxLength: 20,
            minLength: 0,
            pattern: '^\\d+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsgiverArbeidsforholdId = {
    properties: {
        arbeidsforhold: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiver: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['arbeidsforhold', 'arbeidsgiver'],
    type: 'object'
} as const;

export const $ArbeidsgiverArbeidsforholdIdV2 = {
    properties: {
        arbeidsforhold: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        }
    },
    required: ['arbeidsforhold', 'arbeidsgiver'],
    type: 'object'
} as const;

export const $ArbeidsgiverArbeidsforholdStatus = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/ArbeidsgiverArbeidsforholdId'
        },
        journalpostId: {
            type: 'string'
        },
        status: {
            enum: ['MOTTATT', 'MOTTATT_IKKE_ANSATT', 'MOTTATT_UKJENT_ARBEIDSFORHOLDSID', 'IKKE_PÅKREVD', 'FORTSETT_UTEN', 'MANGLER'],
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'status'],
    type: 'object'
} as const;

export const $ArbeidsgiverArbeidsforholdStatusV2 = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/ArbeidsgiverArbeidsforholdIdV2'
        },
        journalpostId: {
            type: 'string'
        },
        status: {
            enum: ['MOTTATT', 'MOTTATT_IKKE_ANSATT', 'MOTTATT_UKJENT_ARBEIDSFORHOLDSID', 'IKKE_PÅKREVD', 'FORTSETT_UTEN', 'MANGLER'],
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'status'],
    type: 'object'
} as const;

export const $ArbeidsgiverDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        'fødselsdato': {
            format: 'date',
            type: 'string'
        },
        navn: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        organisasjonsNummer: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsgiverMedPerioderSomManglerDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/UttakArbeidsforhold'
        },
        manglendePerioder: {
            items: {
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $ArbeidsgiverOpplysningerDto = {
    properties: {
        arbeidsforholdreferanser: {
            items: {
                '$ref': '#/components/schemas/ArbeidsforholdIdDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'fødselsdato': {
            format: 'date',
            type: 'string'
        },
        identifikator: {
            pattern: '^\\d+$',
            type: 'string'
        },
        navn: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        personIdentifikator: {
            pattern: '^\\d+$',
            type: 'string'
        }
    },
    required: ['arbeidsforholdreferanser'],
    type: 'object'
} as const;

export const $ArbeidsgiverOversiktDto = {
    properties: {
        arbeidsgivere: {
            additionalProperties: {
                '$ref': '#/components/schemas/ArbeidsgiverOpplysningerDto'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $ArbeidstakerUtenInntektsmeldingAndelDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        inntektPrMnd: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        },
        mottarYtelse: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $AsyncPollingStatus = {
    properties: {
        cancelUri: {
            format: 'uri',
            type: 'string'
        },
        eta: {
            format: 'date-time',
            type: 'string'
        },
        location: {
            format: 'uri',
            type: 'string'
        },
        message: {
            type: 'string'
        },
        pending: {
            type: 'boolean'
        },
        pollIntervalMillis: {
            format: 'int64',
            type: 'integer'
        },
        readOnly: {
            type: 'boolean'
        },
        status: {
            enum: ['CANCELLED', 'COMPLETE', 'DELAYED', 'HALTED', 'PENDING'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $AvbrytAksjonspunktDto = {
    properties: {
        aksjonspunktKode: {
            maxLength: 15,
            minLength: 1,
            pattern: '^\\d+$',
            type: 'string'
        },
        begrunnelse: {
            maxLength: 1000,
            minLength: 1,
            pattern: `^[0-9a-zA-ZæøåÆØÅAaÁáBbCcČčDdĐđEeFfGgHhIiJjKkLlMmNnŊŋOoPpRrSsŠšTtŦŧUuVvZzŽžéôèÉöüäÖÜÄ .'\-/
%§\!?@_()+:;,="&]*$`,
            type: 'string'
        },
        behandlingId: {
            format: 'int64',
            type: 'integer'
        },
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        }
    },
    required: ['aksjonspunktKode', 'begrunnelse', 'behandlingId'],
    type: 'object'
} as const;

export const $AvklarAktiviteterDto = {
    properties: {
        aktiviteterTomDatoMapping: {
            items: {
                '$ref': '#/components/schemas/AktivitetTomDatoMappingDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['skjæringstidspunkt'],
    type: 'object'
} as const;

export const $AvklaringsbehovDto = {
    properties: {
        begrunnelse: {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        definisjon: {
            enum: ['FASTSETT_BG_AT_FL', 'VURDER_VARIG_ENDRT_NYOPPSTR_NAERNG_SN', 'VURDER_VARIG_ENDRT_ARB_SITSJN_MDL_INAKTV', 'FORDEL_BG', 'FASTSETT_BG_TB_ARB', 'VURDER_NYTT_INNTKTSFRHLD', 'VURDER_REPRSNTR_STORTNGT', 'FASTSETT_BG_SN_NY_I_ARB_LIVT', 'AVKLAR_AKTIVITETER', 'VURDER_FAKTA_ATFL_SN', 'VURDER_REFUSJONSKRAV', 'OVST_BEREGNINGSAKTIVITETER', 'OVST_INNTEKT', 'AUTO_VENT_PAA_INNTKT_RAP_FRST', 'AUTO_VENT_PAA_SISTE_AAP_DP_MELDKRT', 'AUTO_VENT_FRISINN', 'INGEN_AKTIVITETER'],
            type: 'string'
        },
        erTrukket: {
            type: 'boolean'
        },
        kanLoses: {
            type: 'boolean'
        },
        status: {
            enum: ['OPPR', 'UTFO', 'AVBR'],
            type: 'string'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['definisjon', 'erTrukket', 'kanLoses', 'status'],
    type: 'object'
} as const;

export const $AvklartPersonstatus = {
    properties: {
        orginalPersonstatus: {
            enum: ['ABNR', 'ADNR', 'BOSA', 'DØD', 'DØDD', 'FOSV', 'FØDR', 'UFUL', 'UREG', 'UTAN', 'UTPE', 'UTVA', '-'],
            type: 'string'
        },
        overstyrtPersonstatus: {
            enum: ['ABNR', 'ADNR', 'BOSA', 'DØD', 'DØDD', 'FOSV', 'FØDR', 'UFUL', 'UREG', 'UTAN', 'UTPE', 'UTVA', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $AvklarteOpplysninger = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        fraDato: {
            format: 'date',
            type: 'string'
        },
        godkjent: {
            type: 'boolean'
        },
        opprettetAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        opprettetTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['fraDato', 'godkjent'],
    type: 'object'
} as const;

export const $AvslagsårsakPrPeriodeDto = {
    properties: {
        'avslagsårsak': {
            enum: ['FOR_LAVT_BG', 'INGEN_FRILANS_I_PERIODE_UTEN_YTELSE', 'AVKORTET_GRUNNET_LØPENDE_INNTEKT', 'AVKORTET_GRUNNET_ANNEN_INNTEKT'],
            type: 'string'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['avslagsårsak', 'fom', 'tom'],
    type: 'object'
} as const;

export const $Barn = {
    properties: {
        barnType: {
            enum: ['VANLIG', 'FOSTERBARN', 'UTENLANDSK_BARN'],
            type: 'string'
        },
        deltBostedPerioder: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        'dødsdato': {
            format: 'date',
            type: 'string'
        },
        'fødselsdato': {
            format: 'date',
            type: 'string'
        },
        personIdent: {
            type: 'string'
        },
        sammeBostedPerioder: {
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $BehandlingAksjonspunktDto = {
    properties: {
        aksjonspunkter: {
            items: {
                '$ref': '#/components/schemas/AksjonspunktDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        behandlingStatus: {
            enum: ['AVSLU', 'FVED', 'IVED', 'OPPRE', 'UTRED'],
            type: 'string'
        },
        behandlingType: {
            enum: ['BT-002', 'BT-004', 'BT-010', '-'],
            type: 'string'
        },
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        fagsakStatus: {
            enum: ['OPPR', 'UBEH', 'LOP', 'AVSLU'],
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['behandlingUuid', 'saksnummer', 'ytelseType'],
    type: 'object'
} as const;

export const $BehandlingDto = {
    properties: {
        ansvarligBeslutter: {
            maxLength: 100000,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        ansvarligSaksbehandler: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        avsluttet: {
            format: 'date-time',
            type: 'string'
        },
        behandlendeEnhetId: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}]+$',
            type: 'string'
        },
        behandlendeEnhetNavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        behandlingHenlagt: {
            type: 'boolean'
        },
        behandlingKoet: {
            type: 'boolean'
        },
        behandlingPaaVent: {
            type: 'boolean'
        },
        behandlingResultatType: {
            enum: ['IKKE_FASTSATT', 'INNVILGET', 'DELVIS_INNVILGET', 'AVSLÅTT', 'OPPHØR', 'HENLAGT_SØKNAD_TRUKKET', 'HENLAGT_FEILOPPRETTET', 'HENLAGT_BRUKER_DØD', 'MERGET_OG_HENLAGT', 'HENLAGT_SØKNAD_MANGLER', 'HENLAGT_MASKINELT', 'INNVILGET_ENDRING', 'INGEN_ENDRING', 'MANGLER_BEREGNINGSREGLER'],
            type: 'string'
        },
        behandlingsfristTid: {
            format: 'date',
            type: 'string'
        },
        behandlingsresultat: {
            '$ref': '#/components/schemas/BehandlingsresultatDto'
        },
        'behandlingÅrsaker': {
            items: {
                '$ref': '#/components/schemas/BehandlingÅrsakDto'
            },
            maxItems: 20,
            minItems: 0,
            type: 'array'
        },
        endret: {
            format: 'date-time',
            type: 'string'
        },
        endretAvBrukernavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        erPaaVent: {
            type: 'boolean'
        },
        fagsakId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        fristBehandlingPaaVent: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        'førsteÅrsak': {
            '$ref': '#/components/schemas/BehandlingÅrsakDto'
        },
        gjeldendeVedtak: {
            type: 'boolean'
        },
        id: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        opprettet: {
            format: 'date-time',
            type: 'string'
        },
        originalVedtaksDato: {
            format: 'date',
            type: 'string'
        },
        sakstype: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        },
        sprakkode: {
            '$ref': '#/components/schemas/Språkkode'
        },
        status: {
            enum: ['AVSLU', 'FVED', 'IVED', 'OPPRE', 'UTRED'],
            type: 'string'
        },
        stegTilstand: {
            '$ref': '#/components/schemas/BehandlingStegTilstandDto'
        },
        taskStatus: {
            '$ref': '#/components/schemas/AsyncPollingStatus'
        },
        toTrinnsBehandling: {
            type: 'boolean'
        },
        type: {
            enum: ['BT-002', 'BT-004', 'BT-010', '-'],
            type: 'string'
        },
        uuid: {
            format: 'uuid',
            type: 'string'
        },
        venteArsakKode: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        'venteårsak': {
            enum: ['-', 'ANKE_OVERSENDT_TIL_TRYGDERETTEN', 'ANKE_VENTER_PAA_MERKNADER_FRA_BRUKER', 'AVV_DOK', 'AVV_IM_MOT_AAREG', 'AVV_IM_MOT_SØKNAD_AT', 'AVV_SØKNADSPERIODER', 'AVV_FODSEL', 'AVV_RESPONS_REVURDERING', 'FOR_TIDLIG_SOKNAD', 'GRADERING_FLERE_ARBEIDSFORHOLD', 'REFUSJON_3_MÅNEDER', 'SCANN', 'UTV_FRIST', 'VENT_FEIL_ENDRINGSSØKNAD', 'VENT_GRADERING_UTEN_BEREGNINGSGRUNNLAG', 'VENT_INFOTRYGD', 'VENT_INNTEKT_RAPPORTERINGSFRIST', 'VENT_MILITÆR_OG_BG_UNDER_3G', 'VENT_OPDT_INNTEKTSMELDING', 'VENT_OPPTJENING_OPPLYSNINGER', 'VENT_PÅ_NY_INNTEKTSMELDING_MED_GYLDIG_ARB_ID', 'VENT_REGISTERINNHENTING', 'VENT_PÅ_SISTE_AAP_MELDEKORT', 'VENT_SØKNAD_SENDT_INFORMASJONSBREV', 'VENT_TIDLIGERE_BEHANDLING', 'VENT_ÅPEN_BEHANDLING', 'VENT_MANGL_FUNKSJ_SAKSBEHANDLER', 'VENTER_SVAR_PORTEN', 'VENTER_SVAR_TEAMS', 'ANDRE_INNTEKTSOPPLYSNINGER', 'INNTEKTSMELDING', 'LEGEERKLÆRING', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'VENTER_ETTERLYS_IM', 'VENTER_ETTERLYS_IM_VARSEL', 'OPPD_ÅPEN_BEH', 'VENT_DEKGRAD_REGEL', 'VENT_ØKONOMI', 'VENT_TILBAKEKREVING', 'VENTELØNN_ELLER_MILITÆR_MED_FLERE_AKTIVITETER', 'VENT_BEREGNING_TILBAKE_I_TID', 'BRUKER_70ÅR_VED_REFUSJON', 'VENT_LOVENDRING_8_41', 'INGEN_PERIODE_UTEN_YTELSE', 'PERIODE_MED_AVSLAG', 'MANGLENDE_FUNKSJONALITET', 'KORTVARIG_ARBEID', 'FRISINN_ATFL_SAMME_ORG', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT', 'FRISINN_VARIANT_NY_FL', 'FRISINN_VARIANT_NY_SN_2019', 'FRISINN_VARIANT_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT', 'FRISINN_VARIANT_KOMBINERT_NY_FL', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2020', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_ENDRET_INNTEKTSTYPE', 'AVV_SOKN_IT_PERIODER', 'AVV_SOKN_NAERING', 'AVV_SOKN_FRILANS', 'DELVIS_TILRETTELEGGING_OG_REFUSJON_SVP', 'AAP_DP_SISTE_10_MND_SVP', 'FL_SN_IKKE_STOTTET_FOR_SVP'],
            type: 'string'
        },
        versjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        }
    },
    required: ['opprettet', 'sakstype', 'status', 'type', 'uuid', 'versjon'],
    type: 'object'
} as const;

export const $BehandlingIdDto = {
    properties: {
        behandlingId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingId'],
    type: 'object'
} as const;

export const $BehandlingIdListe = {
    properties: {
        behandlinger: {
            items: {
                '$ref': '#/components/schemas/BehandlingIdDto'
            },
            maxItems: 1000,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['behandlinger'],
    type: 'object'
} as const;

export const $BehandlingMedFagsakDto = {
    properties: {
        behandlingResultatType: {
            enum: ['IKKE_FASTSATT', 'INNVILGET', 'DELVIS_INNVILGET', 'AVSLÅTT', 'OPPHØR', 'HENLAGT_SØKNAD_TRUKKET', 'HENLAGT_FEILOPPRETTET', 'HENLAGT_BRUKER_DØD', 'MERGET_OG_HENLAGT', 'HENLAGT_SØKNAD_MANGLER', 'HENLAGT_MASKINELT', 'INNVILGET_ENDRING', 'INGEN_ENDRING', 'MANGLER_BEREGNINGSREGLER'],
            type: 'string'
        },
        'eldsteDatoMedEndringFraSøker': {
            format: 'date-time',
            type: 'string'
        },
        sakstype: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['eldsteDatoMedEndringFraSøker', 'sakstype'],
    type: 'object'
} as const;

export const $BehandlingOperasjonerDto = {
    properties: {
        behandlingFraBeslutter: {
            type: 'boolean'
        },
        behandlingKanBytteEnhet: {
            type: 'boolean'
        },
        behandlingKanGjenopptas: {
            type: 'boolean'
        },
        behandlingKanHenlegges: {
            type: 'boolean'
        },
        behandlingKanOpnesForEndringer: {
            type: 'boolean'
        },
        behandlingKanSendeMelding: {
            type: 'boolean'
        },
        behandlingKanSettesPaVent: {
            type: 'boolean'
        },
        behandlingTilGodkjenning: {
            type: 'boolean'
        },
        uuid: {
            format: 'uuid',
            type: 'string'
        }
    },
    required: ['uuid'],
    type: 'object'
} as const;

export const $BehandlingOpprettingDto = {
    properties: {
        behandlingType: {
            enum: ['BT-002', 'BT-004', 'BT-010', '-'],
            type: 'string'
        },
        kanOppretteBehandling: {
            type: 'boolean'
        }
    },
    required: ['behandlingType'],
    type: 'object'
} as const;

export const $BehandlingStegTilstandDto = {
    properties: {
        stegStatus: {
            enum: ['STARTET', 'INNGANG', 'UTGANG', 'VENTER', 'AVBRUTT', 'UTFØRT', 'FREMOVERFØRT', 'TILBAKEFØRT', '-'],
            type: 'string'
        },
        stegType: {
            enum: ['BERYT', 'PRECONDITION_BERGRUNN', 'FAST_BERGRUNN', 'VURDER_OPPTJ_PERIODE', 'FASTSETT_STP_BER', 'FVEDSTEG', 'VURDER_VILKAR_BERGRUNN', 'VURDER_REF_BERGRUNN', 'FORDEL_BERGRUNN', 'FORBRES', 'FORS_BERGRUNN', 'FORS_BERGRUNN_2', 'VURDER_MANUELT_BREV', 'FORVEDSTEG', 'BERYT_OPPDRAG', 'VURDER_SØKNADSFRIST', 'INIT_PERIODER', 'INIT_VILKÅR', 'INPER', 'INREG', 'INSØK', 'INREG_AVSL', 'IVEDSTEG', 'KOFAK', 'KOARB', 'KOMPLETT_FOR_BEREGNING', 'KOFAKBER', 'KOFAKUT', 'KOFAK_LOP_MEDL', 'VURDEROP', 'SIMOPP', 'START', 'VRSLREV', 'VULOMED', 'VURDER_FARESIGNALER', 'VURDINNSYN', 'VURDERKOMPLETT', 'VURDER_STARTDATO_UTTAKSREGLER', 'VURDER_TILKOMMET_INNTEKT', 'POSTCONDITION_KOMPLETTHET', 'VARIANT_FILTER', 'VURDER_MEDISINSK', 'VURDER_NODVENDIGHET', 'VURDER_INSTITUSJON', 'VURDER_GJENNOMGATT_OPPLAERING', 'POST_MEDISINSK', 'VURDERMV', 'VURDER_OMSORG_FOR', 'VURDER_ALDER', 'VURDER_ALDER_BARN', 'VURDER_OPPTJ_FAKTA', 'VURDER_OPPTJ', 'VURDER_TILBAKETREKK', 'VURDER_UTLAND', 'VURDER_UTTAK', 'VURDER_UTTAK_V2', 'BEKREFT_UTTAK', 'MANUELL_VILKÅRSVURDERING', 'MANUELL_TILKJENNING_YTELSE', 'OVERGANG_FRA_INFOTRYGD'],
            type: 'string'
        },
        tidsstempel: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['stegStatus', 'stegType'],
    type: 'object'
} as const;

export const $BehandlingsresultatDto = {
    properties: {
        erRevurderingMedUendretUtfall: {
            type: 'boolean'
        },
        type: {
            enum: ['IKKE_FASTSATT', 'INNVILGET', 'DELVIS_INNVILGET', 'AVSLÅTT', 'OPPHØR', 'HENLAGT_SØKNAD_TRUKKET', 'HENLAGT_FEILOPPRETTET', 'HENLAGT_BRUKER_DØD', 'MERGET_OG_HENLAGT', 'HENLAGT_SØKNAD_MANGLER', 'HENLAGT_MASKINELT', 'INNVILGET_ENDRING', 'INGEN_ENDRING', 'MANGLER_BEREGNINGSREGLER'],
            type: 'string'
        },
        vedtaksdato: {
            format: 'date',
            type: 'string'
        },
        'vilkårResultat': {
            additionalProperties: {
                items: {
                    '$ref': '#/components/schemas/VilkårResultatDto'
                },
                type: 'array',
                uniqueItems: true
            },
            type: 'object'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $BehandlingÅrsakDto = {
    properties: {
        behandlingArsakType: {
            enum: ['RE-MF', 'RE-MFIP', 'RE-AVAB', 'RE-LOV', 'RE-RGLF', 'RE-FEFAKTA', 'RE-PRSSL', 'RE-END-FRA-BRUKER', 'RE-FRAVÆRKORR-SAKSB', 'RE-END-INNTEKTSMELD', 'BERØRT-BEHANDLING', 'RE-ANNET', 'RE-SATS-REGULERING', 'RE-ENDRET-FORDELING', 'INFOBREV_BEHANDLING', 'INFOBREV_OPPHOLD', 'RE-KLAG-U-INNTK', 'RE-KLAG-M-INNTK', 'RE-MDL', 'RE-OPTJ', 'RE-FRDLING', 'RE-INNTK', 'RE-DØD', 'RE-SRTB', 'RE-FRIST', 'RE-BER-GRUN', 'RE-KLAG-INNH-PGI', 'ETTER_KLAGE', 'RE-HENDELSE-FØDSEL', 'RE-HENDELSE-DØD-F', 'RE-HENDELSE-DØD-B', 'RE-HENDELSE-DØDFØD', 'RE-REGISTEROPPL', 'RE-YTELSE', 'RE-TILST-YT-INNVIL', 'RE-ENDR-BER-GRUN', 'RE-TILST-YT-OPPH', 'RE_REBEREGN_FP', 'RE_ANNEN_SAK', 'RE_UTSATT_BEHANDLING', 'RE_GJENOPPTAR_UTSATT_BEHANDLING', 'RE_ANNEN_SAK_ET', 'RE_ANNEN_SAK_NB', 'RE_ANNEN_SAK_S', 'RE_ANNEN_SAK_NB_ET', 'RE_ANNEN_SAK_S_ET', 'RE_ANNEN_SAK_S_NB', 'RE_ANNEN_SAK_S_ET_NB', 'RE_ANNEN_SAK_FP', 'UNNT_GENERELL', 'REVURDERER_BERØRT_PERIODE', '-'],
            type: 'string'
        },
        erAutomatiskRevurdering: {
            type: 'boolean'
        },
        manueltOpprettet: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $BekreftedeAksjonspunkterDto = {
    properties: {
        behandlingId: {
            '$ref': '#/components/schemas/BehandlingIdDto'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        bekreftedeAksjonspunktDtoer: {
            items: {
                '$ref': '#/components/schemas/BekreftetAksjonspunktDto'
            },
            maxItems: 10,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['behandlingId', 'behandlingVersjon', 'bekreftedeAksjonspunktDtoer'],
    type: 'object'
} as const;

export const $BekreftetAksjonspunktDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $BekreftetOgOverstyrteAksjonspunkterDto = {
    properties: {
        behandlingId: {
            '$ref': '#/components/schemas/BehandlingIdDto'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        bekreftedeAksjonspunktDtoer: {
            items: {
                '$ref': '#/components/schemas/BekreftetAksjonspunktDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        },
        minstEttAksjonspunkt: {
            type: 'boolean'
        },
        overstyrteAksjonspunktDtoer: {
            items: {
                '$ref': '#/components/schemas/OverstyringAksjonspunktDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['behandlingId', 'behandlingVersjon', 'bekreftedeAksjonspunktDtoer'],
    type: 'object'
} as const;

export const $Beløp = {
    properties: {
        verdi: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 10000000,
            minimum: -10000000,
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $BeredskapDto = {
    properties: {
        beskrivelser: {
            items: {
                '$ref': '#/components/schemas/BeskrivelseDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/VurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $BeregningAktivitetDto = {
    properties: {
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsforholdType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'FRISINN', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'UTDANNINGSPERMISJON', '-'],
            type: 'string'
        },
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        eksternArbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        skalBrukes: {
            type: 'boolean'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['arbeidsforholdType', 'fom', 'tom'],
    type: 'object'
} as const;

export const $BeregningsgrunnlagArbeidsforholdDto = {
    properties: {
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsforholdType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'FRISINN', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'UTDANNINGSPERMISJON', '-'],
            type: 'string'
        },
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        belopFraInntektsmeldingPrMnd: {
            type: 'number'
        },
        eksternArbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'naturalytelseBortfaltPrÅr': {
            type: 'number'
        },
        'naturalytelseTilkommetPrÅr': {
            type: 'number'
        },
        opphoersdato: {
            format: 'date',
            type: 'string'
        },
        organisasjonstype: {
            enum: ['JURIDISK_ENHET', 'VIRKSOMHET', 'KUNSTIG', '-'],
            type: 'string'
        },
        refusjonPrAar: {
            type: 'number'
        },
        startdato: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $BeregningsgrunnlagDto = {
    properties: {
        aktivitetStatus: {
            items: {
                enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
                maxLength: 2147483647,
                minLength: 1,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        andelerMedGraderingUtenBG: {
            items: {
                '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        avklaringsbehov: {
            items: {
                '$ref': '#/components/schemas/AvklaringsbehovDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        },
        beregningsgrunnlagPeriode: {
            items: {
                '$ref': '#/components/schemas/BeregningsgrunnlagPeriodeDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        dekningsgrad: {
            format: 'int32',
            maximum: 100,
            minimum: 0,
            type: 'integer'
        },
        erOverstyrtInntekt: {
            type: 'boolean'
        },
        faktaOmBeregning: {
            '$ref': '#/components/schemas/FaktaOmBeregningDto'
        },
        faktaOmFordeling: {
            '$ref': '#/components/schemas/FordelingDto'
        },
        forlengelseperioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        'grunnbeløp': {
            type: 'number'
        },
        halvG: {
            type: 'number'
        },
        hjemmel: {
            enum: ['F_9_9', 'F_9_8_8_28', 'F_9_9_8_28_8_30', 'F_9_9_8_35', 'F_9_9_8_38', 'F_9_9_8_40', 'F_9_9_8_41', 'F_9_9_8_42', 'F_9_9_8_43', 'F_9_9_8_47', 'F_9_9_8_49', 'F_14_7', 'F_14_7_8_30', 'F_14_7_8_28_8_30', 'F_14_7_8_35', 'F_14_7_8_38', 'F_14_7_8_40', 'F_14_7_8_41', 'F_14_7_8_42', 'F_14_7_8_43', 'F_14_7_8_47', 'F_14_7_8_49', 'F_22_13_6', 'COV_1_5', 'KORONALOVEN_3', '-'],
            type: 'string'
        },
        inntektsgrunnlag: {
            '$ref': '#/components/schemas/InntektsgrunnlagDto'
        },
        refusjonTilVurdering: {
            '$ref': '#/components/schemas/RefusjonTilVurderingDto'
        },
        sammenligningsgrunnlag: {
            '$ref': '#/components/schemas/SammenligningsgrunnlagDto'
        },
        sammenligningsgrunnlagPrStatus: {
            items: {
                '$ref': '#/components/schemas/SammenligningsgrunnlagDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        skjaeringstidspunktBeregning: {
            format: 'date',
            type: 'string'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        },
        'vilkårsperiodeFom': {
            format: 'date',
            type: 'string'
        },
        ytelsesspesifiktGrunnlag: {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        }
    },
    required: ['avklaringsbehov', 'erOverstyrtInntekt', 'sammenligningsgrunnlag', 'skjaeringstidspunktBeregning', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $BeregningsgrunnlagKoblingDto = {
    properties: {
        erForlengelse: {
            type: 'boolean'
        },
        referanse: {
            format: 'uuid',
            type: 'string'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['erForlengelse', 'referanse', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPeriodeDto = {
    properties: {
        avkortetPrAar: {
            type: 'number'
        },
        beregnetPrAar: {
            type: 'number'
        },
        beregningsgrunnlagPeriodeFom: {
            format: 'date',
            type: 'string'
        },
        beregningsgrunnlagPeriodeTom: {
            format: 'date',
            type: 'string'
        },
        beregningsgrunnlagPrStatusOgAndel: {
            items: {
                '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        bruttoInkludertBortfaltNaturalytelsePrAar: {
            type: 'number'
        },
        bruttoPrAar: {
            type: 'number'
        },
        dagsats: {
            format: 'int64',
            type: 'integer'
        },
        periodeAarsaker: {
            items: {
                enum: ['NATURALYTELSE_BORTFALT', 'ARBEIDSFORHOLD_AVSLUTTET', 'NATURALYTELSE_TILKOMMER', 'ENDRING_I_REFUSJONSKRAV', 'REFUSJON_OPPHØRER', 'GRADERING', 'GRADERING_OPPHØRER', 'ENDRING_I_AKTIVITETER_SØKT_FOR', 'TILKOMMET_INNTEKT', 'TILKOMMET_INNTEKT_MANUELT', 'TILKOMMET_INNTEKT_AVSLUTTET', 'REFUSJON_AVSLÅTT', 'REPRESENTERER_STORTINGET', 'REPRESENTERER_STORTINGET_AVSLUTTET', '-'],
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        redusertPrAar: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelATDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
        },
        {
            properties: {
                bortfaltNaturalytelse: {
                    type: 'number'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelDto = {
    discriminator: {
        propertyName: 'dtoType'
    },
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 1,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        avkortetPrAar: {
            type: 'number'
        },
        belopPrAarEtterAOrdningen: {
            type: 'number'
        },
        belopPrMndEtterAOrdningen: {
            type: 'number'
        },
        beregnetPrAar: {
            type: 'number'
        },
        beregningsperiodeFom: {
            format: 'date',
            type: 'string'
        },
        beregningsperiodeTom: {
            format: 'date',
            type: 'string'
        },
        besteberegningPrAar: {
            type: 'number'
        },
        bruttoPrAar: {
            type: 'number'
        },
        dagsats: {
            format: 'int64',
            maximum: 1000000,
            minimum: 0,
            type: 'integer'
        },
        dtoType: {
            type: 'string'
        },
        erNyIArbeidslivet: {
            type: 'boolean'
        },
        erTidsbegrensetArbeidsforhold: {
            type: 'boolean'
        },
        erTilkommetAndel: {
            type: 'boolean'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        fordeltPrAar: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        },
        lonnsendringIBeregningsperioden: {
            type: 'boolean'
        },
        'originalDagsatsFraTilstøtendeYtelse': {
            format: 'int64',
            maximum: 1000000,
            minimum: 0,
            type: 'integer'
        },
        overstyrtPrAar: {
            type: 'number'
        },
        redusertPrAar: {
            type: 'number'
        },
        skalFastsetteGrunnlag: {
            type: 'boolean'
        }
    },
    required: ['dtoType'],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelDtoFelles = {
    allOf: [
        {
            '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
        }
    ],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelFLDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
        },
        {
            properties: {
                erNyoppstartet: {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelSNDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
        },
        {
            properties: {
                'næringer': {
                    items: {
                        '$ref': '#/components/schemas/EgenNæringDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                },
                pgiSnitt: {
                    type: 'number'
                },
                pgiVerdier: {
                    items: {
                        '$ref': '#/components/schemas/PgiDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $BeregningsgrunnlagPrStatusOgAndelYtelseDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/BeregningsgrunnlagPrStatusOgAndelDto'
        },
        {
            properties: {
                belopFraMeldekortPrAar: {
                    type: 'number'
                },
                belopFraMeldekortPrMnd: {
                    type: 'number'
                },
                oppjustertGrunnlag: {
                    type: 'number'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $BeregningsresultatDto = {
    properties: {
        opphoersdato: {
            format: 'date',
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/BeregningsresultatPeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        skalHindreTilbaketrekk: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $BeregningsresultatMedUtbetaltePeriodeDto = {
    properties: {
        opphoersdato: {
            format: 'date',
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/BeregningsresultatPeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        skalHindreTilbaketrekk: {
            type: 'boolean'
        },
        utbetaltePerioder: {
            items: {
                '$ref': '#/components/schemas/BeregningsresultatPeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $BeregningsresultatPeriodeAndelDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'IKKE_YRKESAKTIV', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        'aktørId': {
            type: 'string'
        },
        arbeidsforholdId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Graph}\\-\\p{P}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        arbeidsforholdType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'FRISINN', 'UTDANNINGSPERMISJON', 'MELLOM_ARBEID', '-'],
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/ArbeidsgiverDto'
        },
        arbeidsgiverNavn: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{P}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverOrgnr: {
            type: 'string'
        },
        eksternArbeidsforholdId: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{P}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        refusjon: {
            format: 'int32',
            maximum: 1000000,
            minimum: 0,
            type: 'integer'
        },
        sisteUtbetalingsdato: {
            format: 'date',
            type: 'string'
        },
        stillingsprosent: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 500,
            minimum: 0,
            type: 'number'
        },
        tilSoker: {
            format: 'int32',
            maximum: 1000000,
            minimum: 0,
            type: 'integer'
        },
        utbetalingsgrad: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        utbetalingsgradOppdragForBruker: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        utbetalingsgradOppdragForRefusjon: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        uttak: {
            items: {
                '$ref': '#/components/schemas/UttakDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['inntektskategori'],
    type: 'object'
} as const;

export const $BeregningsresultatPeriodeDto = {
    properties: {
        andeler: {
            items: {
                '$ref': '#/components/schemas/BeregningsresultatPeriodeAndelDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        },
        dagsats: {
            format: 'int32',
            maximum: 100000,
            minimum: 0,
            type: 'integer'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        reduksjonsfaktorInaktivTypeA: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 1,
            minimum: 0,
            type: 'number'
        },
        tom: {
            format: 'date',
            type: 'string'
        },
        totalUtbetalingsgradEtterReduksjonVedTilkommetInntekt: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 1,
            minimum: 0,
            type: 'number'
        },
        totalUtbetalingsgradFraUttak: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 1,
            minimum: 0,
            type: 'number'
        }
    },
    required: ['andeler', 'dagsats', 'fom', 'tom'],
    type: 'object'
} as const;

export const $BeskrivelseDto = {
    properties: {
        kilde: {
            enum: ['SØKER', 'ANDRE'],
            type: 'string'
        },
        mottattDato: {
            format: 'date',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        tekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $BesteberegningInntektDto = {
    properties: {
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        inntekt: {
            type: 'number'
        },
        opptjeningAktivitetType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'FRISINN', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'UTDANNINGSPERMISJON', '-'],
            type: 'string'
        }
    },
    required: ['inntekt', 'opptjeningAktivitetType'],
    type: 'object'
} as const;

export const $BesteberegningMånedGrunnlagDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        inntekter: {
            items: {
                '$ref': '#/components/schemas/BesteberegningInntektDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $BesteberegninggrunnlagDto = {
    properties: {
        avvik: {
            type: 'number'
        },
        'besteMåneder': {
            items: {
                '$ref': '#/components/schemas/BesteberegningMånedGrunnlagDto'
            },
            maxItems: 6,
            minItems: 6,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $BestillBrevDto = {
    properties: {
        arsakskode: {
            maxLength: 100,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        },
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        brevmalkode: {
            maxLength: 100,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        },
        dokumentbestillingsId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        },
        fritekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        fritekstbrev: {
            '$ref': '#/components/schemas/FritekstbrevinnholdDto'
        },
        overstyrtMottaker: {
            '$ref': '#/components/schemas/MottakerDto'
        }
    },
    required: ['behandlingId', 'brevmalkode'],
    type: 'object'
} as const;

export const $BrevMottakerinfoEregResponseDto = {
    properties: {
        navn: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $BrukForrigeSkatteoppgjørDto = {
    properties: {
        'behandlingIdForrigeSkatteoppgjør': {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['behandlingIdForrigeSkatteoppgjør', 'saksnummer', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $ByttBehandlendeEnhetDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        enhetId: {
            maxLength: 10,
            minLength: 0,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        },
        enhetNavn: {
            maxLength: 256,
            minLength: 1,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'behandlingId', 'behandlingVersjon', 'enhetId'],
    type: 'object'
} as const;

export const $CallbackDto = {
    properties: {
        avsenderRef: {
            '$ref': '#/components/schemas/ReferanseDto'
        },
        grunnlagType: {
            enum: ['IAY'],
            type: 'string'
        },
        oppdatertGrunnlagRef: {
            '$ref': '#/components/schemas/ReferanseDto'
        },
        opprettetTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        opprinneligGrunnlagRef: {
            '$ref': '#/components/schemas/ReferanseDto'
        }
    },
    required: ['avsenderRef', 'grunnlagType', 'opprettetTidspunkt'],
    type: 'object'
} as const;

export const $DatoIntervallEntitet = {
    properties: {
        fomDato: {
            format: 'date',
            type: 'string'
        },
        tomDato: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $DeaktiverSkjæringstidspunktDto = {
    properties: {
        behandlingId: {
            '$ref': '#/components/schemas/BehandlingIdDto'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['behandlingId', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $DeltBosted = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                deltBostedMed: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $DirekteOvergangDto = {
    properties: {
        'skjæringstidspunkter': {
            items: {
                format: 'date',
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['skjæringstidspunkter'],
    type: 'object'
} as const;

export const $DokumentDto = {
    properties: {
        behandlinger: {
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        brevkode: {
            type: 'string'
        },
        dokumentId: {
            type: 'string'
        },
        gjelderFor: {
            type: 'string'
        },
        href: {
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        kommunikasjonsretning: {
            enum: ['I', 'U', 'N'],
            type: 'string'
        },
        tidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        tittel: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $DokumentIdDto = {
    properties: {
        dokumentId: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $DokumentMedUstrukturerteDataDto = {
    properties: {
        datert: {
            format: 'date',
            type: 'string'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        type: {
            enum: ['LEGEERKLÆRING_SYKEHUS', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'UKLASSIFISERT', 'LEGEERKLÆRING_ANNEN', 'LEGEERKLÆRING_MED_DOKUMENTASJON_AV_OPPLÆRING', 'EPIKRISE', 'FEILREGISTRERT'],
            type: 'string'
        }
    },
    required: ['id', 'type'],
    type: 'object'
} as const;

export const $DødsfallHendelse = {
    allOf: [
        {
            '$ref': '#/components/schemas/Hendelse'
        },
        {
            properties: {
                'dødsdato': {
                    format: 'date',
                    type: 'string'
                },
                hendelseInfo: {
                    '$ref': '#/components/schemas/HendelseInfo'
                }
            },
            type: 'object'
        }
    ],
    required: ['dødsdato', 'hendelseInfo'],
    type: 'object'
} as const;

export const $EgenNæringDto = {
    properties: {
        begrunnelse: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        endringsdato: {
            format: 'date',
            type: 'string'
        },
        erNyIArbeidslivet: {
            type: 'boolean'
        },
        erNyoppstartet: {
            type: 'boolean'
        },
        erVarigEndret: {
            type: 'boolean'
        },
        'kanRegnskapsførerKontaktes': {
            type: 'boolean'
        },
        oppgittInntekt: {
            type: 'number'
        },
        'opphørsdato': {
            format: 'date',
            type: 'string'
        },
        oppstartsdato: {
            format: 'date',
            type: 'string'
        },
        orgnr: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'regnskapsførerNavn': {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'regnskapsførerTlf': {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        utenlandskvirksomhetsnavn: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        virksomhetType: {
            enum: ['DAGMAMMA', 'FISKE', 'FRILANSER', 'JORDBRUK_SKOGBRUK', 'ANNEN', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $EksternArbeidsforholdRef = {
    properties: {
        referanse: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['referanse'],
    type: 'object'
} as const;

export const $EndreNotatDto = {
    properties: {
        notatId: {
            format: 'uuid',
            type: 'string'
        },
        notatTekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        versjon: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['notatId', 'notatTekst', 'saksnummer', 'versjon'],
    type: 'object'
} as const;

export const $EtablertTilsynNattevåkOgBeredskapDto = {
    properties: {
        beredskap: {
            '$ref': '#/components/schemas/BeredskapDto'
        },
        etablertTilsynPerioder: {
            items: {
                '$ref': '#/components/schemas/EtablertTilsynPeriodeDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        'nattevåk': {
            '$ref': '#/components/schemas/NattevåkDto'
        },
        smortEtablertTilsynPerioder: {
            items: {
                '$ref': '#/components/schemas/SmørtEtablertTilsyn'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $EtablertTilsynPeriodeDto = {
    properties: {
        kilde: {
            enum: ['SØKER', 'ANDRE'],
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        tidPerDag: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $FagsakDto = {
    properties: {
        endret: {
            format: 'date-time',
            type: 'string'
        },
        erPbSak: {
            type: 'boolean'
        },
        gyldigPeriode: {
            '$ref': '#/components/schemas/Periode'
        },
        kanRevurderingOpprettes: {
            type: 'boolean'
        },
        opprettet: {
            format: 'date-time',
            type: 'string'
        },
        person: {
            '$ref': '#/components/schemas/PersonDto'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        sakstype: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        },
        skalBehandlesAvInfotrygd: {
            type: 'boolean'
        },
        status: {
            enum: ['OPPR', 'UBEH', 'LOP', 'AVSLU'],
            type: 'string'
        }
    },
    required: ['saksnummer', 'sakstype'],
    type: 'object'
} as const;

export const $FagsakInfoDto = {
    properties: {
        gyldigPeriode: {
            '$ref': '#/components/schemas/Periode'
        },
        person: {
            type: 'string'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        skalBehandlesAvInfotrygd: {
            type: 'boolean'
        },
        status: {
            pattern: '^[a-zæøåA-ZÆØÅ0-9_]+$',
            type: 'string'
        },
        ytelseType: {
            pattern: '^[a-zæøåA-ZÆØÅ0-9_]+$',
            type: 'string'
        }
    },
    required: ['saksnummer', 'ytelseType'],
    type: 'object'
} as const;

export const $FaktaOmBeregningAndelDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $FaktaOmBeregningDto = {
    properties: {
        andelerForFaktaOmBeregning: {
            items: {
                '$ref': '#/components/schemas/AndelForFaktaOmBeregningDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'arbeidsforholdMedLønnsendringUtenIM': {
            items: {
                '$ref': '#/components/schemas/FaktaOmBeregningAndelDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        arbeidstakerOgFrilanserISammeOrganisasjonListe: {
            items: {
                '$ref': '#/components/schemas/ATogFLISammeOrganisasjonDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        avklarAktiviteter: {
            '$ref': '#/components/schemas/AvklarAktiviteterDto'
        },
        faktaOmBeregningTilfeller: {
            items: {
                enum: ['VURDER_TIDSBEGRENSET_ARBEIDSFORHOLD', 'VURDER_SN_NY_I_ARBEIDSLIVET', 'VURDER_NYOPPSTARTET_FL', 'FASTSETT_MAANEDSINNTEKT_FL', 'FASTSETT_BG_ARBEIDSTAKER_UTEN_INNTEKTSMELDING', 'VURDER_LØNNSENDRING', 'FASTSETT_MÅNEDSLØNN_ARBEIDSTAKER_UTEN_INNTEKTSMELDING', 'VURDER_AT_OG_FL_I_SAMME_ORGANISASJON', 'FASTSETT_BESTEBEREGNING_FØDENDE_KVINNE', 'VURDER_ETTERLØNN_SLUTTPAKKE', 'FASTSETT_ETTERLØNN_SLUTTPAKKE', 'VURDER_MOTTAR_YTELSE', 'VURDER_BESTEBEREGNING', 'VURDER_MILITÆR_SIVILTJENESTE', 'VURDER_REFUSJONSKRAV_SOM_HAR_KOMMET_FOR_SENT', 'FASTSETT_BG_KUN_YTELSE', 'TILSTØTENDE_YTELSE', 'FASTSETT_ENDRET_BEREGNINGSGRUNNLAG', '-'],
                maxLength: 15,
                minLength: 0,
                type: 'string'
            },
            maxItems: 15,
            minItems: 0,
            type: 'array'
        },
        frilansAndel: {
            '$ref': '#/components/schemas/FaktaOmBeregningAndelDto'
        },
        kortvarigeArbeidsforhold: {
            items: {
                '$ref': '#/components/schemas/KortvarigeArbeidsforholdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        kunYtelse: {
            '$ref': '#/components/schemas/KunYtelseDto'
        },
        refusjonskravSomKommerForSentListe: {
            items: {
                '$ref': '#/components/schemas/RefusjonskravSomKommerForSentDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        saksopplysninger: {
            '$ref': '#/components/schemas/Saksopplysninger'
        },
        vurderBesteberegning: {
            '$ref': '#/components/schemas/VurderBesteberegningDto'
        },
        vurderMilitaer: {
            '$ref': '#/components/schemas/VurderMilitærDto'
        },
        vurderMottarYtelse: {
            '$ref': '#/components/schemas/VurderMottarYtelseDto'
        }
    },
    type: 'object'
} as const;

export const $FastsattOpptjeningAktivitetDto = {
    properties: {
        aktivitetReferanse: {
            pattern: '^[\\p{Alnum}:_\\-/\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverNavn: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        klasse: {
            enum: ['BEKREFTET_GODKJENT', 'BEKREFTET_AVVIST', 'ANTATT_GODKJENT', 'MELLOMLIGGENDE_PERIODE', '-'],
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        },
        type: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'FRISINN', 'UTDANNINGSPERMISJON', 'MELLOM_ARBEID', '-'],
            type: 'string'
        }
    },
    required: ['fom', 'klasse', 'tom', 'type'],
    type: 'object'
} as const;

export const $FastsattOpptjeningDto = {
    properties: {
        fastsattOpptjeningAktivitetList: {
            items: {
                '$ref': '#/components/schemas/FastsattOpptjeningAktivitetDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        opptjeningFom: {
            format: 'date',
            type: 'string'
        },
        opptjeningTom: {
            format: 'date',
            type: 'string'
        },
        opptjeningperiode: {
            '$ref': '#/components/schemas/OpptjeningPeriodeDto'
        }
    },
    required: ['opptjeningFom', 'opptjeningTom', 'opptjeningperiode'],
    type: 'object'
} as const;

export const $FastsattUttakDto = {
    properties: {
        aktiviteter: {
            items: {
                '$ref': '#/components/schemas/UttakAktivitetPeriodeDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        },
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $FinnEllerOpprettSak = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        ytelseType: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}æøåÆØÅ_\\-\\.]*$',
            type: 'string'
        }
    },
    required: ['aktørId', 'periode'],
    type: 'object'
} as const;

export const $FinnEllerOpprettSakFnr = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        pleietrengende: {
            type: 'string'
        },
        relatertPerson: {
            type: 'string'
        },
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        'søker': {
            type: 'string'
        },
        ytelseType: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}æøåÆØÅ_\\-\\.]*$',
            type: 'string'
        }
    },
    required: ['periode', 'søker'],
    type: 'object'
} as const;

export const $FinnSak = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['aktørId', 'ytelseType'],
    type: 'object'
} as const;

export const $FordelBeregningsgrunnlagAndelDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        arbeidsforholdType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'FRISINN', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'UTDANNINGSPERMISJON', '-'],
            type: 'string'
        },
        belopFraInntektsmeldingPrAar: {
            type: 'number'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        fordelingForrigeBehandlingPrAar: {
            type: 'number'
        },
        fordeltPrAar: {
            type: 'number'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        },
        nyttArbeidsforhold: {
            type: 'boolean'
        },
        refusjonskravFraInntektsmeldingPrAar: {
            type: 'number'
        },
        refusjonskravPrAar: {
            type: 'number'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'arbeidsforholdType', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $FordelBeregningsgrunnlagArbeidsforholdDto = {
    properties: {
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsforholdType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'FRISINN', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'UTDANNINGSPERMISJON', '-'],
            type: 'string'
        },
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        belopFraInntektsmeldingPrMnd: {
            type: 'number'
        },
        eksternArbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'naturalytelseBortfaltPrÅr': {
            type: 'number'
        },
        'naturalytelseTilkommetPrÅr': {
            type: 'number'
        },
        opphoersdato: {
            format: 'date',
            type: 'string'
        },
        organisasjonstype: {
            enum: ['JURIDISK_ENHET', 'VIRKSOMHET', 'KUNSTIG', '-'],
            type: 'string'
        },
        perioderMedGraderingEllerRefusjon: {
            items: {
                '$ref': '#/components/schemas/NyPeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        permisjon: {
            '$ref': '#/components/schemas/PermisjonDto'
        },
        refusjonPrAar: {
            type: 'number'
        },
        startdato: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['perioderMedGraderingEllerRefusjon'],
    type: 'object'
} as const;

export const $FordelBeregningsgrunnlagDto = {
    properties: {
        arbeidsforholdTilFordeling: {
            items: {
                '$ref': '#/components/schemas/FordelBeregningsgrunnlagArbeidsforholdDto'
            },
            maxItems: 500,
            minItems: 0,
            type: 'array'
        },
        fordelBeregningsgrunnlagPerioder: {
            items: {
                '$ref': '#/components/schemas/FordelBeregningsgrunnlagPeriodeDto'
            },
            maxItems: 5000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['arbeidsforholdTilFordeling', 'fordelBeregningsgrunnlagPerioder'],
    type: 'object'
} as const;

export const $FordelBeregningsgrunnlagPeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        fordelBeregningsgrunnlagAndeler: {
            items: {
                '$ref': '#/components/schemas/FordelBeregningsgrunnlagAndelDto'
            },
            maxItems: 100,
            minItems: 1,
            type: 'array'
        },
        harPeriodeAarsakGraderingEllerRefusjon: {
            type: 'boolean'
        },
        skalKunneEndreRefusjon: {
            type: 'boolean'
        },
        skalPreutfyllesMedBeregningsgrunnlag: {
            type: 'boolean'
        },
        skalRedigereInntekt: {
            type: 'boolean'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'fordelBeregningsgrunnlagAndeler'],
    type: 'object'
} as const;

export const $FordelingDto = {
    properties: {
        fordelBeregningsgrunnlag: {
            '$ref': '#/components/schemas/FordelBeregningsgrunnlagDto'
        },
        vurderNyttInntektsforholdDto: {
            '$ref': '#/components/schemas/VurderNyttInntektsforholdDto'
        },
        vurderRepresentererStortinget: {
            '$ref': '#/components/schemas/VurderRepresentererStortingetDto'
        }
    },
    type: 'object'
} as const;

export const $FordelingFår = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                avsender: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $FordelingGir = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                mottaker: {
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $ForeldrepengerGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                aktivitetGradering: {
                    '$ref': '#/components/schemas/AktivitetGraderingDto'
                },
                dekningsgrad: {
                    exclusiveMaximum: false,
                    exclusiveMinimum: false,
                    maximum: 100,
                    minimum: 0,
                    type: 'number'
                },
                kvalifisererTilBesteberegning: {
                    type: 'boolean'
                },
                ytelsegrunnlagForBesteberegning: {
                    items: {
                        '$ref': '#/components/schemas/Ytelsegrunnlag'
                    },
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['kvalifisererTilBesteberegning'],
    type: 'object'
} as const;

export const $ForeldrepengerGrunnlagDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                besteberegninggrunnlag: {
                    '$ref': '#/components/schemas/BesteberegninggrunnlagDto'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $Fosterbarn = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                'barnetsFødselsdato': {
                    format: 'date',
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                mottaker: {
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $FosterbarnDto = {
    properties: {
        fnr: {
            maxLength: 11,
            minLength: 0,
            pattern: '^[\\p{Alnum}]{11}+$',
            type: 'string'
        },
        'fødselsdato': {
            format: 'date',
            type: 'string'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['fødselsdato', 'navn'],
    type: 'object'
} as const;

export const $FosterbarnListeDto = {
    properties: {
        fosterbarn: {
            items: {
                '$ref': '#/components/schemas/FosterbarnDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['fosterbarn'],
    type: 'object'
} as const;

export const $FrisinnAndelDto = {
    properties: {
        oppgittInntekt: {
            type: 'number'
        },
        'statusSøktFor': {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        }
    },
    required: ['statusSøktFor'],
    type: 'object'
} as const;

export const $FrisinnGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                frisinnBehandlingType: {
                    enum: ['REVURDERING', 'NY_SØKNADSPERIODE'],
                    type: 'string'
                },
                'perioderMedSøkerInfo': {
                    items: {
                        '$ref': '#/components/schemas/PeriodeMedSøkerInfoDto'
                    },
                    maxItems: 40,
                    minItems: 0,
                    type: 'array'
                },
                'søkerYtelseForFrilans': {
                    type: 'boolean'
                },
                'søkerYtelseForNæring': {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $FrisinnGrunnlagDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                'avslagsårsakPrPeriode': {
                    items: {
                        '$ref': '#/components/schemas/AvslagsårsakPrPeriodeDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                },
                frisinnPerioder: {
                    items: {
                        '$ref': '#/components/schemas/FrisinnPeriodeDto'
                    },
                    maxItems: 2147483647,
                    minItems: 1,
                    type: 'array'
                },
                opplysningerFL: {
                    '$ref': '#/components/schemas/SøknadsopplysningerDto'
                },
                opplysningerSN: {
                    '$ref': '#/components/schemas/SøknadsopplysningerDto'
                },
                'perioderSøktFor': {
                    items: {
                        '$ref': '#/components/schemas/OpplystPeriodeDto'
                    },
                    maxItems: 2147483647,
                    minItems: 1,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['avslagsårsakPrPeriode', 'frisinnPerioder', 'perioderSøktFor'],
    type: 'object'
} as const;

export const $FrisinnPeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        frisinnAndeler: {
            items: {
                '$ref': '#/components/schemas/FrisinnAndelDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        oppgittArbeidsinntekt: {
            type: 'number'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'frisinnAndeler', 'tom'],
    type: 'object'
} as const;

export const $FritekstbrevinnholdDto = {
    properties: {
        'brødtekst': {
            maxLength: 100000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        overskrift: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        }
    },
    required: ['brødtekst', 'overskrift'],
    type: 'object'
} as const;

export const $FullUttaksplan = {
    properties: {
        aktiviteter: {
            items: {
                '$ref': '#/components/schemas/Aktivitet'
            },
            type: 'array'
        },
        saksnummer: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $FødselHendelse = {
    allOf: [
        {
            '$ref': '#/components/schemas/Hendelse'
        },
        {
            properties: {
                'fødselsdato': {
                    format: 'date',
                    type: 'string'
                },
                hendelseInfo: {
                    '$ref': '#/components/schemas/HendelseInfo'
                }
            },
            type: 'object'
        }
    ],
    required: ['fødselsdato', 'hendelseInfo'],
    type: 'object'
} as const;

export const $GjennomgåttOpplæringDto = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/OpplæringVurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder', 'vurderinger'],
    type: 'object'
} as const;

export const $GjenopptaBehandlingDto = {
    properties: {
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        }
    },
    required: ['behandlingId', 'behandlingVersjon'],
    type: 'object'
} as const;

export const $GodkjentOpplæringsinstitusjonDto = {
    properties: {
        navn: {
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            type: 'array'
        },
        uuid: {
            format: 'uuid',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $Gradering = {
    properties: {
        arbeidstidProsent: {
            type: 'number'
        },
        indexKey: {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/DatoIntervallEntitet'
        }
    },
    type: 'object'
} as const;

export const $GraderingDto = {
    properties: {
        arbeidstidProsent: {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['arbeidstidProsent', 'periode'],
    type: 'object'
} as const;

export const $GraderingMotTilsyn = {
    properties: {
        'andreSøkeresTilsyn': {
            type: 'number'
        },
        'andreSøkeresTilsynReberegnet': {
            type: 'boolean'
        },
        etablertTilsyn: {
            type: 'number'
        },
        'overseEtablertTilsynÅrsak': {
            enum: ['FOR_LAVT', 'NATTEVÅK', 'BEREDSKAP', 'NATTEVÅK_OG_BEREDSKAP'],
            type: 'string'
        },
        'tilgjengeligForSøker': {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $HarGyldigOmsorgsdagerVedtakDto = {
    properties: {
        harInnvilgedeBehandlinger: {
            type: 'boolean'
        },
        saksnummer: {
            type: 'string'
        },
        vedtaksdato: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $Hendelse = {
    discriminator: {
        propertyName: 'type'
    },
    properties: {
        type: {
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $HendelseDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        hendelse: {
            '$ref': '#/components/schemas/Hendelse'
        }
    },
    required: ['aktørId', 'hendelse'],
    type: 'object'
} as const;

export const $HendelseInfo = {
    properties: {
        'aktørIder': {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        hendelseId: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        opprettet: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['aktørIder', 'opprettet'],
    type: 'object'
} as const;

export const $HenleggBehandlingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        'årsakKode': {
            maxLength: 100,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'behandlingId', 'behandlingVersjon', 'årsakKode'],
    type: 'object'
} as const;

export const $HentFnr = {
    properties: {
        'aktørIder': {
            pattern: '^[\\p{Alnum}\\s]+$',
            type: 'string'
        }
    },
    required: ['aktørIder'],
    type: 'object'
} as const;

export const $HentReservertSaksnummerDto = {
    properties: {
        'behandlingsår': {
            type: 'string'
        },
        'brukerAktørId': {
            type: 'string'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['brukerAktørId', 'saksnummer', 'ytelseType'],
    type: 'object'
} as const;

export const $HentSisteGyldigeVedtakForAktørInputDto = {
    properties: {
        'pleietrengendeAktørId': {
            type: 'string'
        }
    },
    required: ['pleietrengendeAktørId'],
    type: 'object'
} as const;

export const $HentSøknadPerioderDto = {
    properties: {
        bruker: {
            type: 'string'
        },
        pleietrengende: {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['bruker', 'ytelseType'],
    type: 'object'
} as const;

export const $InitLinksDto = {
    properties: {
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        sakLinks: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $InnloggetAnsattDto = {
    properties: {
        brukernavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        funksjonellTid: {
            format: 'date-time',
            type: 'string'
        },
        kanBehandleKode6: {
            type: 'boolean'
        },
        kanBehandleKode7: {
            type: 'boolean'
        },
        kanBehandleKodeEgenAnsatt: {
            type: 'boolean'
        },
        kanBeslutte: {
            type: 'boolean'
        },
        kanOverstyre: {
            type: 'boolean'
        },
        kanSaksbehandle: {
            type: 'boolean'
        },
        kanVeilede: {
            type: 'boolean'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        skalViseDetaljerteFeilmeldinger: {
            type: 'boolean'
        }
    },
    required: ['brukernavn', 'funksjonellTid', 'navn'],
    type: 'object'
} as const;

export const $Innsending = {
    properties: {
        innhold: {
            '$ref': '#/components/schemas/InnsendingInnhold'
        },
        journalpostId: {
            type: 'string'
        },
        kanalReferanse: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[a-zA-Z0-9\\\\/\\.\\:\\-_=]*$',
            type: 'string'
        },
        mottattDato: {
            format: 'date',
            type: 'string'
        },
        mottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    },
    required: ['innhold', 'mottattTidspunkt', 'saksnummer', 'type'],
    type: 'object'
} as const;

export const $InnsendingInnhold = {
    discriminator: {
        propertyName: 'ytelseType'
    },
    properties: {
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['ytelseType'],
    type: 'object'
} as const;

export const $InnsendingMottatt = {
    properties: {
        saksnummer: {
            type: 'string'
        }
    },
    required: ['saksnummer'],
    type: 'object'
} as const;

export const $InntektArbeidYtelseArbeidsforholdV2Dto = {
    properties: {
        'aksjonspunktÅrsaker': {
            items: {
                enum: ['MANGLENDE_INNTEKTSMELDING', 'INNTEKTSMELDING_UTEN_ARBEIDSFORHOLD', 'OVERGANG_ARBEIDSFORHOLDS_ID_UNDER_YTELSE'],
                type: 'string'
            },
            type: 'array',
            uniqueItems: true
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/ArbeidsforholdIdDto'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        },
        begrunnelse: {
            maxLength: 400,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        handlingType: {
            enum: ['-', 'BRUK', 'LAGT_TIL_AV_SAKSBEHANDLER', 'BASERT_PÅ_INNTEKTSMELDING', 'BRUK_UTEN_INNTEKTSMELDING', 'IKKE_BRUK', 'NYTT_ARBEIDSFORHOLD', 'SLÅTT_SAMMEN_MED_ANNET', 'BRUK_MED_OVERSTYRT_PERIODE', 'INNTEKT_IKKE_MED_I_BG'],
            type: 'string'
        },
        id: {
            pattern: '^[\\p{Alnum}\\-\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        inntektsmeldinger: {
            items: {
                '$ref': '#/components/schemas/MottattInntektsmeldingDto'
            },
            type: 'array',
            uniqueItems: true
        },
        kilde: {
            items: {
                enum: ['AA-Registeret', 'A-Inntekt', 'Inntektsmelding', 'Saksbehandler'],
                type: 'string'
            },
            type: 'array',
            uniqueItems: true
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/PeriodeDto'
            },
            type: 'array',
            uniqueItems: true
        },
        permisjoner: {
            items: {
                '$ref': '#/components/schemas/PermisjonDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        stillingsprosent: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 500,
            minimum: 0,
            type: 'number'
        },
        yrkestittel: {
            maxLength: 400,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'handlingType', 'kilde'],
    type: 'object'
} as const;

export const $InntektArbeidYtelseGrunnlagDto = {
    properties: {
        arbeidDto: {
            '$ref': '#/components/schemas/ArbeidDto'
        },
        arbeidsforholdInformasjon: {
            '$ref': '#/components/schemas/ArbeidsforholdInformasjonDto'
        },
        inntekterDto: {
            '$ref': '#/components/schemas/InntekterDto'
        },
        inntektsmeldinger: {
            '$ref': '#/components/schemas/InntektsmeldingerDto'
        },
        oppgittOpptjening: {
            '$ref': '#/components/schemas/OppgittOpptjeningDto'
        },
        ytelserDto: {
            '$ref': '#/components/schemas/YtelserDto'
        }
    },
    type: 'object'
} as const;

export const $InntektDto = {
    properties: {
        belop: {
            format: 'int32',
            maximum: 10000000,
            minimum: 0,
            type: 'integer'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        inntektspostType: {
            enum: ['-', 'LØNN', 'YTELSE', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'NÆRING_FISKE_FANGST_FAMBARNEHAGE'],
            type: 'string'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}\\p{M}]+$',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        },
        utbetaler: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}\\p{M}]+$',
            type: 'string'
        },
        ytelse: {
            type: 'boolean'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $InntekterDto = {
    properties: {
        inntekt: {
            items: {
                '$ref': '#/components/schemas/InntektDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['inntekt'],
    type: 'object'
} as const;

export const $InntektsforholdDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        arbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'bruttoInntektPrÅr': {
            format: 'int32',
            maximum: 178956970,
            minimum: 0,
            type: 'integer'
        },
        eksternArbeidsforholdId: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'inntektFraInntektsmeldingPrÅr': {
            format: 'int32',
            maximum: 178956970,
            minimum: 0,
            type: 'integer'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        skalRedusereUtbetaling: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'periode'],
    type: 'object'
} as const;

export const $InntektsgrunnlagDto = {
    properties: {
        'måneder': {
            items: {
                '$ref': '#/components/schemas/InntektsgrunnlagMånedDto'
            },
            maxItems: 12,
            minItems: 0,
            type: 'array'
        },
        pgiGrunnlag: {
            items: {
                '$ref': '#/components/schemas/PGIPrÅrDto'
            },
            maxItems: 12,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['måneder', 'pgiGrunnlag'],
    type: 'object'
} as const;

export const $InntektsgrunnlagInntektDto = {
    properties: {
        'beløp': {
            type: 'number'
        },
        inntektAktivitetType: {
            enum: ['ARBEIDSTAKERINNTEKT', 'FRILANSINNTEKT', 'YTELSEINNTEKT', '-'],
            type: 'string'
        }
    },
    required: ['inntektAktivitetType'],
    type: 'object'
} as const;

export const $InntektsgrunnlagMånedDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        inntekter: {
            items: {
                '$ref': '#/components/schemas/InntektsgrunnlagInntektDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $Inntektsmelding = {
    properties: {
        arbeidsforholdId: {
            format: 'uuid',
            type: 'string',
            writeOnly: true
        },
        arbeidsforholdRef: {
            format: 'uuid',
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        },
        eksternArbeidsforholdRef: {
            type: 'string'
        },
        endringerRefusjon: {
            items: {
                '$ref': '#/components/schemas/Refusjon'
            },
            type: 'array'
        },
        'erNærRelasjon': {
            type: 'boolean'
        },
        fagsakYtelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        },
        graderinger: {
            items: {
                '$ref': '#/components/schemas/Gradering'
            },
            type: 'array'
        },
        indexKey: {
            type: 'string'
        },
        innsendingstidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        'inntektBeløp': {
            '$ref': '#/components/schemas/Beløp'
        },
        'inntektsmeldingInnsendingsårsak': {
            enum: ['NY', 'ENDRING', '-'],
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        kanalreferanse: {
            type: 'string'
        },
        kildesystem: {
            type: 'string'
        },
        mottattDato: {
            format: 'date',
            type: 'string'
        },
        naturalYtelser: {
            items: {
                '$ref': '#/components/schemas/NaturalYtelse'
            },
            type: 'array'
        },
        'nærRelasjon': {
            type: 'boolean',
            writeOnly: true
        },
        'omsorgspengerFravær': {
            items: {
                '$ref': '#/components/schemas/PeriodeAndel'
            },
            type: 'array',
            writeOnly: true
        },
        'oppgittFravær': {
            items: {
                '$ref': '#/components/schemas/PeriodeAndel'
            },
            type: 'array'
        },
        'refusjonBeløpPerMnd': {
            '$ref': '#/components/schemas/Beløp'
        },
        'refusjonOpphører': {
            format: 'date',
            type: 'string'
        },
        startDatoPermisjon: {
            format: 'date',
            type: 'string'
        },
        utsettelsePerioder: {
            items: {
                '$ref': '#/components/schemas/UtsettelsePeriode'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $InntektsmeldingDto = {
    properties: {
        arbeidsforholdRef: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        endringerRefusjon: {
            items: {
                '$ref': '#/components/schemas/RefusjonDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'inntektBeløp': {
            type: 'number'
        },
        journalpostId: {
            type: 'string'
        },
        naturalYtelser: {
            items: {
                '$ref': '#/components/schemas/NaturalYtelseDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'refusjonBeløpPerMnd': {
            type: 'number'
        },
        'refusjonOpphører': {
            format: 'date',
            type: 'string'
        },
        startDatoPermisjon: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'inntektBeløp'],
    type: 'object'
} as const;

export const $InntektsmeldingVurdering = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/ArbeidsgiverArbeidsforholdIdV2'
        },
        eksternReferanse: {
            pattern: '^[\\p{Graph}\\s\\t\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        erstattetAv: {
            items: {
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'førsteFraværsdag': {
            format: 'date',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        mottatt: {
            format: 'date-time',
            type: 'string'
        },
        vurdering: {
            enum: ['I_BRUK', 'ERSTATTET_AV_NYERE', 'IKKE_RELEVANT', 'MANGLER_DATO'],
            type: 'string'
        }
    },
    required: ['arbeidsgiver', 'eksternReferanse', 'erstattetAv', 'journalpostId', 'mottatt', 'vurdering'],
    type: 'object'
} as const;

export const $InntektsmeldingerDto = {
    properties: {
        inntektsmeldinger: {
            items: {
                '$ref': '#/components/schemas/InntektsmeldingDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $InntrekkBeslutning = {
    properties: {
        brukInntrekk: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $InstitusjonPeriodeDto = {
    properties: {
        institusjon: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        journalpostId: {
            '$ref': '#/components/schemas/JournalpostIdDto'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['institusjon', 'journalpostId', 'periode'],
    type: 'object'
} as const;

export const $InstitusjonVurderingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        journalpostId: {
            '$ref': '#/components/schemas/JournalpostIdDto'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        resultat: {
            enum: ['MÅ_VURDERES', 'GODKJENT_MANUELT', 'GODKJENT_AUTOMATISK', 'IKKE_GODKJENT_MANUELT', 'IKKE_GODKJENT_AUTOMATISK'],
            type: 'string'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'journalpostId', 'perioder', 'resultat', 'vurdertAv', 'vurdertTidspunkt'],
    type: 'object'
} as const;

export const $InstitusjonerDto = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/InstitusjonPeriodeDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/InstitusjonVurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder', 'vurderinger'],
    type: 'object'
} as const;

export const $InternArbeidsforholdRefDto = {
    properties: {
        abakusReferanse: {
            pattern: '^[\\p{L}\\p{N}_\\.\\-]+$',
            type: 'string'
        }
    },
    required: ['abakusReferanse'],
    type: 'object'
} as const;

export const $JournalpostIdDto = {
    properties: {
        journalpostId: {
            type: 'string'
        }
    },
    required: ['journalpostId'],
    type: 'object'
} as const;

export const $JournalpostIderDto = {
    properties: {
        journalpostIder: {
            items: {
                '$ref': '#/components/schemas/JournalpostIdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        journalpostIderBarn: {
            items: {
                '$ref': '#/components/schemas/JournalpostIdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $K9FormidlingKodeverkWeb = {
    properties: {
        avsenderApplikasjon: {
            enum: ['K9SAK', 'OMSORGSPENGER_RAMMEMELDINGER', 'K9KLAGE', 'K9PUNSJ', 'K9FORDEL'],
            type: 'string'
        }
    },
    required: ['avsenderApplikasjon'],
    type: 'object'
} as const;

export const $K9SakKodeverkArbeidsforhold = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'IKKE_YRKESAKTIV', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        arbeidType: {
            enum: ['ETTERLØNN_SLUTTPAKKE', 'FORENKLET_OPPGJØRSORDNING', 'FRILANSER', 'FRILANSER_OPPDRAGSTAKER', 'LØNN_UNDER_UTDANNING', 'MARITIMT_ARBEIDSFORHOLD', 'MILITÆR_ELLER_SIVILTJENESTE', 'ORDINÆRT_ARBEIDSFORHOLD', 'PENSJON_OG_ANDRE_TYPER_YTELSER_UTEN_ANSETTELSESFORHOLD', 'NÆRING', 'UTENLANDSK_ARBEIDSFORHOLD', 'VENTELØNN_VARTPENGER', 'VANLIG', '-'],
            type: 'string'
        },
        arbeidskategori: {
            enum: ['FISKER', 'ARBEIDSTAKER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'KOMBINASJON_ARBEIDSTAKER_OG_SELVSTENDIG_NÆRINGSDRIVENDE', 'SJØMANN', 'JORDBRUKER', 'DAGPENGER', 'INAKTIV', 'KOMBINASJON_ARBEIDSTAKER_OG_JORDBRUKER', 'KOMBINASJON_ARBEIDSTAKER_OG_FISKER', 'FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_DAGPENGER', 'DAGMAMMA', 'UGYLDIG', '-'],
            type: 'string'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        relatertYtelseTilstand: {
            enum: ['ÅPEN', 'LØPENDE', 'AVSLUTTET', 'IKKESTARTET'],
            type: 'string'
        }
    },
    required: ['aktivitetStatus', 'arbeidType', 'arbeidskategori', 'inntektskategori', 'relatertYtelseTilstand'],
    type: 'object'
} as const;

export const $K9SakKodeverkBehandling = {
    properties: {
        aksjonspunkt: {
            '$ref': '#/components/schemas/K9SakKodeverkBehandlingAksjonspunkt'
        },
        behandlingResultatType: {
            enum: ['IKKE_FASTSATT', 'INNVILGET', 'DELVIS_INNVILGET', 'AVSLÅTT', 'OPPHØR', 'HENLAGT_SØKNAD_TRUKKET', 'HENLAGT_FEILOPPRETTET', 'HENLAGT_BRUKER_DØD', 'MERGET_OG_HENLAGT', 'HENLAGT_SØKNAD_MANGLER', 'HENLAGT_MASKINELT', 'INNVILGET_ENDRING', 'INGEN_ENDRING', 'MANGLER_BEREGNINGSREGLER'],
            type: 'string'
        },
        behandlingType: {
            enum: ['BT-002', 'BT-004', 'BT-010', '-'],
            type: 'string'
        },
        'behandlingÅrsakType': {
            enum: ['RE-MF', 'RE-MFIP', 'RE-AVAB', 'RE-LOV', 'RE-RGLF', 'RE-FEFAKTA', 'RE-PRSSL', 'RE-END-FRA-BRUKER', 'RE-FRAVÆRKORR-SAKSB', 'RE-END-INNTEKTSMELD', 'BERØRT-BEHANDLING', 'RE-ANNET', 'RE-SATS-REGULERING', 'RE-ENDRET-FORDELING', 'INFOBREV_BEHANDLING', 'INFOBREV_OPPHOLD', 'RE-KLAG-U-INNTK', 'RE-KLAG-M-INNTK', 'RE-MDL', 'RE-OPTJ', 'RE-FRDLING', 'RE-INNTK', 'RE-DØD', 'RE-SRTB', 'RE-FRIST', 'RE-BER-GRUN', 'RE-KLAG-INNH-PGI', 'ETTER_KLAGE', 'RE-HENDELSE-FØDSEL', 'RE-HENDELSE-DØD-F', 'RE-HENDELSE-DØD-B', 'RE-HENDELSE-DØDFØD', 'RE-REGISTEROPPL', 'RE-YTELSE', 'RE-TILST-YT-INNVIL', 'RE-ENDR-BER-GRUN', 'RE-TILST-YT-OPPH', 'RE_REBEREGN_FP', 'RE_ANNEN_SAK', 'RE_UTSATT_BEHANDLING', 'RE_GJENOPPTAR_UTSATT_BEHANDLING', 'RE_ANNEN_SAK_ET', 'RE_ANNEN_SAK_NB', 'RE_ANNEN_SAK_S', 'RE_ANNEN_SAK_NB_ET', 'RE_ANNEN_SAK_S_ET', 'RE_ANNEN_SAK_S_NB', 'RE_ANNEN_SAK_S_ET_NB', 'RE_ANNEN_SAK_FP', 'UNNT_GENERELL', 'REVURDERER_BERØRT_PERIODE', '-'],
            type: 'string'
        },
        'revurderingVarslingÅrsak': {
            enum: ['BARNIKKEREG', 'JOBBFULLTID', 'IKKEOPPTJENT', 'UTVANDRET', 'JOBBUTLAND', 'IKKEOPPHOLD', 'JOBB6MND', 'AKTIVITET', 'ANNET'],
            type: 'string'
        }
    },
    required: ['aksjonspunkt', 'behandlingResultatType', 'behandlingType', 'behandlingÅrsakType', 'revurderingVarslingÅrsak'],
    type: 'object'
} as const;

export const $K9SakKodeverkBehandlingAksjonspunkt = {
    properties: {
        'venteårsak': {
            enum: ['-', 'ANKE_OVERSENDT_TIL_TRYGDERETTEN', 'ANKE_VENTER_PAA_MERKNADER_FRA_BRUKER', 'AVV_DOK', 'AVV_IM_MOT_AAREG', 'AVV_IM_MOT_SØKNAD_AT', 'AVV_SØKNADSPERIODER', 'AVV_FODSEL', 'AVV_RESPONS_REVURDERING', 'FOR_TIDLIG_SOKNAD', 'GRADERING_FLERE_ARBEIDSFORHOLD', 'REFUSJON_3_MÅNEDER', 'SCANN', 'UTV_FRIST', 'VENT_FEIL_ENDRINGSSØKNAD', 'VENT_GRADERING_UTEN_BEREGNINGSGRUNNLAG', 'VENT_INFOTRYGD', 'VENT_INNTEKT_RAPPORTERINGSFRIST', 'VENT_MILITÆR_OG_BG_UNDER_3G', 'VENT_OPDT_INNTEKTSMELDING', 'VENT_OPPTJENING_OPPLYSNINGER', 'VENT_PÅ_NY_INNTEKTSMELDING_MED_GYLDIG_ARB_ID', 'VENT_REGISTERINNHENTING', 'VENT_PÅ_SISTE_AAP_MELDEKORT', 'VENT_SØKNAD_SENDT_INFORMASJONSBREV', 'VENT_TIDLIGERE_BEHANDLING', 'VENT_ÅPEN_BEHANDLING', 'VENT_MANGL_FUNKSJ_SAKSBEHANDLER', 'VENTER_SVAR_PORTEN', 'VENTER_SVAR_TEAMS', 'ANDRE_INNTEKTSOPPLYSNINGER', 'INNTEKTSMELDING', 'LEGEERKLÆRING', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'VENTER_ETTERLYS_IM', 'VENTER_ETTERLYS_IM_VARSEL', 'OPPD_ÅPEN_BEH', 'VENT_DEKGRAD_REGEL', 'VENT_ØKONOMI', 'VENT_TILBAKEKREVING', 'VENTELØNN_ELLER_MILITÆR_MED_FLERE_AKTIVITETER', 'VENT_BEREGNING_TILBAKE_I_TID', 'BRUKER_70ÅR_VED_REFUSJON', 'VENT_LOVENDRING_8_41', 'INGEN_PERIODE_UTEN_YTELSE', 'PERIODE_MED_AVSLAG', 'MANGLENDE_FUNKSJONALITET', 'KORTVARIG_ARBEID', 'FRISINN_ATFL_SAMME_ORG', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT', 'FRISINN_VARIANT_NY_FL', 'FRISINN_VARIANT_NY_SN_2019', 'FRISINN_VARIANT_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT', 'FRISINN_VARIANT_KOMBINERT_NY_FL', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2020', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_ENDRET_INNTEKTSTYPE', 'AVV_SOKN_IT_PERIODER', 'AVV_SOKN_NAERING', 'AVV_SOKN_FRILANS', 'DELVIS_TILRETTELEGGING_OG_REFUSJON_SVP', 'AAP_DP_SISTE_10_MND_SVP', 'FL_SN_IKKE_STOTTET_FOR_SVP'],
            type: 'string'
        }
    },
    required: ['venteårsak'],
    type: 'object'
} as const;

export const $K9SakKodeverkHistorikk = {
    properties: {
        historikkBegrunnelseType: {
            enum: ['-', 'SAKSBEH_START_PA_NYTT', 'BEH_STARTET_PA_NYTT', 'BERORT_BEH_ENDRING_DEKNINGSGRAD', 'BERORT_BEH_OPPHOR'],
            type: 'string'
        }
    },
    required: ['historikkBegrunnelseType'],
    type: 'object'
} as const;

export const $K9SakKodeverkMedlem = {
    properties: {
        medlemskapManuellVurderingType: {
            enum: ['-', 'MEDLEM', 'UNNTAK', 'IKKE_RELEVANT', 'OPPHOR_PGA_ENDRING_I_TPS'],
            type: 'string'
        }
    },
    required: ['medlemskapManuellVurderingType'],
    type: 'object'
} as const;

export const $K9SakKodeverkOpptjening = {
    properties: {
        opptjeningAktivitetType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'FRISINN', 'UTDANNINGSPERMISJON', 'MELLOM_ARBEID', '-'],
            type: 'string'
        }
    },
    required: ['opptjeningAktivitetType'],
    type: 'object'
} as const;

export const $K9SakKodeverkPerson = {
    properties: {
        personstatusType: {
            enum: ['ABNR', 'ADNR', 'BOSA', 'DØD', 'DØDD', 'FOSV', 'FØDR', 'UFUL', 'UREG', 'UTAN', 'UTPE', 'UTVA', '-'],
            type: 'string'
        },
        sivilstandType: {
            enum: ['ENKE', 'GIFT', 'GJPA', 'GLAD', 'NULL', 'REPA', 'SAMB', 'SEPA', 'SEPR', 'SKIL', 'SKPA', 'UGIF'],
            type: 'string'
        }
    },
    required: ['personstatusType', 'sivilstandType'],
    type: 'object'
} as const;

export const $K9SakKodeverkWeb = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/K9SakKodeverkArbeidsforhold'
        },
        behandling: {
            '$ref': '#/components/schemas/K9SakKodeverkBehandling'
        },
        fagsystem: {
            enum: ['K9SAK', 'FPSAK', 'TPS', 'VLSP', 'JOARK', 'INFOTRYGD', 'ARENA', 'INNTEKT', 'MEDL', 'GOSYS', 'ENHETSREGISTERET', 'AAREGISTERET', '-'],
            type: 'string'
        },
        historikk: {
            '$ref': '#/components/schemas/K9SakKodeverkHistorikk'
        },
        iaygrunnlag: {
            '$ref': '#/components/schemas/AbakusKodeverkIaygrunnlag'
        },
        medlem: {
            '$ref': '#/components/schemas/K9SakKodeverkMedlem'
        },
        opptjening: {
            '$ref': '#/components/schemas/K9SakKodeverkOpptjening'
        },
        person: {
            '$ref': '#/components/schemas/K9SakKodeverkPerson'
        }
    },
    required: ['arbeidsforhold', 'behandling', 'fagsystem', 'historikk', 'iaygrunnlag', 'medlem', 'opptjening', 'person'],
    type: 'object'
} as const;

export const $KalkulatorInputDto = {
    properties: {
        iayGrunnlag: {
            '$ref': '#/components/schemas/InntektArbeidYtelseGrunnlagDto'
        },
        opptjeningAktiviteter: {
            '$ref': '#/components/schemas/OpptjeningAktiviteterDto'
        },
        refusjonskravDatoer: {
            items: {
                '$ref': '#/components/schemas/RefusjonskravDatoDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        refusjonskravPrArbeidsgiver: {
            items: {
                '$ref': '#/components/schemas/KravperioderPrArbeidsforhold'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        },
        ytelsespesifiktGrunnlag: {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        }
    },
    required: ['iayGrunnlag', 'opptjeningAktiviteter', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $KalkulatorInputPrVilkårperiodeDto = {
    properties: {
        kalkulatorInput: {
            '$ref': '#/components/schemas/KalkulatorInputDto'
        },
        'vilkårPeriode': {
            '$ref': '#/components/schemas/DatoIntervallEntitet'
        }
    },
    required: ['kalkulatorInput', 'vilkårPeriode'],
    type: 'object'
} as const;

export const $KompletthetsTilstandPåPeriodeDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        periode: {
            type: 'string'
        },
        status: {
            items: {
                '$ref': '#/components/schemas/ArbeidsgiverArbeidsforholdStatus'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        tilVurdering: {
            type: 'boolean'
        },
        vurdering: {
            enum: ['UDEFINERT', 'KAN_FORTSETTE', 'MANGLENDE_GRUNNLAG', 'UAVKLART'],
            type: 'string'
        }
    },
    required: ['periode', 'status', 'tilVurdering'],
    type: 'object'
} as const;

export const $KompletthetsTilstandPåPeriodeV2Dto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        periode: {
            type: 'string'
        },
        status: {
            items: {
                '$ref': '#/components/schemas/ArbeidsgiverArbeidsforholdStatusV2'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        tilVurdering: {
            type: 'boolean'
        },
        vurdering: {
            enum: ['UDEFINERT', 'KAN_FORTSETTE', 'MANGLENDE_GRUNNLAG', 'UAVKLART'],
            type: 'string'
        }
    },
    required: ['periode', 'status', 'tilVurdering'],
    type: 'object'
} as const;

export const $KompletthetsVurderingDto = {
    properties: {
        tilstand: {
            items: {
                '$ref': '#/components/schemas/KompletthetsTilstandPåPeriodeDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['tilstand'],
    type: 'object'
} as const;

export const $KompletthetsVurderingV2Dto = {
    properties: {
        tilstand: {
            items: {
                '$ref': '#/components/schemas/KompletthetsTilstandPåPeriodeV2Dto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['tilstand'],
    type: 'object'
} as const;

export const $KoronaOverføringFår = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                avsender: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $KoronaOverføringGir = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                mottaker: {
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $KortvarigeArbeidsforholdDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        andelIArbeid: {
            items: {
                maximum: 100,
                minimum: 0,
                type: 'number'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        andelsnr: {
            format: 'int64',
            maximum: 1000,
            minimum: 0,
            type: 'integer'
        },
        arbeidsforhold: {
            '$ref': '#/components/schemas/BeregningsgrunnlagArbeidsforholdDto'
        },
        erTidsbegrensetArbeidsforhold: {
            type: 'boolean'
        },
        fastsattAvSaksbehandler: {
            type: 'boolean'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        kilde: {
            enum: ['SAKSBEHANDLER_KOFAKBER', 'PROSESS_BESTEBEREGNING', 'SAKSBEHANDLER_FORDELING', 'PROSESS_PERIODISERING', 'PROSESS_OMFORDELING', 'PROSESS_START', 'PROSESS_PERIODISERING_TILKOMMET_INNTEKT'],
            type: 'string'
        },
        lagtTilAvSaksbehandler: {
            type: 'boolean'
        }
    },
    required: ['aktivitetStatus', 'andelIArbeid', 'andelsnr', 'inntektskategori', 'kilde'],
    type: 'object'
} as const;

export const $KravDokumentMedSøktePerioder = {
    properties: {
        innsendingsTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        kildesystem: {
            maxLength: 100,
            minLength: 0,
            pattern: '^\\p{L}+$',
            type: 'string'
        },
        'søktePerioder': {
            items: {
                '$ref': '#/components/schemas/SøktPeriode'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        type: {
            enum: ['INNTEKTSMELDING', 'SØKNAD'],
            type: 'string'
        }
    },
    required: ['innsendingsTidspunkt', 'type'],
    type: 'object'
} as const;

export const $KravDokumentStatus = {
    properties: {
        avklarteOpplysninger: {
            '$ref': '#/components/schemas/AvklarteOpplysninger'
        },
        innsendingstidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        overstyrteOpplysninger: {
            '$ref': '#/components/schemas/AvklarteOpplysninger'
        },
        status: {
            items: {
                '$ref': '#/components/schemas/SøknadsfristPeriodeDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        type: {
            enum: ['INNTEKTSMELDING', 'SØKNAD'],
            type: 'string'
        }
    },
    required: ['journalpostId'],
    type: 'object'
} as const;

export const $KravperioderPrArbeidsforhold = {
    properties: {
        'alleSøktePerioder': {
            items: {
                '$ref': '#/components/schemas/PerioderForKrav'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        internreferanse: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        'sisteSøktePerioder': {
            '$ref': '#/components/schemas/PerioderForKrav'
        }
    },
    required: ['alleSøktePerioder', 'arbeidsgiver', 'sisteSøktePerioder'],
    type: 'object'
} as const;

export const $KunYtelseDto = {
    properties: {
        andeler: {
            items: {
                '$ref': '#/components/schemas/AndelMedBeløpDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        erBesteberegning: {
            type: 'boolean'
        },
        fodendeKvinneMedDP: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $KvoteInfo = {
    properties: {
        maxDato: {
            format: 'date',
            type: 'string'
        },
        totaltForbruktKvote: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $Landkoder = {
    properties: {
        kode: {
            type: 'string'
        },
        kodeverk: {
            readOnly: true,
            type: 'string'
        },
        navn: {
            readOnly: true,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $LocalDateInterval = {
    properties: {
        closedInterval: {
            type: 'boolean'
        },
        fomDato: {
            format: 'date',
            type: 'string'
        },
        openEnd: {
            type: 'boolean'
        },
        openStart: {
            type: 'boolean'
        },
        tomDato: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $LocalDateTimelineVilkårUtfallSamlet = {
    properties: {
        continuous: {
            type: 'boolean'
        },
        datoIntervaller: {
            items: {
                '$ref': '#/components/schemas/LocalDateInterval'
            },
            type: 'array'
        },
        empty: {
            type: 'boolean'
        },
        localDateIntervals: {
            items: {
                '$ref': '#/components/schemas/LocalDateInterval'
            },
            type: 'array'
        },
        maxLocalDate: {
            format: 'date',
            type: 'string'
        },
        minLocalDate: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $LosOpplysningerSomManglerIKlageDto = {
    properties: {
        'pleietrengendeAktørId': {
            type: 'string'
        },
        utenlandstilsnitt: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $LønnsendringSaksopplysningDto = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/ArbeidsforholdDto'
        },
        'lønnsendringscenario': {
            enum: ['MANUELT_BEHANDLET', 'DELVIS_MÅNEDSINNTEKT_SISTE_MND', 'FULL_MÅNEDSINNTEKT_EN_MND', 'FULL_MÅNEDSINNTEKT_TO_MND'],
            type: 'string'
        },
        'sisteLønnsendringsdato': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['arbeidsforhold', 'lønnsendringscenario', 'sisteLønnsendringsdato'],
    type: 'object'
} as const;

export const $ManglendeArbeidstidDto = {
    properties: {
        mangler: {
            items: {
                '$ref': '#/components/schemas/ArbeidsgiverMedPerioderSomManglerDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $ManglendeVedleggDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/ArbeidsgiverDto'
        },
        brukerHarSagtAtIkkeKommer: {
            type: 'boolean'
        },
        dokumentType: {
            enum: ['INNTEKTSMELDING', 'LEGEERKLÆRING', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['dokumentType'],
    type: 'object'
} as const;

export const $MatchFagsak = {
    properties: {
        bruker: {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        pleietrengendeIdenter: {
            items: {
                maxLength: 20,
                minLength: 0,
                type: 'string'
            },
            maxItems: 20,
            minItems: 0,
            type: 'array'
        },
        relatertPersonIdenter: {
            items: {
                maxLength: 20,
                minLength: 0,
                type: 'string'
            },
            maxItems: 20,
            minItems: 0,
            type: 'array'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['ytelseType'],
    type: 'object'
} as const;

export const $MedlemPeriodeDto = {
    properties: {
        aksjonspunkter: {
            items: {
                maxLength: 10,
                minLength: 0,
                type: 'string'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{N}\\p{M}]+$',
            type: 'string'
        },
        bosattVurdering: {
            type: 'boolean'
        },
        erEosBorger: {
            type: 'boolean'
        },
        lovligOppholdVurdering: {
            type: 'boolean'
        },
        medlemskapManuellVurderingType: {
            enum: ['-', 'MEDLEM', 'UNNTAK', 'IKKE_RELEVANT', 'OPPHOR_PGA_ENDRING_I_TPS'],
            type: 'string'
        },
        oppholdsrettVurdering: {
            type: 'boolean'
        },
        personopplysninger: {
            '$ref': '#/components/schemas/PersonopplysningDto'
        },
        vurderingsdato: {
            format: 'date',
            type: 'string'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        'årsaker': {
            items: {
                enum: ['SKJÆRINGSTIDSPUNKT', 'STATSBORGERSKAP', 'ADRESSE', 'PERSONSTATUS', 'MEDL_PERIODE', 'BORTFALL_INNTEKT', 'ENDRING_I_REGISTERDATA'],
                maxLength: 10,
                minLength: 0,
                type: 'string'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        }
    },
    required: ['personopplysninger'],
    type: 'object'
} as const;

export const $MedlemV2Dto = {
    properties: {
        medlemskapPerioder: {
            items: {
                '$ref': '#/components/schemas/MedlemskapPerioderDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/MedlemPeriodeDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        }
    },
    type: 'object'
} as const;

export const $MedlemskapPerioderDto = {
    properties: {
        beslutningsdato: {
            format: 'date',
            type: 'string'
        },
        dekningType: {
            enum: ['FTL_2_6', 'FTL_2_7_a', 'FTL_2_7_b', 'FTL_2_9_1_a', 'FTL_2_9_1_b', 'FTL_2_9_1_c', 'FTL_2_9_2_a', 'FTL_2_9_2_c', 'FULL', 'IHT_AVTALE', 'OPPHOR', 'UNNTATT', 'UDEFINERT'],
            type: 'string'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        kildeType: {
            enum: ['E500', 'INFOTR', 'AVGSYS', 'APPBRK', 'PP01', 'FS22', 'SRVGOSYS', 'SRVMELOSYS', 'MEDL', 'TPS', 'TP', 'LAANEKASSEN', 'ANNEN', 'UDEFINERT'],
            type: 'string'
        },
        medlemskapType: {
            enum: ['ENDELIG', 'FORELOPIG', 'UNDER_AVKLARING', 'UDEFINERT'],
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['dekningType', 'fom', 'kildeType', 'medlemskapType', 'tom'],
    type: 'object'
} as const;

export const $MerknadEndretDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        fritekst: {
            maxLength: 500,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        merknadKoder: {
            items: {
                maxLength: 10,
                minLength: 0,
                type: 'string'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        },
        saksbehandlerIdent: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $MidlertidigAleneOmOmsorgen = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $MigrerFraInfotrygdDto = {
    properties: {
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['saksnummer', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $MigrertSkjæringstidspunktDto = {
    properties: {
        erAktiv: {
            type: 'boolean'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['erAktiv', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $MottakerDto = {
    properties: {
        id: {
            maxLength: 20,
            minLength: 0,
            pattern: '^\\d+$',
            type: 'string'
        },
        type: {
            pattern: '^[\\p{L}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['id', 'type'],
    type: 'object'
} as const;

export const $MottattInntektsmeldingDto = {
    properties: {
        begrunnelse: {
            maxLength: 400,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        journalpostId: {
            type: 'string'
        },
        mottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        status: {
            enum: ['MOTTATT', 'BEHANDLER', 'GYLDIG', 'HENLAGT', 'UGYLDIG'],
            type: 'string'
        }
    },
    required: ['journalpostId', 'mottattTidspunkt', 'status'],
    type: 'object'
} as const;

export const $NattevåkDto = {
    properties: {
        beskrivelser: {
            items: {
                '$ref': '#/components/schemas/BeskrivelseDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/VurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $NaturalYtelse = {
    properties: {
        beloepPerMnd: {
            '$ref': '#/components/schemas/Beløp'
        },
        indexKey: {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/DatoIntervallEntitet'
        },
        type: {
            enum: ['ELEKTRISK_KOMMUNIKASJON', 'AKSJER_UNDERKURS', 'LOSJI', 'KOST_DOEGN', 'BESOEKSREISER_HJEM', 'KOSTBESPARELSE_HJEM', 'RENTEFORDEL_LAAN', 'BIL', 'KOST_DAGER', 'BOLIG', 'FORSIKRINGER', 'FRI_TRANSPORT', 'OPSJONER', 'TILSKUDD_BARNEHAGE', 'ANNET', 'BEDRIFTSBARNEHAGE', 'YRKESBIL_KILOMETER', 'YRKESBIL_LISTEPRIS', 'UTENLANDSK_PENSJONSORDNING', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $NaturalYtelseDto = {
    properties: {
        'beløp': {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        type: {
            enum: ['ELEKTRISK_KOMMUNIKASJON', 'AKSJER_UNDERKURS', 'LOSJI', 'KOST_DOEGN', 'BESOEKSREISER_HJEM', 'KOSTBESPARELSE_HJEM', 'RENTEFORDEL_LAAN', 'BIL', 'KOST_DAGER', 'BOLIG', 'FORSIKRINGER', 'FRI_TRANSPORT', 'OPSJONER', 'TILSKUDD_BARNEHAGE', 'ANNET', 'BEDRIFTSBARNEHAGE', 'YRKESBIL_KILOMETER', 'YRKESBIL_LISTEPRIS', 'UTENLANDSK_PENSJONSORDNING', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $NyBehandlingDto = {
    properties: {
        behandlingArsakType: {
            enum: ['RE-MF', 'RE-MFIP', 'RE-AVAB', 'RE-LOV', 'RE-RGLF', 'RE-FEFAKTA', 'RE-PRSSL', 'RE-END-FRA-BRUKER', 'RE-FRAVÆRKORR-SAKSB', 'RE-END-INNTEKTSMELD', 'BERØRT-BEHANDLING', 'RE-ANNET', 'RE-SATS-REGULERING', 'RE-ENDRET-FORDELING', 'INFOBREV_BEHANDLING', 'INFOBREV_OPPHOLD', 'RE-KLAG-U-INNTK', 'RE-KLAG-M-INNTK', 'RE-MDL', 'RE-OPTJ', 'RE-FRDLING', 'RE-INNTK', 'RE-DØD', 'RE-SRTB', 'RE-FRIST', 'RE-BER-GRUN', 'RE-KLAG-INNH-PGI', 'ETTER_KLAGE', 'RE-HENDELSE-FØDSEL', 'RE-HENDELSE-DØD-F', 'RE-HENDELSE-DØD-B', 'RE-HENDELSE-DØDFØD', 'RE-REGISTEROPPL', 'RE-YTELSE', 'RE-TILST-YT-INNVIL', 'RE-ENDR-BER-GRUN', 'RE-TILST-YT-OPPH', 'RE_REBEREGN_FP', 'RE_ANNEN_SAK', 'RE_UTSATT_BEHANDLING', 'RE_GJENOPPTAR_UTSATT_BEHANDLING', 'RE_ANNEN_SAK_ET', 'RE_ANNEN_SAK_NB', 'RE_ANNEN_SAK_S', 'RE_ANNEN_SAK_NB_ET', 'RE_ANNEN_SAK_S_ET', 'RE_ANNEN_SAK_S_NB', 'RE_ANNEN_SAK_S_ET_NB', 'RE_ANNEN_SAK_FP', 'UNNT_GENERELL', 'REVURDERER_BERØRT_PERIODE', '-'],
            type: 'string'
        },
        behandlingType: {
            enum: ['BT-002', 'BT-004', 'BT-010', '-'],
            type: 'string'
        },
        nyBehandlingEtterKlage: {
            type: 'boolean'
        },
        saksnummer: {
            type: 'string'
        }
    },
    required: ['behandlingArsakType', 'behandlingType', 'saksnummer'],
    type: 'object'
} as const;

export const $NyPeriodeDto = {
    properties: {
        erGradering: {
            type: 'boolean'
        },
        erRefusjon: {
            type: 'boolean'
        },
        'erSøktYtelse': {
            type: 'boolean'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $NødvendigOpplæringDto = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/NødvendighetPeriodeDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/NødvendighetVurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder', 'vurderinger'],
    type: 'object'
} as const;

export const $NødvendighetPeriodeDto = {
    properties: {
        journalpostId: {
            '$ref': '#/components/schemas/JournalpostIdDto'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['journalpostId', 'periode'],
    type: 'object'
} as const;

export const $NødvendighetVurderingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        journalpostId: {
            '$ref': '#/components/schemas/JournalpostIdDto'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        resultat: {
            enum: ['MÅ_VURDERES', 'GODKJENT', 'IKKE_GODKJENT'],
            type: 'string'
        },
        tilknyttedeDokumenter: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'journalpostId', 'perioder', 'resultat', 'tilknyttedeDokumenter', 'vurdertAv', 'vurdertTidspunkt'],
    type: 'object'
} as const;

export const $Nøkkeltall = {
    properties: {
        antallDagerArbeidsgiverDekker: {
            type: 'number'
        },
        'antallDagerFraværRapporterSomNyoppstaret': {
            type: 'number'
        },
        'antallDagerFraværRapportertSomNyoppstartet': {
            type: 'number'
        },
        antallDagerInfotrygd: {
            type: 'number'
        },
        antallForbrukteDager: {
            type: 'number'
        },
        antallKoronadager: {
            type: 'number'
        },
        forbruktTid: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        migrertData: {
            type: 'boolean'
        },
        restTid: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        smittevernTid: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        totaltAntallDager: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $OmsorgenForDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        readOnly: {
            type: 'boolean'
        },
        relasjon: {
            enum: ['MOR', 'MEDMOR', 'FAR', 'FOSTERFORELDER', 'ANNET'],
            type: 'string'
        },
        relasjonsbeskrivelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        },
        resultatEtterAutomatikk: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $OmsorgenForOversiktDto = {
    properties: {
        'kanLøseAksjonspunkt': {
            type: 'boolean'
        },
        omsorgsperioder: {
            items: {
                '$ref': '#/components/schemas/OmsorgenForDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        registrertForeldrerelasjon: {
            type: 'boolean'
        },
        registrertSammeBosted: {
            type: 'boolean'
        },
        sammeBosted: {
            type: 'boolean'
        },
        tvingManuellVurdering: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $OmsorgspengeGrunnlagDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                skalAvviksvurdere: {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $OmsorgspengerGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                'søktePerioder': {
                    items: {
                        '$ref': '#/components/schemas/SøktPeriode'
                    },
                    maxItems: 365,
                    minItems: 0,
                    type: 'array'
                },
                utbetalingsgradPrAktivitet: {
                    items: {
                        '$ref': '#/components/schemas/UtbetalingsgradPrAktivitetDto'
                    },
                    maxItems: 2147483647,
                    minItems: 1,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['utbetalingsgradPrAktivitet'],
    type: 'object'
} as const;

export const $OppgaveIdDto = {
    properties: {
        verdi: {
            maxLength: 50,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}_\\.\\-/]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $OppgittArbeidsforholdDto = {
    properties: {
        inntekt: {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['inntekt', 'periode'],
    type: 'object'
} as const;

export const $OppgittEgenNæringDto = {
    properties: {
        'aktør': {
            '$ref': '#/components/schemas/Aktør'
        },
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        bruttoInntekt: {
            type: 'number'
        },
        endringDato: {
            format: 'date',
            type: 'string'
        },
        nyIArbeidslivet: {
            type: 'boolean'
        },
        nyoppstartet: {
            type: 'boolean'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        varigEndring: {
            type: 'boolean'
        },
        virksomhetType: {
            enum: ['DAGMAMMA', 'FISKE', 'FRILANSER', 'JORDBRUK_SKOGBRUK', 'ANNEN', '-'],
            type: 'string'
        }
    },
    required: ['nyIArbeidslivet', 'nyoppstartet', 'periode', 'varigEndring'],
    type: 'object'
} as const;

export const $OppgittFrilansDto = {
    properties: {
        erNyoppstartet: {
            type: 'boolean'
        },
        oppgittFrilansInntekt: {
            items: {
                '$ref': '#/components/schemas/OppgittFrilansInntekt'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['erNyoppstartet'],
    type: 'object'
} as const;

export const $OppgittFrilansInntekt = {
    properties: {
        inntekt: {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['inntekt', 'periode'],
    type: 'object'
} as const;

export const $OppgittFrilansoppdragDto = {
    properties: {
        bruttoInntekt: {
            '$ref': '#/components/schemas/Beløp'
        },
        periode: {
            '$ref': '#/components/schemas/PeriodeDto'
        }
    },
    required: ['bruttoInntekt', 'periode'],
    type: 'object'
} as const;

export const $OppgittOpptjeningDto = {
    properties: {
        'egenNæring': {
            items: {
                '$ref': '#/components/schemas/OppgittEgenNæringDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        frilans: {
            '$ref': '#/components/schemas/OppgittFrilansDto'
        },
        journalpostId: {
            type: 'string'
        },
        oppgittArbeidsforhold: {
            items: {
                '$ref': '#/components/schemas/OppgittArbeidsforholdDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $OppgittTilknytningDto = {
    properties: {
        utlandsopphold: {
            items: {
                '$ref': '#/components/schemas/UtlandsoppholdDto'
            },
            maxItems: 50,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $OppgittUttakDto = {
    properties: {
        aktiviteter: {
            items: {
                '$ref': '#/components/schemas/UttakAktivitetPeriodeDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        },
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $OpplystPeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        'statusSøktFor': {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'statusSøktFor', 'tom'],
    type: 'object'
} as const;

export const $OpplæringDokumentDto = {
    properties: {
        datert: {
            format: 'date',
            type: 'string'
        },
        fremhevet: {
            type: 'boolean'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        type: {
            enum: ['DOKUMENTASJON_AV_OPPLÆRING', 'LEGEERKLÆRING_MED_DOKUMENTASJON_AV_OPPLÆRING'],
            type: 'string'
        }
    },
    required: ['id'],
    type: 'object'
} as const;

export const $OpplæringVurderingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        'opplæring': {
            '$ref': '#/components/schemas/Periode'
        },
        resultat: {
            enum: ['MÅ_VURDERES', 'GODKJENT', 'IKKE_GODKJENT'],
            type: 'string'
        },
        tilknyttedeDokumenter: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'opplæring', 'resultat', 'tilknyttedeDokumenter', 'vurdertAv', 'vurdertTidspunkt'],
    type: 'object'
} as const;

export const $OpplæringspengerGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                utbetalingsgradPrAktivitet: {
                    items: {
                        '$ref': '#/components/schemas/UtbetalingsgradPrAktivitetDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['utbetalingsgradPrAktivitet'],
    type: 'object'
} as const;

export const $OpprettManuellRevurdering = {
    properties: {
        saksnumre: {
            pattern: '^[\\p{Alnum}\\s]+$',
            type: 'string'
        }
    },
    required: ['saksnumre'],
    type: 'object'
} as const;

export const $OpprettManuellRevurderingBeregning = {
    properties: {
        'saksnummerOgSkjæringstidspunkt': {
            pattern: `^[0-9a-zA-ZæøåÆØÅAaÁáBbCcČčDdĐđEeFfGgHhIiJjKkLlMmNnŊŋOoPpRrSsŠšTtŦŧUuVvZzŽžéôèÉöüäÖÜÄ .'\-/
%§\!?@_()+:;,="&]*$`,
            type: 'string'
        }
    },
    required: ['saksnummerOgSkjæringstidspunkt'],
    type: 'object'
} as const;

export const $OpprettNotatDto = {
    properties: {
        notatGjelderType: {
            enum: ['FAGSAK', 'PLEIETRENGENDE'],
            type: 'string'
        },
        notatTekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        }
    },
    required: ['notatGjelderType', 'notatTekst', 'saksnummer'],
    type: 'object'
} as const;

export const $OpptjeningAktivitetDto = {
    properties: {
        aktivitetType: {
            enum: ['AAP', 'ARBEID', 'DAGPENGER', 'FORELDREPENGER', 'FRILANS', 'MILITÆR_ELLER_SIVILTJENESTE', 'NÆRING', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'ETTERLØNN_SLUTTPAKKE', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'SYKEPENGER_AV_DAGPENGER', 'PLEIEPENGER_AV_DAGPENGER', 'VENTELØNN_VARTPENGER', 'VIDERE_ETTERUTDANNING', 'UTENLANDSK_ARBEIDSFORHOLD', 'FRISINN', 'UTDANNINGSPERMISJON', 'MELLOM_ARBEID', '-'],
            type: 'string'
        },
        arbeidsforholdRef: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\-_:.\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiver: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverIdentifikator: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverNavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{M}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        erEndret: {
            type: 'boolean'
        },
        erGodkjent: {
            type: 'boolean'
        },
        erManueltOpprettet: {
            type: 'boolean'
        },
        erPeriodeEndret: {
            type: 'boolean'
        },
        naringRegistreringsdato: {
            format: 'date',
            type: 'string'
        },
        oppdragsgiverOrg: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{Sc}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        opptjeningFom: {
            format: 'date',
            type: 'string'
        },
        opptjeningTom: {
            format: 'date',
            type: 'string'
        },
        originalFom: {
            format: 'date',
            type: 'string'
        },
        originalTom: {
            format: 'date',
            type: 'string'
        },
        'privatpersonFødselsdato': {
            format: 'date',
            type: 'string'
        },
        privatpersonNavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Alnum}.\\-\\p{Space}\\p{Sc}\\p{M}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        stillingsandel: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 500,
            minimum: 0,
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $OpptjeningAktiviteterDto = {
    properties: {
        midlertidigInaktivType: {
            enum: ['8-47 A', '8-47 B'],
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/OpptjeningPeriodeDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder'],
    type: 'object'
} as const;

export const $OpptjeningDto = {
    properties: {
        fastsattOpptjening: {
            '$ref': '#/components/schemas/FastsattOpptjeningDto'
        },
        opptjeningAktivitetList: {
            items: {
                '$ref': '#/components/schemas/OpptjeningAktivitetDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $OpptjeningPeriodeDto = {
    properties: {
        dager: {
            format: 'int32',
            maximum: 31,
            minimum: 0,
            type: 'integer'
        },
        'måneder': {
            format: 'int32',
            maximum: 36,
            minimum: 0,
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const $OpptjeningerDto = {
    properties: {
        opptjeninger: {
            items: {
                '$ref': '#/components/schemas/OpptjeningDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $Organisasjon = {
    allOf: [
        {
            '$ref': '#/components/schemas/Aktør'
        },
        {
            properties: {
                ident: {
                    pattern: '^\\d{9}+$',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    required: ['ident'],
    type: 'object'
} as const;

export const $OrganisasjonsEnhet = {
    properties: {
        enhetId: {
            maxLength: 30,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}]+$',
            type: 'string'
        },
        enhetNavn: {
            maxLength: 10,
            minLength: 1,
            pattern: '^[\\p{L}\\p{N}\\p{P}\\p{Space}]+$',
            type: 'string'
        },
        status: {
            maxLength: 50,
            minLength: 1,
            pattern: '^[A-Z_]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $OrganisasjonsnrDto = {
    properties: {
        organisasjonsnr: {
            maxLength: 9,
            minLength: 0,
            pattern: '^\\d{9}$',
            type: 'string'
        }
    },
    required: ['organisasjonsnr'],
    type: 'object'
} as const;

export const $OverføringFår = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                avsender: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $OverføringGir = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                mottaker: {
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $OverlappendeYtelseDto = {
    properties: {
        kilde: {
            enum: ['K9SAK', 'FPSAK', 'TPS', 'VLSP', 'JOARK', 'INFOTRYGD', 'ARENA', 'INNTEKT', 'MEDL', 'GOSYS', 'ENHETSREGISTERET', 'AAREGISTERET', '-'],
            type: 'string'
        },
        overlappendePerioder: {
            items: {
                '$ref': '#/components/schemas/OverlappendeYtelsePeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        saksnummer: {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['kilde', 'ytelseType'],
    type: 'object'
} as const;

export const $OverlappendeYtelsePeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $OverstyrBeregningAktivitet = {
    properties: {
        'arbeidsgiverAktørId': {
            type: 'string'
        },
        arbeidsgiverOrgnr: {
            type: 'string'
        },
        inntektPrAar: {
            format: 'int32',
            maximum: 100000000,
            minimum: 0,
            type: 'integer'
        },
        'opphørRefusjon': {
            format: 'date',
            type: 'string'
        },
        'orgnrEllerAktørid': {
            type: 'boolean'
        },
        refusjonPrAar: {
            format: 'int32',
            maximum: 100000000,
            minimum: 0,
            type: 'integer'
        },
        skalKunneEndreRefusjon: {
            type: 'boolean'
        },
        startdatoRefusjon: {
            format: 'date',
            type: 'string'
        },
        'startdatoRefusjonFørOpphør': {
            type: 'boolean'
        }
    },
    required: ['inntektPrAar'],
    type: 'object'
} as const;

export const $OverstyrBeregningInputPeriode = {
    properties: {
        aktivitetliste: {
            items: {
                '$ref': '#/components/schemas/OverstyrBeregningAktivitet'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        harKategoriFrilans: {
            type: 'boolean'
        },
        'harKategoriNæring': {
            type: 'boolean'
        },
        skjaeringstidspunkt: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['aktivitetliste', 'skjaeringstidspunkt'],
    type: 'object'
} as const;

export const $OverstyrUttakArbeidsforholdDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        arbeidsforholdId: {
            format: 'uuid',
            type: 'string'
        },
        orgnr: {
            type: 'string'
        },
        type: {
            enum: ['AT', 'SN', 'FL', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'BA', 'IKKE_YRKESAKTIV', 'IKKE_YRKESAKTIV_UTEN_ERSTATNING', 'MIDL_INAKTIV', 'ANNET'],
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $OverstyrUttakPeriodeDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        id: {
            format: 'int64',
            maximum: 2147483647,
            minimum: 999951,
            type: 'integer'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        saksbehandler: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}]+$',
            type: 'string'
        },
        'søkersUttaksgrad': {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        utbetalingsgrader: {
            items: {
                '$ref': '#/components/schemas/OverstyrUttakUtbetalingsgradDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['begrunnelse', 'periode'],
    type: 'object'
} as const;

export const $OverstyrUttakUtbetalingsgradDto = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/OverstyrUttakArbeidsforholdDto'
        },
        utbetalingsgrad: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        }
    },
    required: ['arbeidsforhold', 'utbetalingsgrad'],
    type: 'object'
} as const;

export const $OverstyrbareAktiviteterForUttakRequest = {
    properties: {
        behandlingIdDto: {
            format: 'uuid',
            type: 'string'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['behandlingIdDto', 'fom', 'tom'],
    type: 'object'
} as const;

export const $OverstyrbareUttakAktiviterDto = {
    properties: {
        arbeidsforholdsperioder: {
            items: {
                '$ref': '#/components/schemas/OverstyrUttakArbeidsforholdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        arbeidsgiverOversikt: {
            '$ref': '#/components/schemas/ArbeidsgiverOversiktDto'
        }
    },
    required: ['arbeidsforholdsperioder', 'arbeidsgiverOversikt'],
    type: 'object'
} as const;

export const $OverstyringAksjonspunktDto = {
    properties: {
        avbrutt: {
            type: 'boolean'
        },
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $OverstyrtUttakDto = {
    properties: {
        arbeidsgiverOversikt: {
            '$ref': '#/components/schemas/ArbeidsgiverOversiktDto'
        },
        overstyringer: {
            items: {
                '$ref': '#/components/schemas/OverstyrUttakPeriodeDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['arbeidsgiverOversikt', 'overstyringer'],
    type: 'object'
} as const;

export const $PGIGrunnlagDto = {
    properties: {
        'beløp': {
            type: 'number'
        },
        pgiType: {
            enum: ['LØNN', 'NÆRING', '-'],
            type: 'string'
        }
    },
    required: ['pgiType'],
    type: 'object'
} as const;

export const $PGIPrÅrDto = {
    properties: {
        inntekter: {
            items: {
                '$ref': '#/components/schemas/PGIGrunnlagDto'
            },
            maxItems: 3,
            minItems: 0,
            type: 'array'
        },
        'år': {
            format: 'int32',
            maximum: 3000,
            minimum: 1900,
            type: 'integer'
        }
    },
    required: ['år'],
    type: 'object'
} as const;

export const $Periode = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $PeriodeAndel = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        varighetPerDag: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $PeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'tom'],
    type: 'object'
} as const;

export const $PeriodeMedRegisterendring = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $PeriodeMedSNOgFLDto = {
    properties: {
        'måned': {
            '$ref': '#/components/schemas/PeriodeDto'
        },
        'oppgittIMåned': {
            '$ref': '#/components/schemas/OppgittOpptjeningDto'
        },
        'søkerFL': {
            type: 'boolean'
        },
        'søkerSN': {
            type: 'boolean'
        }
    },
    required: ['måned', 'søkerFL', 'søkerSN'],
    type: 'object'
} as const;

export const $PeriodeMedSøkerInfoDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'søkerFrilansIPeriode': {
            type: 'boolean'
        },
        'søkerNæringIPeriode': {
            type: 'boolean'
        }
    },
    required: ['periode', 'søkerFrilansIPeriode', 'søkerNæringIPeriode'],
    type: 'object'
} as const;

export const $PeriodeMedUtbetalingsgradDto = {
    properties: {
        aktivitetsgrad: {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        utbetalingsgrad: {
            type: 'number'
        }
    },
    required: ['periode', 'utbetalingsgrad'],
    type: 'object'
} as const;

export const $PeriodeMedUtfall = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        utfall: {
            enum: ['IKKE_OPPFYLT', 'IKKE_VURDERT', 'OPPFYLT', 'IKKE_RELEVANT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['periode', 'utfall'],
    type: 'object'
} as const;

export const $PeriodeMedÅrsaker = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        'årsaker': {
            items: {
                enum: ['MANUELT_REVURDERER_PERIODE', 'REVURDERER_BERØRT_PERIODE', 'ENDRING_FRA_BRUKER', 'TRUKKET_KRAV', 'REVURDERER_NY_INNTEKTSMELDING', 'REVURDERER_ENDRING_FRA_ANNEN_PART', 'REVURDERER_ENDRING_FERIEPENGER_ANNEN_SAK', 'UTSATT_BEHANDLING', 'GJENOPPTAR_UTSATT_BEHANDLING', 'REVURDERER_SYKDOM_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'REVURDERER_ETABLERT_TILSYN_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'REVURDERER_NATTEVÅKBEREDSKAP_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'HENDELSE_DØD_BRUKER', 'HENDELSE_DØD_PLEIETRENGENDE', 'G_REGULERING', 'REVURDERER_BEREGNING', 'ENDRING_I_FORDELING', 'FØRSTEGANGSVURDERING', 'REVURDERER_LIGNET_INNTEKT'],
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $PerioderForKrav = {
    properties: {
        innsendingsdato: {
            format: 'date',
            type: 'string'
        },
        refusjonsperioder: {
            items: {
                '$ref': '#/components/schemas/Refusjonsperiode'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['innsendingsdato', 'refusjonsperioder'],
    type: 'object'
} as const;

export const $PerioderMedÅrsakPerKravstiller = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        },
        kravstiller: {
            enum: ['BRUKER', 'ARBEIDSGIVER'],
            type: 'string'
        },
        'perioderMedÅrsak': {
            items: {
                '$ref': '#/components/schemas/PeriodeMedÅrsaker'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['kravstiller'],
    type: 'object'
} as const;

export const $PermisjonDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        permisjonsbeskrivelseType: {
            enum: ['-', 'PERMISJON', 'UTDANNINGSPERMISJON', 'UTDANNINGSPERMISJON_IKKE_LOVFESTET', 'UTDANNINGSPERMISJON_LOVFESTET', 'VELFERDSPERMISJON', 'ANNEN_PERMISJON_IKKE_LOVFESTET', 'ANNEN_PERMISJON_LOVFESTET', 'PERMISJON_MED_FORELDREPENGER', 'PERMITTERING', 'PERMISJON_VED_MILITÆRTJENESTE'],
            type: 'string'
        },
        prosentsats: {
            type: 'number'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $PersonDto = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        alder: {
            format: 'int32',
            type: 'integer'
        },
        diskresjonskode: {
            type: 'string'
        },
        dodsdato: {
            format: 'date',
            type: 'string'
        },
        erDod: {
            type: 'boolean'
        },
        erKvinne: {
            type: 'boolean'
        },
        navn: {
            type: 'string'
        },
        personnummer: {
            type: 'string'
        },
        personstatusType: {
            enum: ['ABNR', 'ADNR', 'BOSA', 'DØD', 'DØDD', 'FOSV', 'FØDR', 'UFUL', 'UREG', 'UTAN', 'UTPE', 'UTVA', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $PersonadresseDto = {
    properties: {
        adresseType: {
            enum: ['BOSTEDSADRESSE', 'DELT_BOSTEDSADRESSE', 'POSTADRESSE', 'POSTADRESSE_UTLAND', 'MIDLERTIDIG_POSTADRESSE_NORGE', 'MIDLERTIDIG_POSTADRESSE_UTLAND', 'UKJENT_ADRESSE'],
            type: 'string'
        },
        adresselinje1: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        adresselinje2: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        adresselinje3: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        land: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        mottakerNavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        postNummer: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        poststed: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['adresseType', 'land'],
    type: 'object'
} as const;

export const $PersonopplysningDto = {
    properties: {
        adresser: {
            items: {
                '$ref': '#/components/schemas/PersonadresseDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        aktoerId: {
            type: 'string'
        },
        annenPart: {
            '$ref': '#/components/schemas/PersonopplysningDto'
        },
        avklartPersonstatus: {
            '$ref': '#/components/schemas/AvklartPersonstatus'
        },
        barn: {
            items: {
                '$ref': '#/components/schemas/PersonopplysningDto'
            },
            maxItems: 30,
            minItems: 0,
            type: 'array'
        },
        barnSoktFor: {
            items: {
                '$ref': '#/components/schemas/PersonopplysningDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        },
        diskresjonskode: {
            enum: ['UDEF', 'URIK', 'UFB', 'SVAL', 'SPSF', 'SPFO', 'PEND', 'MILI', 'KLIE'],
            type: 'string'
        },
        dodsdato: {
            format: 'date',
            type: 'string'
        },
        ektefelle: {
            '$ref': '#/components/schemas/PersonopplysningDto'
        },
        fnr: {
            maxLength: 11,
            minLength: 0,
            pattern: '^[\\p{Alnum}]{11}+$',
            type: 'string'
        },
        fodselsdato: {
            format: 'date',
            type: 'string'
        },
        harVerge: {
            type: 'boolean'
        },
        navBrukerKjonn: {
            enum: ['K', 'M', '-'],
            type: 'string'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        nummer: {
            format: 'int32',
            maximum: 2147483647,
            minimum: 0,
            type: 'integer'
        },
        personstatus: {
            enum: ['ABNR', 'ADNR', 'BOSA', 'DØD', 'DØDD', 'FOSV', 'FØDR', 'UFUL', 'UREG', 'UTAN', 'UTPE', 'UTVA', '-'],
            type: 'string'
        },
        pleietrengendePart: {
            '$ref': '#/components/schemas/PersonopplysningDto'
        },
        region: {
            enum: ['NORDEN', 'EOS', 'ANNET', '-'],
            type: 'string'
        },
        sivilstand: {
            enum: ['ENKE', 'GIFT', 'GJPA', 'GLAD', 'NULL', 'REPA', 'SAMB', 'SEPA', 'SEPR', 'SKIL', 'SKPA', 'UGIF'],
            type: 'string'
        },
        statsborgerskap: {
            '$ref': '#/components/schemas/Landkoder'
        }
    },
    required: ['aktoerId', 'fnr'],
    type: 'object'
} as const;

export const $PersonopplysningPleietrengendeDto = {
    properties: {
        diagnosekoder: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        dodsdato: {
            format: 'date',
            type: 'string'
        },
        fnr: {
            maxLength: 11,
            minLength: 0,
            pattern: '^[\\p{Alnum}]{11}+$',
            type: 'string'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $PgiDto = {
    properties: {
        'beløp': {
            type: 'number'
        },
        'årstall': {
            format: 'int32',
            maximum: 3000,
            minimum: 0,
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const $PipDto = {
    properties: {
        'aktørIder': {
            items: {
                maxLength: 50,
                minLength: 0,
                type: 'string'
            },
            maxItems: 50,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        behandlingStatus: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}]+$',
            type: 'string'
        },
        fagsakStatus: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}]+$',
            type: 'string'
        }
    },
    required: ['aktørIder'],
    type: 'object'
} as const;

export const $PleiepengerNærståendeGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                tilkommetInntektHensyntasFom: {
                    format: 'date',
                    type: 'string'
                },
                utbetalingsgradPrAktivitet: {
                    items: {
                        '$ref': '#/components/schemas/UtbetalingsgradPrAktivitetDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['utbetalingsgradPrAktivitet'],
    type: 'object'
} as const;

export const $PleiepengerSyktBarnGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                tilkommetInntektHensyntasFom: {
                    format: 'date',
                    type: 'string'
                },
                utbetalingsgradPrAktivitet: {
                    items: {
                        '$ref': '#/components/schemas/UtbetalingsgradPrAktivitetDto'
                    },
                    maxItems: 2147483647,
                    minItems: 0,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['utbetalingsgradPrAktivitet'],
    type: 'object'
} as const;

export const $ProsessTaskDataDto = {
    properties: {
        gruppe: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Alnum}_.\\-]*$',
            type: 'string'
        },
        id: {
            format: 'int64',
            type: 'integer'
        },
        'nesteKjøringEtter': {
            format: 'date-time',
            type: 'string'
        },
        sekvens: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Alnum}_.\\-]*$',
            type: 'string'
        },
        'sistKjørt': {
            format: 'date-time',
            type: 'string'
        },
        sisteFeilKode: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Alnum}_.\\-]*$',
            type: 'string'
        },
        status: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Alnum}_.\\-]*$',
            type: 'string'
        },
        taskType: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Alnum}æøåÆØÅ_.\\-]*$',
            type: 'string'
        }
    },
    required: ['gruppe', 'id', 'sekvens', 'status', 'taskType'],
    type: 'object'
} as const;

export const $ProsessTaskGruppeIdDto = {
    properties: {
        gruppe: {
            maxLength: 250,
            minLength: 1,
            pattern: '[a-zA-Z0-9-.]+',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $ProsessTaskOpprettInputDto = {
    properties: {
        taskParametre: {
            additionalProperties: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            type: 'object'
        },
        taskType: {
            maxLength: 100,
            minLength: 1,
            pattern: '^[\\p{Alnum}æøåÆØÅ_.\\-]*$',
            type: 'string'
        }
    },
    required: ['taskParametre', 'taskType'],
    type: 'object'
} as const;

export const $ProsessTaskRestartInputDto = {
    properties: {
        'inneværendeStatus': {
            enum: ['VENTER_SVAR, SUSPENDERT, FEILET'],
            maxLength: 15,
            minLength: 0,
            pattern: 'VENTER_SVAR|FEILET|SUSPENDERT',
            type: 'string'
        },
        prosessTaskId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        }
    },
    required: ['inneværendeStatus', 'prosessTaskId'],
    type: 'object'
} as const;

export const $ProsessTaskRestartResultatDto = {
    properties: {
        nesteKjoeretidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        prosessTaskId: {
            format: 'int64',
            type: 'integer'
        },
        prosessTaskStatus: {
            pattern: '^[\\p{Alnum}_.\\-]*$',
            type: 'string'
        }
    },
    required: ['nesteKjoeretidspunkt', 'prosessTaskId', 'prosessTaskStatus'],
    type: 'object'
} as const;

export const $ProsessTaskRetryAllResultatDto = {
    properties: {
        prosessTaskIds: {
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $ProsessTaskSetFerdigInputDto = {
    properties: {
        'inneværendeStatus': {
            enum: ['VENTER_SVAR, SUSPENDERT, FEILET, VETO, KLAR'],
            maxLength: 15,
            minLength: 0,
            pattern: 'VENTER_SVAR|FEILET|SUSPENDERT|VETO|KLAR',
            type: 'string'
        },
        prosessTaskId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        }
    },
    required: ['inneværendeStatus', 'prosessTaskId'],
    type: 'object'
} as const;

export const $ProsessTaskStatusDto = {
    properties: {
        prosessTaskStatusName: {
            enum: ['FEILET, VENTER_SVAR, SUSPENDERT, VETO, KLAR'],
            maxLength: 15,
            minLength: 1,
            pattern: 'FEILET|VENTER_SVAR|SUSPENDERT|VETO|KLAR',
            type: 'string'
        }
    },
    required: ['prosessTaskStatusName'],
    type: 'object'
} as const;

export const $PsbInfotrygdFødselsnumre = {
    properties: {
        'fødselsnumre': {
            pattern: '^[\\p{Alnum}\\s]+$',
            type: 'string'
        }
    },
    required: ['fødselsnumre'],
    type: 'object'
} as const;

export const $PåvirkedeSaker = {
    properties: {
        saksnummere: {
            items: {
                '$ref': '#/components/schemas/SaksnummerDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['saksnummere'],
    type: 'object'
} as const;

export const $Rammevedtak = {
    discriminator: {
        propertyName: 'type'
    },
    properties: {
        type: {
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object'
} as const;

export const $RammevedtakResponse = {
    properties: {
        rammevedtak: {
            items: {
                '$ref': '#/components/schemas/Rammevedtak'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $ReferanseDto = {
    properties: {
        referanse: {
            format: 'uuid',
            type: 'string'
        }
    },
    required: ['referanse'],
    type: 'object'
} as const;

export const $Refusjon = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        indexKey: {
            type: 'string'
        },
        'refusjonsbeløp': {
            '$ref': '#/components/schemas/Beløp'
        }
    },
    type: 'object'
} as const;

export const $RefusjonAndelTilVurderingDto = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        },
        eksternArbeidsforholdRef: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        fastsattDelvisRefusjonPrMnd: {
            type: 'number'
        },
        fastsattNyttRefusjonskravFom: {
            format: 'date',
            type: 'string'
        },
        internArbeidsforholdRef: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        maksTillattDelvisRefusjonPrMnd: {
            type: 'number'
        },
        nyttRefusjonskravFom: {
            format: 'date',
            type: 'string'
        },
        skalKunneFastsetteDelvisRefusjon: {
            type: 'boolean'
        },
        tidligereUtbetalinger: {
            items: {
                '$ref': '#/components/schemas/TidligereUtbetalingDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        tidligsteMuligeRefusjonsdato: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['aktivitetStatus'],
    type: 'object'
} as const;

export const $RefusjonDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        'refusjonsbeløpMnd': {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $RefusjonTilVurderingDto = {
    properties: {
        andeler: {
            items: {
                '$ref': '#/components/schemas/RefusjonAndelTilVurderingDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['andeler'],
    type: 'object'
} as const;

export const $RefusjonskravDatoDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        'førsteDagMedRefusjonskrav': {
            format: 'date',
            type: 'string'
        },
        'førsteInnsendingAvRefusjonskrav': {
            format: 'date',
            type: 'string'
        },
        harRefusjonFraStart: {
            type: 'boolean'
        }
    },
    required: ['arbeidsgiver', 'førsteDagMedRefusjonskrav', 'førsteInnsendingAvRefusjonskrav', 'harRefusjonFraStart'],
    type: 'object'
} as const;

export const $RefusjonskravSomKommerForSentDto = {
    properties: {
        arbeidsgiverIdent: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        erRefusjonskravGyldig: {
            type: 'boolean'
        }
    },
    required: ['arbeidsgiverIdent'],
    type: 'object'
} as const;

export const $Refusjonsperiode = {
    properties: {
        'beløp': {
            type: 'number'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['beløp', 'periode'],
    type: 'object'
} as const;

export const $ReisetidDto = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/ReisetidPeriodeDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/ReisetidVurderingDto'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder', 'vurderinger'],
    type: 'object'
} as const;

export const $ReisetidPeriodeDto = {
    properties: {
        beskrivelseFraSoekerHjem: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        beskrivelseFraSoekerTil: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Pd}\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]*$',
            type: 'string'
        },
        'opplæringPeriode': {
            '$ref': '#/components/schemas/Periode'
        },
        reisetidHjem: {
            '$ref': '#/components/schemas/Periode'
        },
        reisetidTil: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['opplæringPeriode', 'reisetidHjem', 'reisetidTil'],
    type: 'object'
} as const;

export const $ReisetidPeriodeVurderingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        resultat: {
            enum: ['MÅ_VURDERES', 'GODKJENT', 'GODKJENT_AUTOMATISK', 'IKKE_GODKJENT'],
            type: 'string'
        },
        vurdertAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        vurdertTidspunkt: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['begrunnelse', 'periode', 'resultat', 'vurdertAv', 'vurdertTidspunkt'],
    type: 'object'
} as const;

export const $ReisetidVurderingDto = {
    properties: {
        'opplæringPeriode': {
            '$ref': '#/components/schemas/Periode'
        },
        reisetidHjem: {
            items: {
                '$ref': '#/components/schemas/ReisetidPeriodeVurderingDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        reisetidTil: {
            items: {
                '$ref': '#/components/schemas/ReisetidPeriodeVurderingDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['opplæringPeriode', 'reisetidHjem', 'reisetidTil'],
    type: 'object'
} as const;

export const $RelatertSakDto = {
    properties: {
        'relaterteSøkere': {
            items: {
                '$ref': '#/components/schemas/RelatertSøkerDto'
            },
            maxItems: 20,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $RelatertSøkerDto = {
    properties: {
        saksnummer: {
            type: 'string'
        },
        'søkerIdent': {
            type: 'string'
        },
        'søkerNavn': {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{P}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        'åpenBehandling': {
            type: 'boolean'
        }
    },
    required: ['saksnummer', 'søkerIdent', 'søkerNavn', 'åpenBehandling'],
    type: 'object'
} as const;

export const $ReserverSaksnummerDto = {
    properties: {
        'behandlingsår': {
            type: 'string'
        },
        'brukerAktørId': {
            type: 'string'
        },
        'pleietrengendeAktørId': {
            type: 'string'
        },
        'relatertPersonAktørId': {
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', 'OBSOLETE', '-'],
            type: 'string'
        }
    },
    required: ['brukerAktørId', 'ytelseType'],
    type: 'object'
} as const;

export const $ResourceLink = {
    properties: {
        href: {
            format: 'uri',
            type: 'string'
        },
        rel: {
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        requestPayload: {
            type: 'object'
        },
        type: {
            enum: ['DELETE', 'GET', 'PATCH', 'POST', 'PUT'],
            type: 'string'
        }
    },
    required: ['href', 'rel', 'type'],
    type: 'object'
} as const;

export const $RevurderPeriodeDto = {
    properties: {
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    required: ['saksnummer', 'skjæringstidspunkt'],
    type: 'object'
} as const;

export const $ReåpneBehandlingDto = {
    properties: {
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        }
    },
    required: ['behandlingId', 'behandlingVersjon'],
    type: 'object'
} as const;

export const $SakRettigheterDto = {
    properties: {
        behandlingTillatteOperasjoner: {
            items: {
                '$ref': '#/components/schemas/BehandlingOperasjonerDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        behandlingTypeKanOpprettes: {
            items: {
                '$ref': '#/components/schemas/BehandlingOpprettingDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        },
        sakSkalTilInfotrygd: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $SaksbehandlerDto = {
    properties: {
        saksbehandlere: {
            additionalProperties: {
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $SaksnummerDto = {
    properties: {
        saksnummer: {
            maxLength: 19,
            minLength: 0,
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        }
    },
    required: ['saksnummer'],
    type: 'object'
} as const;

export const $Saksopplysninger = {
    properties: {
        'arbeidsforholdMedLønnsendring': {
            items: {
                '$ref': '#/components/schemas/ArbeidsforholdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        kortvarigeArbeidsforhold: {
            items: {
                '$ref': '#/components/schemas/ArbeidsforholdDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        'lønnsendringSaksopplysning': {
            items: {
                '$ref': '#/components/schemas/LønnsendringSaksopplysningDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $SammenligningsgrunnlagDto = {
    properties: {
        avvikPromille: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 10000000,
            minimum: 0,
            type: 'number'
        },
        avvikProsent: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 10000000,
            minimum: 0,
            type: 'number'
        },
        differanseBeregnet: {
            type: 'number'
        },
        rapportertPrAar: {
            type: 'number'
        },
        sammenligningsgrunnlagFom: {
            format: 'date',
            type: 'string'
        },
        sammenligningsgrunnlagTom: {
            format: 'date',
            type: 'string'
        },
        sammenligningsgrunnlagType: {
            enum: ['SAMMENLIGNING_AT', 'SAMMENLIGNING_FL', 'SAMMENLIGNING_AT_FL', 'SAMMENLIGNING_SN', 'SAMMENLIGNING_ATFL_SN', 'SAMMENLIGNING_MIDL_INAKTIV'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $SettBehandlingPaVentDto = {
    properties: {
        behandlingId: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        behandlingVersjon: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        frist: {
            format: 'date',
            type: 'string'
        },
        ventearsak: {
            enum: ['-', 'ANKE_OVERSENDT_TIL_TRYGDERETTEN', 'ANKE_VENTER_PAA_MERKNADER_FRA_BRUKER', 'AVV_DOK', 'AVV_IM_MOT_AAREG', 'AVV_IM_MOT_SØKNAD_AT', 'AVV_SØKNADSPERIODER', 'AVV_FODSEL', 'AVV_RESPONS_REVURDERING', 'FOR_TIDLIG_SOKNAD', 'GRADERING_FLERE_ARBEIDSFORHOLD', 'REFUSJON_3_MÅNEDER', 'SCANN', 'UTV_FRIST', 'VENT_FEIL_ENDRINGSSØKNAD', 'VENT_GRADERING_UTEN_BEREGNINGSGRUNNLAG', 'VENT_INFOTRYGD', 'VENT_INNTEKT_RAPPORTERINGSFRIST', 'VENT_MILITÆR_OG_BG_UNDER_3G', 'VENT_OPDT_INNTEKTSMELDING', 'VENT_OPPTJENING_OPPLYSNINGER', 'VENT_PÅ_NY_INNTEKTSMELDING_MED_GYLDIG_ARB_ID', 'VENT_REGISTERINNHENTING', 'VENT_PÅ_SISTE_AAP_MELDEKORT', 'VENT_SØKNAD_SENDT_INFORMASJONSBREV', 'VENT_TIDLIGERE_BEHANDLING', 'VENT_ÅPEN_BEHANDLING', 'VENT_MANGL_FUNKSJ_SAKSBEHANDLER', 'VENTER_SVAR_PORTEN', 'VENTER_SVAR_TEAMS', 'ANDRE_INNTEKTSOPPLYSNINGER', 'INNTEKTSMELDING', 'LEGEERKLÆRING', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'VENTER_ETTERLYS_IM', 'VENTER_ETTERLYS_IM_VARSEL', 'OPPD_ÅPEN_BEH', 'VENT_DEKGRAD_REGEL', 'VENT_ØKONOMI', 'VENT_TILBAKEKREVING', 'VENTELØNN_ELLER_MILITÆR_MED_FLERE_AKTIVITETER', 'VENT_BEREGNING_TILBAKE_I_TID', 'BRUKER_70ÅR_VED_REFUSJON', 'VENT_LOVENDRING_8_41', 'INGEN_PERIODE_UTEN_YTELSE', 'PERIODE_MED_AVSLAG', 'MANGLENDE_FUNKSJONALITET', 'KORTVARIG_ARBEID', 'FRISINN_ATFL_SAMME_ORG', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT', 'FRISINN_VARIANT_NY_FL', 'FRISINN_VARIANT_NY_SN_2019', 'FRISINN_VARIANT_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT', 'FRISINN_VARIANT_KOMBINERT_NY_FL', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2019', 'FRISINN_VARIANT_KOMBINERT_NY_SN_2020', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_SN_MED_FL_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_SN_2020', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2019', 'FRISINN_VARIANT_FL_MED_SN_INNTEKT_NY_FL_NY_SN_2020', 'FRISINN_VARIANT_ENDRET_INNTEKTSTYPE', 'AVV_SOKN_IT_PERIODER', 'AVV_SOKN_NAERING', 'AVV_SOKN_FRILANS', 'DELVIS_TILRETTELEGGING_OG_REFUSJON_SVP', 'AAP_DP_SISTE_10_MND_SVP', 'FL_SN_IKKE_STOTTET_FOR_SVP'],
            type: 'string'
        },
        ventearsakVariant: {
            maxLength: 200,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['behandlingId', 'behandlingVersjon'],
    type: 'object'
} as const;

export const $Simulering = {
    properties: {
        forrigeUttaksplan: {
            '$ref': '#/components/schemas/Uttaksplan'
        },
        simulertUttaksplan: {
            '$ref': '#/components/schemas/Uttaksplan'
        },
        uttakplanEndret: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $SkjulNotatDto = {
    properties: {
        notatId: {
            format: 'uuid',
            type: 'string'
        },
        saksnummer: {
            type: 'string'
        },
        skjul: {
            type: 'boolean'
        },
        versjon: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['notatId', 'saksnummer', 'skjul', 'versjon'],
    type: 'object'
} as const;

export const $Smittevern = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $SmørtEtablertTilsyn = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        tidPerDag: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $Språkkode = {
    properties: {
        kode: {
            type: 'string'
        },
        kodeverk: {
            readOnly: true,
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $StatusFilterDto = {
    properties: {
        prosessTaskStatuser: {
            items: {
                '$ref': '#/components/schemas/ProsessTaskStatusDto'
            },
            maxItems: 10,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $StatusForPerioderPåBehandling = {
    properties: {
        dokumenterTilBehandling: {
            items: {
                '$ref': '#/components/schemas/KravDokumentMedSøktePerioder'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        perioderMedRegisterendring: {
            items: {
                '$ref': '#/components/schemas/PeriodeMedRegisterendring'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        'perioderMedÅrsak': {
            items: {
                '$ref': '#/components/schemas/PeriodeMedÅrsaker'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'perioderMedÅrsakPerKravstiller': {
            items: {
                '$ref': '#/components/schemas/PerioderMedÅrsakPerKravstiller'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        perioderTilVurdering: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        'årsakMedPerioder': {
            items: {
                '$ref': '#/components/schemas/ÅrsakMedPerioder'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $StatusForPerioderPåBehandlingInkludertVilkår = {
    properties: {
        forrigeVedtak: {
            items: {
                '$ref': '#/components/schemas/PeriodeMedUtfall'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        periodeMedUtfall: {
            items: {
                '$ref': '#/components/schemas/PeriodeMedUtfall'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'perioderMedÅrsak': {
            '$ref': '#/components/schemas/StatusForPerioderPåBehandling'
        }
    },
    required: ['perioderMedÅrsak'],
    type: 'object'
} as const;

export const $SvangerskapspengerGrunnlag = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        },
        {
            properties: {
                tilkommetInntektHensyntasFom: {
                    format: 'date',
                    type: 'string'
                },
                utbetalingsgradPrAktivitet: {
                    items: {
                        '$ref': '#/components/schemas/UtbetalingsgradPrAktivitetDto'
                    },
                    maxItems: 2147483647,
                    minItems: 1,
                    type: 'array'
                }
            },
            type: 'object'
        }
    ],
    required: ['utbetalingsgradPrAktivitet'],
    type: 'object'
} as const;

export const $SvangerskapspengerGrunnlagDto = {
    allOf: [
        {
            '$ref': '#/components/schemas/YtelsespesifiktGrunnlagDto'
        }
    ],
    type: 'object'
} as const;

export const $SykdomAksjonspunktDto = {
    properties: {
        harDataSomIkkeHarBlittTattMedIBehandling: {
            type: 'boolean'
        },
        harUklassifiserteDokumenter: {
            type: 'boolean'
        },
        ikkeSammenMedBarnet: {
            type: 'boolean'
        },
        'kanLøseAksjonspunkt': {
            type: 'boolean'
        },
        manglerDiagnosekode: {
            type: 'boolean'
        },
        'manglerGodkjentLegeerklæring': {
            type: 'boolean'
        },
        manglerVurderingAvILivetsSluttfase: {
            type: 'boolean'
        },
        manglerVurderingAvKontinuerligTilsynOgPleie: {
            type: 'boolean'
        },
        manglerVurderingAvLangvarigSykdom: {
            type: 'boolean'
        },
        manglerVurderingAvToOmsorgspersoner: {
            type: 'boolean'
        },
        nyttDokumentHarIkkekontrollertEksisterendeVurderinger: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $SykdomDiagnosekoderDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        diagnosekoder: {
            items: {
                maxLength: 1000,
                minLength: 0,
                type: 'string'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $SykdomDokumentDto = {
    properties: {
        annenPartErKilde: {
            type: 'boolean'
        },
        benyttet: {
            type: 'boolean'
        },
        bruktTilMinstEnVurdering: {
            type: 'boolean'
        },
        datert: {
            format: 'date',
            type: 'string'
        },
        fremhevet: {
            type: 'boolean'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        type: {
            enum: ['LEGEERKLÆRING_SYKEHUS', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'UKLASSIFISERT', 'LEGEERKLÆRING_ANNEN', 'LEGEERKLÆRING_MED_DOKUMENTASJON_AV_OPPLÆRING', 'EPIKRISE', 'FEILREGISTRERT'],
            type: 'string'
        }
    },
    required: ['id'],
    type: 'object'
} as const;

export const $SykdomDokumentEndringDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        datert: {
            format: 'date',
            type: 'string'
        },
        duplikatAvId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        type: {
            enum: ['LEGEERKLÆRING_SYKEHUS', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'UKLASSIFISERT', 'LEGEERKLÆRING_ANNEN', 'LEGEERKLÆRING_MED_DOKUMENTASJON_AV_OPPLÆRING', 'EPIKRISE', 'FEILREGISTRERT'],
            type: 'string'
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingUuid', 'datert', 'duplikatAvId', 'id', 'type', 'versjon'],
    type: 'object'
} as const;

export const $SykdomDokumentIdDto = {
    properties: {
        sykdomDokumentId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['sykdomDokumentId'],
    type: 'object'
} as const;

export const $SykdomDokumentOpprettelseDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        harInfoSomIkkeKanPunsjes: {
            type: 'boolean'
        },
        journalpostId: {
            type: 'string'
        }
    },
    required: ['behandlingUuid', 'journalpostId'],
    type: 'object'
} as const;

export const $SykdomDokumentOversikt = {
    properties: {
        dokumenter: {
            items: {
                '$ref': '#/components/schemas/SykdomDokumentOversiktElement'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $SykdomDokumentOversiktElement = {
    properties: {
        annenPartErKilde: {
            type: 'boolean'
        },
        behandlet: {
            type: 'boolean'
        },
        datert: {
            format: 'date',
            type: 'string'
        },
        duplikatAvId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        duplikater: {
            items: {
                maxLength: 1000,
                minLength: 0,
                type: 'string'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        mottattDato: {
            format: 'date',
            type: 'string'
        },
        mottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        type: {
            enum: ['LEGEERKLÆRING_SYKEHUS', 'MEDISINSKE_OPPLYSNINGER', 'ANNET', 'UKLASSIFISERT', 'LEGEERKLÆRING_ANNEN', 'LEGEERKLÆRING_MED_DOKUMENTASJON_AV_OPPLÆRING', 'EPIKRISE', 'FEILREGISTRERT'],
            type: 'string'
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['id', 'versjon'],
    type: 'object'
} as const;

export const $SykdomDokumentUtkvitterEksisterendeVurderingerDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        dokumenterSomSkalUtkvitteres: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $SykdomInnleggelseDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        dryRun: {
            type: 'boolean'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingUuid'],
    type: 'object'
} as const;

export const $SykdomInnleggelseOppdateringResultatDto = {
    properties: {
        'førerTilRevurdering': {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $SykdomPeriodeMedEndringDto = {
    properties: {
        endrerAnnenVurdering: {
            type: 'boolean'
        },
        endrerVurderingSammeBehandling: {
            type: 'boolean'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    type: 'object'
} as const;

export const $SykdomVurderingAnnenInformasjon = {
    properties: {
        perioderSomKanVurderes: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        resterendeVurderingsperioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $SykdomVurderingDto = {
    properties: {
        annenInformasjon: {
            '$ref': '#/components/schemas/SykdomVurderingAnnenInformasjon'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        type: {
            enum: ['KONTINUERLIG_TILSYN_OG_PLEIE', 'TO_OMSORGSPERSONER', 'LIVETS_SLUTTFASE', 'LANGVARIG_SYKDOM'],
            type: 'string'
        },
        versjoner: {
            items: {
                '$ref': '#/components/schemas/SykdomVurderingVersjonDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['id'],
    type: 'object'
} as const;

export const $SykdomVurderingEndringDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        dryRun: {
            type: 'boolean'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        },
        tekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        tilknyttedeDokumenter: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['behandlingUuid', 'id', 'versjon'],
    type: 'object'
} as const;

export const $SykdomVurderingEndringResultatDto = {
    properties: {
        perioderMedEndringer: {
            items: {
                '$ref': '#/components/schemas/SykdomPeriodeMedEndringDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioderMedEndringer'],
    type: 'object'
} as const;

export const $SykdomVurderingIdDto = {
    properties: {
        sykdomVurderingId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['sykdomVurderingId'],
    type: 'object'
} as const;

export const $SykdomVurderingOpprettelseDto = {
    properties: {
        behandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        dryRun: {
            type: 'boolean'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        },
        tekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        tilknyttedeDokumenter: {
            items: {
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        type: {
            enum: ['KONTINUERLIG_TILSYN_OG_PLEIE', 'TO_OMSORGSPERSONER', 'LIVETS_SLUTTFASE', 'LANGVARIG_SYKDOM'],
            type: 'string'
        }
    },
    required: ['behandlingUuid', 'type'],
    type: 'object'
} as const;

export const $SykdomVurderingOversikt = {
    properties: {
        'harPerioderDerPleietrengendeErOver18år': {
            type: 'boolean'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        perioderSomKanVurderes: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        'pleietrengendesFødselsdato': {
            format: 'date',
            type: 'string'
        },
        resterendeValgfrieVurderingsperioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        resterendeVurderingsperioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        'søknadsperioderTilBehandling': {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        },
        vurderingselementer: {
            items: {
                '$ref': '#/components/schemas/SykdomVurderingOversiktElement'
            },
            maxItems: 1000,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $SykdomVurderingOversiktElement = {
    properties: {
        endretIDenneBehandlingen: {
            type: 'boolean'
        },
        erInnleggelsesperiode: {
            type: 'boolean'
        },
        gjelderForAnnenPart: {
            type: 'boolean'
        },
        'gjelderForSøker': {
            type: 'boolean'
        },
        id: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        },
        links: {
            items: {
                '$ref': '#/components/schemas/ResourceLink'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $SykdomVurderingVersjonDto = {
    properties: {
        dokumenter: {
            items: {
                '$ref': '#/components/schemas/SykdomDokumentDto'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        endretAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        endretTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        },
        tekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        versjon: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}-]+$',
            type: 'string'
        }
    },
    required: ['versjon'],
    type: 'object'
} as const;

export const $SystemNedeDto = {
    properties: {
        endepunkt: {
            maxLength: 500,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        feilmelding: {
            maxLength: 50000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        nedeFremTilTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        stackTrace: {
            maxLength: 50000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        systemNavn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{P}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['systemNavn'],
    type: 'object'
} as const;

export const $SøkeSakEllerBrukerDto = {
    properties: {
        searchString: {
            pattern: '^[a-zA-Z0-9]*$',
            type: 'string'
        }
    },
    required: ['searchString'],
    type: 'object'
} as const;

export const $SøknadDto = {
    properties: {
        angittePersoner: {
            items: {
                '$ref': '#/components/schemas/AngittPersonDto'
            },
            maxItems: 30,
            minItems: 0,
            type: 'array'
        },
        begrunnelseForSenInnsending: {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        manglendeVedlegg: {
            items: {
                '$ref': '#/components/schemas/ManglendeVedleggDto'
            },
            maxItems: 20,
            minItems: 0,
            type: 'array'
        },
        mottattDato: {
            format: 'date',
            type: 'string'
        },
        oppgittStartdato: {
            format: 'date',
            type: 'string'
        },
        oppgittTilknytning: {
            '$ref': '#/components/schemas/OppgittTilknytningDto'
        },
        soknadsdato: {
            format: 'date',
            type: 'string'
        },
        spraakkode: {
            '$ref': '#/components/schemas/Språkkode'
        },
        'søknadsperiode': {
            '$ref': '#/components/schemas/Periode'
        },
        tilleggsopplysninger: {
            maxLength: 5000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    required: ['mottattDato', 'oppgittStartdato', 'soknadsdato'],
    type: 'object'
} as const;

export const $SøknadsfristPeriodeDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        status: {
            enum: ['IKKE_OPPFYLT', 'IKKE_VURDERT', 'OPPFYLT', 'IKKE_RELEVANT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $SøknadsfristTilstandDto = {
    properties: {
        dokumentStatus: {
            items: {
                '$ref': '#/components/schemas/KravDokumentStatus'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['dokumentStatus'],
    type: 'object'
} as const;

export const $SøknadsopplysningerDto = {
    properties: {
        erNyoppstartet: {
            type: 'boolean'
        },
        oppgittInntekt: {
            type: 'number'
        },
        'oppgittÅrsinntekt': {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $SøknadsperiodeOgOppgittOpptjeningV2Dto = {
    properties: {
        'førSøkerPerioden': {
            '$ref': '#/components/schemas/OppgittOpptjeningDto'
        },
        'måneder': {
            items: {
                '$ref': '#/components/schemas/PeriodeMedSNOgFLDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    required: ['førSøkerPerioden', 'måneder'],
    type: 'object'
} as const;

export const $SøktPeriode = {
    properties: {
        arbeidsforholdRef: {
            format: 'uuid',
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Arbeidsgiver'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        type: {
            enum: ['AT', 'SN', 'FL', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'BA', 'IKKE_YRKESAKTIV', 'IKKE_YRKESAKTIV_UTEN_ERSTATNING', 'MIDL_INAKTIV', 'ANNET'],
            type: 'string'
        }
    },
    required: ['periode'],
    type: 'object'
} as const;

export const $TidligereUtbetalingDto = {
    properties: {
        erTildeltRefusjon: {
            type: 'boolean'
        },
        fom: {
            format: 'date',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['erTildeltRefusjon', 'fom'],
    type: 'object'
} as const;

export const $TilbakekrevingValgDto = {
    properties: {
        'erTilbakekrevingVilkårOppfylt': {
            type: 'boolean'
        },
        grunnerTilReduksjon: {
            type: 'boolean'
        },
        varseltekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{P}\\p{N}]+$',
            type: 'string'
        },
        videreBehandling: {
            enum: ['UDEFINIERT', 'OPPRETT_TILBAKEKREVING', 'IGNORER_TILBAKEKREVING', 'INNTREKK', 'TILBAKEKR_OPPDATER'],
            type: 'string'
        }
    },
    required: ['erTilbakekrevingVilkårOppfylt'],
    type: 'object'
} as const;

export const $TilkjentYtelse = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/TilkjentYtelsePeriodeV1'
            },
            maxItems: 700,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['perioder'],
    type: 'object'
} as const;

export const $TilkjentYtelseAndelV1 = {
    properties: {
        arbeidsforholdId: {
            maxLength: 100,
            minLength: 1,
            pattern: '^[\\p{Graph}\\s\\t\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        arbeidsgiverAktoerId: {
            maxLength: 13,
            minLength: 13,
            pattern: '^\\d*$',
            type: 'string'
        },
        arbeidsgiverOrgNr: {
            maxLength: 9,
            minLength: 9,
            pattern: '^\\d*$',
            type: 'string'
        },
        feriepenger: {
            items: {
                '$ref': '#/components/schemas/TilkjentYtelseFeriepengerV1'
            },
            maxItems: 3,
            minItems: 0,
            type: 'array'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        },
        satsBeloep: {
            format: 'int64',
            maximum: 3290,
            minimum: 1,
            type: 'integer'
        },
        satsType: {
            enum: ['DAG', 'DAG7', 'UKE', 'MND', 'AAR', 'ENG', 'AKTO', '-'],
            type: 'string'
        },
        utbetalesTilBruker: {
            type: 'boolean'
        },
        utbetalingsgrad: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        }
    },
    required: ['inntektskategori', 'satsBeloep', 'satsType', 'utbetalingsgrad'],
    type: 'object'
} as const;

export const $TilkjentYtelseBehandlingInfoV1 = {
    properties: {
        aktoerId: {
            maxLength: 50,
            minLength: 13,
            pattern: '^\\d{13}$',
            type: 'string'
        },
        ansvarligSaksbehandler: {
            maxLength: 50,
            minLength: 2,
            pattern: '^[\\s\\p{L}\\p{M}\\p{N}\\p{P}]+$',
            type: 'string'
        },
        behandlendeEnhet: {
            maxLength: 4,
            minLength: 4,
            pattern: '^\\d+$',
            type: 'string'
        },
        behandlingId: {
            type: 'string'
        },
        behandlingTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        doedsdatoBruker: {
            format: 'date',
            type: 'string'
        },
        forrigeBehandlingId: {
            type: 'string'
        },
        gjelderAdopsjon: {
            type: 'boolean'
        },
        saksnummer: {
            type: 'string'
        },
        vedtaksdato: {
            format: 'date',
            type: 'string'
        },
        ytelseType: {
            enum: ['DAG', 'SP', 'FRISINN', 'PSB', 'PPN', 'OMP', 'OLP', 'PS', 'AAP', 'ES', 'FP', 'SVP', 'EF', '-'],
            type: 'string'
        }
    },
    required: ['aktoerId', 'behandlingId', 'behandlingTidspunkt', 'saksnummer', 'vedtaksdato', 'ytelseType'],
    type: 'object'
} as const;

export const $TilkjentYtelseFeriepengerV1 = {
    properties: {
        beloep: {
            format: 'int64',
            maximum: 100000,
            minimum: 0,
            type: 'integer'
        },
        opptjeningsaar: {
            format: 'int32',
            maximum: 2100,
            minimum: 2010,
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const $TilkjentYtelseOppdrag = {
    properties: {
        behandlingsinfo: {
            '$ref': '#/components/schemas/TilkjentYtelseBehandlingInfoV1'
        },
        inntrekkBeslutning: {
            '$ref': '#/components/schemas/InntrekkBeslutning'
        },
        tilkjentYtelse: {
            '$ref': '#/components/schemas/TilkjentYtelse'
        }
    },
    required: ['behandlingsinfo', 'inntrekkBeslutning', 'tilkjentYtelse'],
    type: 'object'
} as const;

export const $TilkjentYtelsePeriodeV1 = {
    properties: {
        andeler: {
            items: {
                '$ref': '#/components/schemas/TilkjentYtelseAndelV1'
            },
            maxItems: 100,
            minItems: 1,
            type: 'array'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['andeler', 'periode'],
    type: 'object'
} as const;

export const $TotrinnsArbeidsforholdDto = {
    properties: {
        arbeidsforholdHandlingType: {
            enum: ['-', 'BRUK', 'LAGT_TIL_AV_SAKSBEHANDLER', 'BASERT_PÅ_INNTEKTSMELDING', 'BRUK_UTEN_INNTEKTSMELDING', 'IKKE_BRUK', 'NYTT_ARBEIDSFORHOLD', 'SLÅTT_SAMMEN_MED_ANNET', 'BRUK_MED_OVERSTYRT_PERIODE', 'INNTEKT_IKKE_MED_I_BG'],
            type: 'string'
        },
        arbeidsforholdId: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\\\p{L}\\p{N}]+$',
            type: 'string'
        },
        brukPermisjon: {
            type: 'boolean'
        },
        navn: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        organisasjonsnummer: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[1-9][0-9\\-.]{6,20}+$',
            type: 'string'
        }
    },
    required: ['navn'],
    type: 'object'
} as const;

export const $TotrinnsBeregningDto = {
    properties: {
        faktaOmBeregningTilfeller: {
            items: {
                enum: ['VURDER_TIDSBEGRENSET_ARBEIDSFORHOLD', 'VURDER_SN_NY_I_ARBEIDSLIVET', 'VURDER_NYOPPSTARTET_FL', 'FASTSETT_MAANEDSINNTEKT_FL', 'FASTSETT_BG_ARBEIDSTAKER_UTEN_INNTEKTSMELDING', 'VURDER_LØNNSENDRING', 'FASTSETT_MÅNEDSLØNN_ARBEIDSTAKER_UTEN_INNTEKTSMELDING', 'VURDER_AT_OG_FL_I_SAMME_ORGANISASJON', 'FASTSETT_BESTEBEREGNING_FØDENDE_KVINNE', 'VURDER_ETTERLØNN_SLUTTPAKKE', 'FASTSETT_ETTERLØNN_SLUTTPAKKE', 'VURDER_MOTTAR_YTELSE', 'VURDER_BESTEBEREGNING', 'VURDER_MILITÆR_SIVILTJENESTE', 'VURDER_REFUSJONSKRAV_SOM_HAR_KOMMET_FOR_SENT', 'FASTSETT_BG_KUN_YTELSE', 'TILSTØTENDE_YTELSE', 'FASTSETT_ENDRET_BEREGNINGSGRUNNLAG', 'UDEFINERT'],
                maxLength: 100,
                minLength: 0,
                type: 'string'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array'
        },
        fastsattVarigEndring: {
            type: 'boolean'
        },
        fastsattVarigEndringNaering: {
            type: 'boolean'
        },
        'skjæringstidspunkt': {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $TotrinnskontrollAksjonspunkterDto = {
    properties: {
        aksjonspunktKode: {
            maxLength: 10,
            minLength: 0,
            pattern: '^[\\p{Alnum}]+$',
            type: 'string'
        },
        arbeidsforholdDtos: {
            items: {
                '$ref': '#/components/schemas/TotrinnsArbeidsforholdDto'
            },
            maxItems: 200,
            minItems: 0,
            type: 'array'
        },
        beregningDto: {
            '$ref': '#/components/schemas/TotrinnsBeregningDto'
        },
        beregningDtoer: {
            items: {
                '$ref': '#/components/schemas/TotrinnsBeregningDto'
            },
            type: 'array'
        },
        besluttersBegrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        totrinnskontrollGodkjent: {
            type: 'boolean'
        },
        vurderPaNyttArsaker: {
            items: {
                '$ref': '#/components/schemas/TotrinnskontrollVurderÅrsak'
            },
            maxItems: 100,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        }
    },
    type: 'object'
} as const;

export const $TotrinnskontrollSkjermlenkeContextDto = {
    properties: {
        skjermlenkeType: {
            maxLength: 50,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\s\\-]+$',
            type: 'string'
        },
        totrinnskontrollAksjonspunkter: {
            items: {
                '$ref': '#/components/schemas/TotrinnskontrollAksjonspunkterDto'
            },
            maxItems: 50,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['skjermlenkeType'],
    type: 'object'
} as const;

export const $TotrinnskontrollVurderÅrsak = {
    properties: {
        kode: {
            maxLength: 10,
            minLength: 0,
            pattern: '^[\\p{Alnum}]+$',
            type: 'string'
        },
        navn: {
            maxLength: 10,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}\\p{P}\\p{M}\\p{Sc}]+$',
            type: 'string'
        }
    },
    required: ['kode', 'navn'],
    type: 'object'
} as const;

export const $UidentifisertRammevedtak = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                fritekst: {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $UtbetalingDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        inntektsKilde: {
            enum: ['-', 'INNTEKT_OPPTJENING', 'INNTEKT_BEREGNING', 'INNTEKT_SAMMENLIGNING', 'SIGRUN', 'VANLIG'],
            type: 'string'
        },
        utbetalingsPoster: {
            items: {
                '$ref': '#/components/schemas/UtbetalingsPostDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['inntektsKilde', 'utbetalingsPoster'],
    type: 'object'
} as const;

export const $UtbetalingsPostDto = {
    properties: {
        'beløp': {
            type: 'number'
        },
        inntektYtelseType: {
            enum: ['AAP', 'DAGPENGER', 'FORELDREPENGER', 'SVANGERSKAPSPENGER', 'SYKEPENGER', 'OMSORGSPENGER', 'OPPLÆRINGSPENGER', 'PLEIEPENGER', 'OVERGANGSSTØNAD_ENSLIG', 'VENTELØNN', 'FERIEPENGER_FORELDREPENGER', 'FERIEPENGER_SVANGERSKAPSPENGER', 'FERIEPENGER_OMSORGSPENGER', 'FERIEPENGER_OPPLÆRINGSPENGER', 'FERIEPENGER_PLEIEPENGER', 'FERIEPENGER_SYKEPENGER', 'FERIETILLEGG_DAGPENGER', 'KVALIFISERINGSSTØNAD', 'FORELDREPENGER_NÆRING', 'SVANGERSKAPSPENGER_NÆRING', 'SYKEPENGER_NÆRING', 'OMSORGSPENGER_NÆRING', 'OPPLÆRINGSPENGER_NÆRING', 'PLEIEPENGER_NÆRING', 'DAGPENGER_NÆRING', 'ANNET', 'VEDERLAG', 'LOTT_KUN_TRYGDEAVGIFT', 'KOMPENSASJON_FOR_TAPT_PERSONINNTEKT'],
            type: 'string'
        },
        inntektspostType: {
            enum: ['-', 'LØNN', 'YTELSE', 'VANLIG', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'NÆRING_FISKE_FANGST_FAMBARNEHAGE'],
            type: 'string'
        },
        'lønnsinntektBeskrivelse': {
            enum: ['KOMMUNAL_OMSORGSLOENN_OG_FOSTERHJEMSGODTGJOERELSE', '-'],
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        skattAvgiftType: {
            enum: ['SÆRSKILT_FRADRAG_FOR_SJØFOLK', 'SVALBARD', 'SKATTEFRI_ORGANISASJON', 'NETTOLØNN_FOR_SJØFOLK', 'NETTOLØNN', 'KILDESKATT_PÅ_PENSJONER', 'JAN_MAYEN_OG_BILANDENE', '-'],
            type: 'string'
        }
    },
    required: ['inntektspostType', 'periode'],
    type: 'object'
} as const;

export const $UtbetalingsgradPrAktivitetDto = {
    properties: {
        periodeMedUtbetalingsgrad: {
            items: {
                '$ref': '#/components/schemas/PeriodeMedUtbetalingsgradDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        },
        utbetalingsgradArbeidsforholdDto: {
            '$ref': '#/components/schemas/AktivitetDto'
        }
    },
    required: ['periodeMedUtbetalingsgrad', 'utbetalingsgradArbeidsforholdDto'],
    type: 'object'
} as const;

export const $Utbetalingsgrader = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/Arbeidsforhold'
        },
        faktiskArbeidstid: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        normalArbeidstid: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        tilkommet: {
            type: 'boolean'
        },
        utbetalingsgrad: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $UtenlandskBarn = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                'barnetsFødselsdato': {
                    format: 'date',
                    type: 'string'
                },
                'fødselsdato': {
                    type: 'string'
                },
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $Utenlandsopphold = {
    properties: {
        'erEøsLand': {
            type: 'boolean'
        },
        landkode: {
            type: 'string'
        },
        'årsak': {
            enum: ['BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING', 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD', 'INGEN'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UtenlandsoppholdDto = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/UtenlandsoppholdPeriodeDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $UtenlandsoppholdPeriodeDto = {
    properties: {
        landkode: {
            '$ref': '#/components/schemas/Landkoder'
        },
        periode: {
            maxLength: 2147483647,
            minLength: 0,
            type: 'string'
        },
        region: {
            enum: ['NORDEN', 'EOS', 'ANNET', '-'],
            type: 'string'
        },
        'årsak': {
            enum: ['BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING', 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD', 'INGEN'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UtlandsoppholdDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        landNavn: {
            maxLength: 1000,
            minLength: 0,
            pattern: '^[\\p{Alnum}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'landNavn', 'tom'],
    type: 'object'
} as const;

export const $UtsettelsePeriode = {
    properties: {
        indexKey: {
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/DatoIntervallEntitet'
        },
        'årsak': {
            enum: ['ARBEID', 'LOVBESTEMT_FERIE', 'SYKDOM', 'INSTITUSJONSOPPHOLD_SØKER', 'INSTITUSJONSOPPHOLD_BARNET', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UttakAktivitetPeriodeDto = {
    properties: {
        periode: {
            type: 'string'
        },
        type: {
            enum: ['AT', 'SN', 'FL', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'BA', 'IKKE_YRKESAKTIV', 'IKKE_YRKESAKTIV_UTEN_ERSTATNING', 'MIDL_INAKTIV', 'ANNET'],
            type: 'string'
        }
    },
    required: ['periode', 'type'],
    type: 'object'
} as const;

export const $UttakArbeidsforhold = {
    properties: {
        'aktørId': {
            type: 'string'
        },
        arbeidsforholdId: {
            maxLength: 40,
            minLength: 0,
            pattern: '^[\\p{Alnum}_\\.\\-]+$',
            type: 'string'
        },
        organisasjonsnummer: {
            maxLength: 20,
            minLength: 0,
            pattern: '^\\d+$',
            type: 'string'
        },
        type: {
            enum: ['AT', 'SN', 'FL', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'BA', 'IKKE_YRKESAKTIV', 'IKKE_YRKESAKTIV_UTEN_ERSTATNING', 'MIDL_INAKTIV', 'ANNET'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $UttakDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        utbetalingsgrad: {
            exclusiveMaximum: false,
            exclusiveMinimum: false,
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        utfall: {
            enum: ['INNVILGET', 'AVSLÅTT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['periode', 'utbetalingsgrad', 'utfall'],
    type: 'object'
} as const;

export const $Uttaksperiode = {
    properties: {
        'avvikImSøknad': {
            enum: ['SØKNAD_UTEN_MATCHENDE_IM', 'IM_REFUSJONSKRAV_TRUMFER_SØKNAD', 'INGEN_AVVIK', 'UDEFINERT'],
            type: 'string'
        },
        bekreftet: {
            enum: ['UBEKREFTET', 'SYSTEMBEKREFTET', 'MANUELTBEKREFTET'],
            type: 'string'
        },
        'delvisFravær': {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        'fraværÅrsak': {
            enum: ['STENGT_SKOLE_ELLER_BARNEHAGE', 'SMITTEVERNHENSYN', 'ORDINÆRT_FRAVÆR', 'UDEFINERT'],
            type: 'string'
        },
        hjemler: {
            items: {
                enum: ['FTRL_9_3__1', 'FTRL_9_5__1', 'FTRL_9_5', 'FTRL_9_5__2', 'FTRL_9_5__3', 'FTRL_9_6__1', 'FTRL_9_6__2_OG_4', 'FTRL_9_6__3', 'FTRL_9_6__5', 'FTRL_9_6__6', 'FTRL_9_8_JF_8_10__3', 'FTRL_9_7__1_3', 'FTRL_9_7__4', 'FTRL_9_8__3', 'FTRL_9_9__1', 'FTRL_25_16', 'COVID19_1_2', 'COVID19_4_3', 'COVID19_4_1__2', 'COVID19_4_1__2_OG_3', 'COVID19_4_2', 'COVID19_4_3__1', 'COVID19_4_3__2'],
                type: 'string'
            },
            type: 'array'
        },
        mottattTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        'nøkkeltall': {
            '$ref': '#/components/schemas/Nøkkeltall'
        },
        omsorgenForManueltAvklartIk9: {
            type: 'boolean'
        },
        opprinneligBehandlingUuid: {
            format: 'uuid',
            type: 'string'
        },
        periode: {
            type: 'string'
        },
        periodetype: {
            enum: ['NY', 'REVURDERT'],
            type: 'string'
        },
        refusjonTilArbeidsgiver: {
            type: 'boolean'
        },
        'søknadÅrsak': {
            enum: ['ARBEIDSGIVER_KONKURS', 'NYOPPSTARTET_HOS_ARBEIDSGIVER', 'KONFLIKT_MED_ARBEIDSGIVER', 'UDEFINERT'],
            type: 'string'
        },
        utbetalingsgrad: {
            type: 'number'
        },
        utfall: {
            enum: ['INNVILGET', 'AVSLÅTT', 'UAVKLART'],
            type: 'string'
        },
        'vurderteVilkår': {
            '$ref': '#/components/schemas/VurderteVilkår'
        }
    },
    type: 'object'
} as const;

export const $UttaksperiodeInfo = {
    properties: {
        annenPart: {
            enum: ['ALENE', 'MED_ANDRE', 'VENTER_ANDRE'],
            type: 'string'
        },
        beredskap: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT'],
            type: 'string'
        },
        endringsstatus: {
            enum: ['NY', 'ENDRET', 'UENDRET', 'UENDRET_RESULTAT'],
            type: 'string'
        },
        graderingMotTilsyn: {
            '$ref': '#/components/schemas/GraderingMotTilsyn'
        },
        'inngangsvilkår': {
            additionalProperties: {
                enum: ['OPPFYLT', 'IKKE_OPPFYLT'],
                type: 'string'
            },
            type: 'object'
        },
        kildeBehandlingUUID: {
            type: 'string'
        },
        knekkpunktTyper: {
            items: {
                enum: ['LOVBESTEMT_FERIE', 'PLEIEBEHOV', 'TILSYNSPERIODE', 'BEREDSKAPSPERIODE', 'NATTEVÅKSPERIODE', 'INNGANGSVILKÅR_IKKE_OPPFYLT', 'ANNEN_PARTS_UTTAK', 'FORRIGE_UTTAKPLAN', 'TRUKKET_UTTAK', 'ARBEID', 'SØKERS_DØDSFALL', 'BARNETS_DØDSFALL', 'BARNETS_DØDSFALL_SLUTT_PÅ_RETT', 'SØKERS_ALDER', 'KRAVPRIORITETSPERIODE', 'UTENLANDSOPPHOLD', 'START_SPESIALHÅNDTERING_TILKOMMEN', 'OVERSTYRT_INPUT', 'INNTEKTSGRADERING'],
                type: 'string'
            },
            type: 'array',
            uniqueItems: true
        },
        manueltOverstyrt: {
            type: 'boolean'
        },
        'nattevåk': {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT'],
            type: 'string'
        },
        oppgittTilsyn: {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        pleiebehov: {
            type: 'number'
        },
        'søkersTapteArbeidstid': {
            type: 'number'
        },
        'søkersTapteTimer': {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        utbetalingsgrader: {
            items: {
                '$ref': '#/components/schemas/Utbetalingsgrader'
            },
            type: 'array'
        },
        utenlandsopphold: {
            '$ref': '#/components/schemas/Utenlandsopphold'
        },
        'utenlandsoppholdUtenÅrsak': {
            type: 'boolean'
        },
        utfall: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT'],
            type: 'string'
        },
        uttaksgrad: {
            type: 'number'
        },
        uttaksgradMedReduksjonGrunnetInntektsgradering: {
            type: 'number'
        },
        uttaksgradUtenReduksjonGrunnetInntektsgradering: {
            type: 'number'
        },
        'årsaker': {
            items: {
                enum: ['GRADERT_MOT_TILSYN', 'AVKORTET_MOT_INNTEKT', 'OVERSTYRT_UTTAKSGRAD', 'AVKORTET_MOT_SØKERS_ØNSKE', 'AVKORTET_MOT_KVOTE', 'OPPFYLT_PGA_BARNETS_DØDSFALL', 'OPPFYLT_PGA_BARNETS_DØDSFALL_6_UKER', 'OPPFYLT_PGA_BARNETS_DØDSFALL_12_UKER', 'FULL_DEKNING', 'UTENOM_PLEIEBEHOV', 'FOR_LAV_REST_PGA_ETABLERT_TILSYN', 'FOR_LAV_REST_PGA_ANDRE_SØKERE', 'FOR_LAV_REST_PGA_ETABLERT_TILSYN_OG_ANDRE_SØKERE', 'FOR_LAV_TAPT_ARBEIDSTID', 'FOR_LAV_ØNSKET_UTTAKSGRAD', 'LOVBESTEMT_FERIE', 'BARNETS_DØDSFALL', 'SØKERS_DØDSFALL', 'INNGANGSVILKÅR_IKKE_OPPFYLT', 'FOR_LAV_INNTEKT', 'FOR_MANGE_DAGER_UTENLANDSOPPHOLD', 'MAKS_DAGER_OVERSTEGET', 'OVERSTYRT_UTTAK_AVSLAG'],
                type: 'string'
            },
            type: 'array',
            uniqueItems: true
        }
    },
    type: 'object'
} as const;

export const $Uttaksplan = {
    properties: {
        commitId: {
            type: 'string'
        },
        kvoteInfo: {
            '$ref': '#/components/schemas/KvoteInfo'
        },
        perioder: {
            additionalProperties: {
                '$ref': '#/components/schemas/UttaksperiodeInfo'
            },
            type: 'object'
        },
        trukketUttak: {
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $UttaksplanMedUtsattePerioder = {
    properties: {
        perioderTilVurdering: {
            items: {
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        simulertUttaksplan: {
            '$ref': '#/components/schemas/Uttaksplan'
        },
        utsattePerioder: {
            items: {
                maxLength: 2147483647,
                minLength: 0,
                type: 'string'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        uttaksplan: {
            '$ref': '#/components/schemas/Uttaksplan'
        },
        virkningsdatoUttakNyeRegler: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['simulertUttaksplan', 'uttaksplan'],
    type: 'object'
} as const;

export const $UttrekkPerson = {
    properties: {
        antallDagerIgjen: {
            type: 'number'
        },
        antallForbrukteDager: {
            type: 'number'
        },
        saker: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        totaltAntallDager: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $UtvidetRett = {
    allOf: [
        {
            '$ref': '#/components/schemas/Rammevedtak'
        },
        {
            properties: {
                gyldigFraOgMed: {
                    format: 'date',
                    type: 'string'
                },
                gyldigTilOgMed: {
                    format: 'date',
                    type: 'string'
                },
                lengde: {
                    properties: {
                        nano: {
                            format: 'int32',
                            type: 'integer'
                        },
                        negative: {
                            type: 'boolean'
                        },
                        positive: {
                            type: 'boolean'
                        },
                        seconds: {
                            format: 'int64',
                            type: 'integer'
                        },
                        units: {
                            items: {
                                properties: {
                                    dateBased: {
                                        type: 'boolean'
                                    },
                                    duration: {
                                        properties: {
                                            nano: {
                                                format: 'int32',
                                                type: 'integer'
                                            },
                                            negative: {
                                                type: 'boolean'
                                            },
                                            positive: {
                                                type: 'boolean'
                                            },
                                            seconds: {
                                                format: 'int64',
                                                type: 'integer'
                                            },
                                            zero: {
                                                type: 'boolean'
                                            }
                                        },
                                        type: 'object'
                                    },
                                    durationEstimated: {
                                        type: 'boolean'
                                    },
                                    timeBased: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            type: 'array'
                        },
                        zero: {
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                utvidetRettFor: {
                    type: 'string'
                },
                vedtatt: {
                    format: 'date',
                    type: 'string'
                }
            },
            type: 'object'
        }
    ],
    type: 'object'
} as const;

export const $VarseltekstDto = {
    properties: {
        varseltekst: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{P}\\p{N}]+$',
            type: 'string'
        }
    },
    required: ['varseltekst'],
    type: 'object'
} as const;

export const $VilkårDto = {
    properties: {
        avslagKode: {
            pattern: '^[\\p{Alnum}\\p{Space}]+$',
            type: 'string'
        },
        evaluering: {
            maxLength: 1000000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            readOnly: true,
            type: 'string'
        },
        input: {
            maxLength: 1000000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            readOnly: true,
            type: 'string'
        },
        lovReferanse: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{P}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        merknadParametere: {
            additionalProperties: {
                maxLength: 20,
                minLength: 0,
                type: 'string'
            },
            type: 'object'
        },
        overstyrbar: {
            type: 'boolean'
        },
        vilkarStatus: {
            enum: ['IKKE_OPPFYLT', 'IKKE_VURDERT', 'OPPFYLT', 'IKKE_RELEVANT', 'UDEFINERT'],
            type: 'string'
        },
        vilkarType: {
            enum: ['K9_VILKÅRET', 'MEDLEMSKAPSVILKÅRET', 'OMSORGEN_FOR', 'ALDERSVILKÅR', 'ALDERSVILKÅR_BARN', 'MEDISINSKEVILKÅR_UNDER_18_ÅR', 'MEDISINSKEVILKÅR_18_ÅR', 'SØKNADSFRIST', 'SØKERSOPPLYSNINGSPLIKT', 'OPPTJENINGSPERIODEVILKÅR', 'OPPTJENINGSVILKÅRET', 'BEREGNINGSGRUNNLAGVILKÅR', 'I_LIVETS_SLUTTFASE', 'NØDVENDIG_OPPLÆRING', 'GODKJENT_OPPLÆRINGSINSTITUSJON', 'GJENNOMGÅ_OPPLÆRING', 'LANGVARIG_SYKDOM', 'UTVIDETRETT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['vilkarStatus', 'vilkarType'],
    type: 'object'
} as const;

export const $VilkårMedPerioderDto = {
    properties: {
        lovReferanse: {
            maxLength: 100,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{P}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            type: 'string'
        },
        overstyrbar: {
            type: 'boolean'
        },
        perioder: {
            items: {
                '$ref': '#/components/schemas/VilkårPeriodeDto'
            },
            type: 'array'
        },
        vilkarType: {
            enum: ['K9_VILKÅRET', 'MEDLEMSKAPSVILKÅRET', 'OMSORGEN_FOR', 'ALDERSVILKÅR', 'ALDERSVILKÅR_BARN', 'MEDISINSKEVILKÅR_UNDER_18_ÅR', 'MEDISINSKEVILKÅR_18_ÅR', 'SØKNADSFRIST', 'SØKERSOPPLYSNINGSPLIKT', 'OPPTJENINGSPERIODEVILKÅR', 'OPPTJENINGSVILKÅRET', 'BEREGNINGSGRUNNLAGVILKÅR', 'I_LIVETS_SLUTTFASE', 'NØDVENDIG_OPPLÆRING', 'GODKJENT_OPPLÆRINGSINSTITUSJON', 'GJENNOMGÅ_OPPLÆRING', 'LANGVARIG_SYKDOM', 'UTVIDETRETT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['vilkarType'],
    type: 'object'
} as const;

export const $VilkårPeriodeDto = {
    properties: {
        avslagKode: {
            pattern: '^[\\p{Alnum}\\p{Space}]+$',
            type: 'string'
        },
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        evaluering: {
            maxLength: 1000000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            readOnly: true,
            type: 'string'
        },
        input: {
            maxLength: 1000000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{Sc}\\p{M}\\p{N}]+$',
            readOnly: true,
            type: 'string'
        },
        merknad: {
            enum: ['VM_1001', 'VM_1002', 'VM_1003', 'VM_1004', 'VM_1005', 'VM_1006', 'VM_1007', 'VM_1019', 'VM_1020', 'VM_1021', 'VM_1022', 'VM_1023', 'VM_1024', 'VM_1025', 'VM_1026', 'VM_1027', 'VM_1028', 'VM_1029', 'VM_1099', 'VM_1035', 'VM_1041', 'VM_1042', 'VM_1043', 'VM_1051', 'VM_1067', 'VM_1068', 'VM_1069', 'VM_1071', 'VM_1080', 'VM_1081', 'VM_1101', 'VM_1102', 'VM_5007', 'VM_7001', 'VM_7002', 'VM_7003', 'VM_7004', 'VM_7006', 'VM_7847_A', 'VM_7847_B', 'VM_8000', 'VM_8001', 'VM_8002', 'VM_9002', 'VM_9013', 'VM_9015', 'UDEFINERT'],
            type: 'string'
        },
        merknadParametere: {
            additionalProperties: {
                maxLength: 20,
                minLength: 0,
                type: 'string'
            },
            type: 'object'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        vilkarStatus: {
            enum: ['IKKE_OPPFYLT', 'IKKE_VURDERT', 'OPPFYLT', 'IKKE_RELEVANT', 'UDEFINERT'],
            type: 'string'
        },
        vurderesIBehandlingen: {
            type: 'boolean'
        },
        vurdersIBehandlingen: {
            type: 'boolean'
        }
    },
    required: ['periode', 'vilkarStatus'],
    type: 'object'
} as const;

export const $VilkårResultatContainer = {
    properties: {
        'vilkårTidslinje': {
            '$ref': '#/components/schemas/LocalDateTimelineVilkårUtfallSamlet'
        }
    },
    type: 'object'
} as const;

export const $VilkårResultatDto = {
    properties: {
        'avslagsårsak': {
            enum: ['SØKT_FOR_SENT', 'MANGLENDE_DOKUMENTASJON', 'SØKER_ER_IKKE_MEDLEM', 'SØKER_ER_UTVANDRET', 'SØKER_HAR_IKKE_LOVLIG_OPPHOLD', 'SØKER_HAR_IKKE_OPPHOLDSRETT', 'SØKER_ER_IKKE_BOSATT', 'IKKE_TILSTREKKELIG_OPPTJENING', 'FYLLER_IKKE_ORDINÆRE_OPPTJENINGSREGLER', 'FOR_LAVT_BEREGNINGSGRUNNLAG', 'MANGLENDE_INNTEKTSGRUNNLAG', 'FOR_LAVT_BEREGNINGSGRUNNLAG_8_47', 'SØKT_FRILANS_UTEN_FRILANS_INNTEKT', 'AVKORTET_GRUNNET_ANNEN_INNTEKT', 'INGEN_STØNADSDAGER_I_SØKNADSPERIODEN', 'IKKE_DOKUMENTERT_SYKDOM_SKADE_ELLER_LYTE', 'DOKUMENTASJON_IKKE_FRA_RETT_ORGAN', 'IKKE_BEHOV_FOR_KONTINUERLIG_TILSYN_OG_PLEIE_PÅ_BAKGRUNN_AV_SYKDOM', 'IKKE_DOKUMENTERT_OMSORGEN_FOR', 'IKKE_UTVIDETRETT', 'IKKE_UTVIDETRETT_IKKE_KRONISK_SYK', 'IKKE_UTVIDETRETT_IKKE_ØKT_RISIKO_FRAVÆR', 'IKKE_MIDLERTIDIG_ALENE_VARIGHET_UNDER_SEKS_MÅN', 'IKKE_MIDLERTIDIG_ALENE_REGNES_IKKE_SOM_Å_HA_ALENEOMSORG', 'IKKE_MIDLERTIDIG_ALENE', 'IKKE_GRUNNLAG_FOR_ALENEOMSORG', 'IKKE_GRUNNLAG_FOR_ALENEOMSORG_FORELDRE_BOR_SAMMEN', 'IKKE_GRUNNLAG_FOR_ALENEOMSORG_DELT_BOSTED', 'PLEIETRENGENDE_INNLAGT_I_STEDET_FOR_HJEMME', 'IKKE_I_LIVETS_SLUTTFASE', 'IKKE_NØDVENDIG_OPPLÆRING', 'IKKE_GODKJENT_INSTITUSJON', 'IKKE_GJENNOMGÅTT_OPPLÆRING', 'IKKE_PÅ_REISE', 'SØKER_OVER_HØYESTE_ALDER', 'SØKER_HAR_AVGÅTT_MED_DØDEN', 'BARN_OVER_HØYESTE_ALDER', 'INGEN_BEREGNINGSREGLER_TILGJENGELIG_I_LØSNINGEN', 'UDEFINERT'],
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        utfall: {
            enum: ['IKKE_OPPFYLT', 'IKKE_VURDERT', 'OPPFYLT', 'IKKE_RELEVANT', 'UDEFINERT'],
            type: 'string'
        }
    },
    required: ['periode', 'utfall'],
    type: 'object'
} as const;

export const $VurderBesteberegningDto = {
    properties: {
        skalHaBesteberegning: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $VurderInntektsforholdPeriodeDto = {
    properties: {
        fom: {
            format: 'date',
            type: 'string'
        },
        inntektsforholdListe: {
            items: {
                '$ref': '#/components/schemas/InntektsforholdDto'
            },
            maxItems: 50,
            minItems: 0,
            type: 'array'
        },
        tom: {
            format: 'date',
            type: 'string'
        }
    },
    required: ['fom', 'inntektsforholdListe', 'tom'],
    type: 'object'
} as const;

export const $VurderMilitærDto = {
    properties: {
        harMilitaer: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $VurderMottarYtelseDto = {
    properties: {
        arbeidstakerAndelerUtenIM: {
            items: {
                '$ref': '#/components/schemas/ArbeidstakerUtenInntektsmeldingAndelDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        erFrilans: {
            type: 'boolean'
        },
        frilansInntektPrMnd: {
            type: 'number'
        },
        frilansMottarYtelse: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $VurderNyttInntektsforholdDto = {
    properties: {
        'harMottattOmsorgsstønadEllerFosterhjemsgodtgjørelse': {
            type: 'boolean'
        },
        vurderInntektsforholdPerioder: {
            items: {
                '$ref': '#/components/schemas/VurderInntektsforholdPeriodeDto'
            },
            maxItems: 50,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['harMottattOmsorgsstønadEllerFosterhjemsgodtgjørelse', 'vurderInntektsforholdPerioder'],
    type: 'object'
} as const;

export const $VurderRepresentererStortingetDto = {
    properties: {
        representererStortinget: {
            type: 'boolean'
        },
        stortingsperiodeFom: {
            format: 'date',
            type: 'string'
        },
        stortingsperiodeTom: {
            format: 'date',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $VurderingDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        id: {
            format: 'int64',
            maximum: 9223372036854776000,
            minimum: 0,
            type: 'integer'
        },
        kilde: {
            enum: ['SØKER', 'ANDRE'],
            type: 'string'
        },
        opprettetAv: {
            maxLength: 20,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{L}\\p{N}]+$',
            type: 'string'
        },
        opprettetTidspunkt: {
            format: 'date-time',
            type: 'string'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        resultat: {
            enum: ['OPPFYLT', 'IKKE_OPPFYLT', 'IKKE_VURDERT'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $VurderingPerPeriode = {
    properties: {
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/VurderingPåPeriode'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['vurderinger'],
    type: 'object'
} as const;

export const $VurderingPåPeriode = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        vurderinger: {
            items: {
                '$ref': '#/components/schemas/InntektsmeldingVurdering'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['periode', 'vurderinger'],
    type: 'object'
} as const;

export const $VurderingRettPleiepengerVedDødDto = {
    properties: {
        begrunnelse: {
            maxLength: 4000,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        },
        'rettVedDødType': {
            enum: ['RETT_6_UKER', 'RETT_12_UKER'],
            type: 'string'
        },
        vurdering: {
            maxLength: 4096,
            minLength: 0,
            pattern: '^[\\p{Graph}\\p{Space}\\p{Sc}\\p{L}\\p{M}\\p{N}§]+$',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $VurderteVilkår = {
    properties: {
        'vilkår': {
            additionalProperties: {
                enum: ['INNVILGET', 'AVSLÅTT', 'UAVKLART'],
                type: 'string'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $YrkesaktivitetDto = {
    properties: {
        abakusReferanse: {
            '$ref': '#/components/schemas/InternArbeidsforholdRefDto'
        },
        aktivitetsAvtaler: {
            items: {
                '$ref': '#/components/schemas/AktivitetsAvtaleDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        arbeidType: {
            enum: ['ETTERLØNN_SLUTTPAKKE', 'FORENKLET_OPPGJØRSORDNING', 'FRILANSER', 'FRILANSER_OPPDRAGSTAKER', 'LØNN_UNDER_UTDANNING', 'MARITIMT_ARBEIDSFORHOLD', 'MILITÆR_ELLER_SIVILTJENESTE', 'ORDINÆRT_ARBEIDSFORHOLD', 'PENSJON_OG_ANDRE_TYPER_YTELSER_UTEN_ANSETTELSESFORHOLD', 'NÆRING', 'UTENLANDSK_ARBEIDSFORHOLD', 'VENTELØNN_VARTPENGER', 'VANLIG', '-'],
            type: 'string'
        },
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        permisjoner: {
            items: {
                '$ref': '#/components/schemas/PermisjonDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    required: ['arbeidType'],
    type: 'object'
} as const;

export const $YtelseAnvistDto = {
    properties: {
        anvistPeriode: {
            '$ref': '#/components/schemas/Periode'
        },
        anvisteAndeler: {
            items: {
                '$ref': '#/components/schemas/AnvistAndel'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'beløp': {
            type: 'number'
        },
        dagsats: {
            type: 'number'
        },
        utbetalingsgradProsent: {
            type: 'number'
        }
    },
    type: 'object'
} as const;

export const $YtelseDto = {
    properties: {
        periode: {
            '$ref': '#/components/schemas/Periode'
        },
        relatertYtelseType: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', '-'],
            type: 'string'
        },
        vedtaksDagsats: {
            type: 'number'
        },
        ytelseAnvist: {
            items: {
                '$ref': '#/components/schemas/YtelseAnvistDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array',
            uniqueItems: true
        },
        ytelseGrunnlag: {
            '$ref': '#/components/schemas/YtelseGrunnlagDto'
        }
    },
    required: ['periode', 'relatertYtelseType'],
    type: 'object'
} as const;

export const $YtelseFordelingDto = {
    properties: {
        arbeidsgiver: {
            '$ref': '#/components/schemas/Aktør'
        },
        'beløp': {
            type: 'number'
        },
        erRefusjon: {
            type: 'boolean'
        },
        hyppighet: {
            enum: ['DAGLG', 'UKNLG', '14DLG', 'MNDLG', 'AARLG', 'INNFS', 'PREMGR', '-'],
            type: 'string'
        },
        inntektPeriodeType: {
            enum: ['DAGLG', 'UKNLG', '14DLG', 'MNDLG', 'AARLG', 'INNFS', 'PREMGR', '-'],
            type: 'string'
        }
    },
    required: ['beløp', 'inntektPeriodeType'],
    type: 'object'
} as const;

export const $YtelseGrunnlagDto = {
    properties: {
        arbeidskategori: {
            enum: ['FISKER', 'ARBEIDSTAKER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'KOMBINASJON_ARBEIDSTAKER_OG_SELVSTENDIG_NÆRINGSDRIVENDE', 'SJØMANN', 'JORDBRUKER', 'DAGPENGER', 'INAKTIV', 'KOMBINASJON_ARBEIDSTAKER_OG_JORDBRUKER', 'KOMBINASJON_ARBEIDSTAKER_OG_FISKER', 'FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_DAGPENGER', 'DAGMAMMA', 'UGYLDIG', '-'],
            type: 'string'
        },
        fordeling: {
            items: {
                '$ref': '#/components/schemas/YtelseFordelingDto'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $Ytelseandel = {
    properties: {
        aktivitetStatus: {
            enum: ['MIDL_INAKTIV', 'AAP', 'AT', 'DP', 'SP_AV_DP', 'PSB_AV_DP', 'FL', 'MS', 'SN', 'AT_FL', 'AT_SN', 'FL_SN', 'AT_FL_SN', 'BA', 'KUN_YTELSE', 'TY', 'VENTELØNN_VARTPENGER', '-'],
            type: 'string'
        },
        arbeidskategori: {
            enum: ['FISKER', 'ARBEIDSTAKER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'KOMBINASJON_ARBEIDSTAKER_OG_SELVSTENDIG_NÆRINGSDRIVENDE', 'SJØMANN', 'JORDBRUKER', 'DAGPENGER', 'INAKTIV', 'KOMBINASJON_ARBEIDSTAKER_OG_JORDBRUKER', 'KOMBINASJON_ARBEIDSTAKER_OG_FISKER', 'FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_FRILANSER', 'KOMBINASJON_ARBEIDSTAKER_OG_DAGPENGER', 'DAGMAMMA', 'UGYLDIG', '-'],
            type: 'string'
        },
        dagsats: {
            format: 'int64',
            type: 'integer'
        },
        inntektskategori: {
            enum: ['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_NÆRINGSDRIVENDE', 'DAGPENGER', 'ARBEIDSAVKLARINGSPENGER', 'SJØMANN', 'DAGMAMMA', 'JORDBRUKER', 'FISKER', 'ARBEIDSTAKER_UTEN_FERIEPENGER', '-'],
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $Ytelsegrunnlag = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/Ytelseperiode'
            },
            type: 'array'
        },
        ytelse: {
            enum: ['DAG', 'FRISINN', 'SP', 'PSB', 'PPN', 'OMP', 'OLP', 'AAP', 'ES', 'FP', 'SVP', 'EF', '-'],
            type: 'string'
        }
    },
    required: ['perioder', 'ytelse'],
    type: 'object'
} as const;

export const $Ytelseperiode = {
    properties: {
        andeler: {
            items: {
                '$ref': '#/components/schemas/Ytelseandel'
            },
            type: 'array'
        },
        periode: {
            '$ref': '#/components/schemas/Periode'
        }
    },
    required: ['andeler', 'periode'],
    type: 'object'
} as const;

export const $YtelserDto = {
    properties: {
        ytelser: {
            items: {
                '$ref': '#/components/schemas/YtelseDto'
            },
            maxItems: 2147483647,
            minItems: 1,
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $YtelsespesifiktGrunnlagDto = {
    discriminator: {
        propertyName: 'ytelseType'
    },
    properties: {
        ytelseType: {
            type: 'string'
        }
    },
    required: ['ytelseType'],
    type: 'object'
} as const;

export const $ÅrsakMedPerioder = {
    properties: {
        perioder: {
            items: {
                '$ref': '#/components/schemas/Periode'
            },
            maxItems: 2147483647,
            minItems: 0,
            type: 'array'
        },
        'årsak': {
            enum: ['MANUELT_REVURDERER_PERIODE', 'REVURDERER_BERØRT_PERIODE', 'ENDRING_FRA_BRUKER', 'TRUKKET_KRAV', 'REVURDERER_NY_INNTEKTSMELDING', 'REVURDERER_ENDRING_FRA_ANNEN_PART', 'REVURDERER_ENDRING_FERIEPENGER_ANNEN_SAK', 'UTSATT_BEHANDLING', 'GJENOPPTAR_UTSATT_BEHANDLING', 'REVURDERER_SYKDOM_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'REVURDERER_ETABLERT_TILSYN_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'REVURDERER_NATTEVÅKBEREDSKAP_ENDRING_FRA_ANNEN_OMSORGSPERSON', 'HENDELSE_DØD_BRUKER', 'HENDELSE_DØD_PLEIETRENGENDE', 'G_REGULERING', 'REVURDERER_BEREGNING', 'ENDRING_I_FORDELING', 'FØRSTEGANGSVURDERING', 'REVURDERER_LIGNET_INNTEKT'],
            type: 'string'
        }
    },
    required: ['perioder', 'årsak'],
    type: 'object'
} as const;

export const $ÅrskvantumForbrukteDager = {
    properties: {
        barna: {
            items: {
                '$ref': '#/components/schemas/Barn'
            },
            type: 'array'
        },
        rammevedtak: {
            items: {
                '$ref': '#/components/schemas/Rammevedtak'
            },
            type: 'array'
        },
        sisteUttaksplan: {
            '$ref': '#/components/schemas/Uttaksplan'
        }
    },
    type: 'object'
} as const;

export const $ÅrskvantumFravær = {
    properties: {
        arbeidsforhold: {
            '$ref': '#/components/schemas/Arbeidsforhold'
        },
        perioder: {
            additionalProperties: {
                '$ref': '#/components/schemas/ÅrskvantumFraværsinformasjon'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $ÅrskvantumFraværsinformasjon = {
    properties: {
        'delvisFravær': {
            properties: {
                nano: {
                    format: 'int32',
                    type: 'integer'
                },
                negative: {
                    type: 'boolean'
                },
                positive: {
                    type: 'boolean'
                },
                seconds: {
                    format: 'int64',
                    type: 'integer'
                },
                units: {
                    items: {
                        properties: {
                            dateBased: {
                                type: 'boolean'
                            },
                            duration: {
                                properties: {
                                    nano: {
                                        format: 'int32',
                                        type: 'integer'
                                    },
                                    negative: {
                                        type: 'boolean'
                                    },
                                    positive: {
                                        type: 'boolean'
                                    },
                                    seconds: {
                                        format: 'int64',
                                        type: 'integer'
                                    },
                                    zero: {
                                        type: 'boolean'
                                    }
                                },
                                type: 'object'
                            },
                            durationEstimated: {
                                type: 'boolean'
                            },
                            timeBased: {
                                type: 'boolean'
                            }
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                zero: {
                    type: 'boolean'
                }
            },
            type: 'object'
        },
        harDekketArbeidsgiverperioden: {
            type: 'boolean'
        },
        hjemler: {
            items: {
                enum: ['FTRL_9_3__1', 'FTRL_9_5__1', 'FTRL_9_5', 'FTRL_9_5__2', 'FTRL_9_5__3', 'FTRL_9_6__1', 'FTRL_9_6__2_OG_4', 'FTRL_9_6__3', 'FTRL_9_6__5', 'FTRL_9_6__6', 'FTRL_9_8_JF_8_10__3', 'FTRL_9_7__1_3', 'FTRL_9_7__4', 'FTRL_9_8__3', 'FTRL_9_9__1', 'FTRL_25_16', 'COVID19_1_2', 'COVID19_4_3', 'COVID19_4_1__2', 'COVID19_4_1__2_OG_3', 'COVID19_4_2', 'COVID19_4_3__1', 'COVID19_4_3__2'],
                type: 'string'
            },
            type: 'array'
        },
        knekkPgaHelg: {
            type: 'boolean'
        },
        refusjonTilArbeidsgiver: {
            type: 'boolean'
        },
        'vurderteVilkår': {
            '$ref': '#/components/schemas/VurderteVilkår'
        }
    },
    type: 'object'
} as const;

export const $ÅrskvantumUtbetalingGrunnlag = {
    properties: {
        barna: {
            items: {
                '$ref': '#/components/schemas/Barn'
            },
            type: 'array'
        },
        behandlingUUID: {
            format: 'uuid',
            type: 'string'
        },
        forbrukteDagerFraInfotrygd: {
            type: 'number'
        },
        'fravær': {
            items: {
                '$ref': '#/components/schemas/ÅrskvantumFravær'
            },
            type: 'array'
        },
        helePerioden: {
            type: 'string'
        },
        hjemler: {
            items: {
                enum: ['FTRL_9_3__1', 'FTRL_9_5__1', 'FTRL_9_5', 'FTRL_9_5__2', 'FTRL_9_5__3', 'FTRL_9_6__1', 'FTRL_9_6__2_OG_4', 'FTRL_9_6__3', 'FTRL_9_6__5', 'FTRL_9_6__6', 'FTRL_9_8_JF_8_10__3', 'FTRL_9_7__1_3', 'FTRL_9_7__4', 'FTRL_9_8__3', 'FTRL_9_9__1', 'FTRL_25_16', 'COVID19_1_2', 'COVID19_4_3', 'COVID19_4_1__2', 'COVID19_4_1__2_OG_3', 'COVID19_4_2', 'COVID19_4_3__1', 'COVID19_4_3__2'],
                type: 'string'
            },
            type: 'array'
        },
        personIdent: {
            type: 'string'
        },
        rammevedtak: {
            items: {
                '$ref': '#/components/schemas/Rammevedtak'
            },
            type: 'array'
        },
        saksnummer: {
            type: 'string'
        },
        'søkersDødsdato': {
            format: 'date',
            type: 'string'
        },
        'søkersFødselsdato': {
            format: 'date',
            type: 'string'
        },
        uttaksperioderFraInfotrygd: {
            items: {
                '$ref': '#/components/schemas/Uttaksperiode'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $ÅrskvantumUttrekk = {
    properties: {
        relevanteSaker: {
            items: {
                '$ref': '#/components/schemas/UttrekkPerson'
            },
            type: 'array',
            writeOnly: true
        },
        uttrekk: {
            items: {
                '$ref': '#/components/schemas/UttrekkPerson'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;