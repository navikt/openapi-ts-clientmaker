// This file is auto-generated by @hey-api/openapi-ts
export class RedirectService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * redirect til oppgave
     * @param oppgaveId
     * @param sakId
     * @returns unknown default response
     * @throws ApiError
     */
    doRedirect(oppgaveId, sakId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/',
            query: {
                oppgaveId,
                sakId
            }
        });
    }
}
export class ForvaltningService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter åpne saker i PSB.
     * Henter åpne saker i PSB.
     * @returns unknown default response
     * @throws ApiError
     */
    antallÅpnePsbMedSøknad() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/aapne-psb-med-soknad'
        });
    }
    /**
     * Avbryter feilopprettet aksjonspunkt
     * Avbryter feilopprettet aksjonspunkt
     * @param requestBody
     * @returns unknown default response
     * @throws ApiError
     */
    avbrytAksjonspunkt(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/avbryt-aksjonspunkt',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Returnerer info om vilkår, inkludert hvordan eventuelt kjørt (input og evaluering).
     * Forvaltning : Hent informasjon om vilkår for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns VilkårMedPerioderDto Returnerer vilkår på behandling, tom liste hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getVilkårFullV3(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/vilkar/full-v3',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter behandlingsteghistorikk
     * Henter behandlingsteghistorikk
     * @param requestBody Behandling-UUID
     * @returns unknown default response
     * @throws ApiError
     */
    hentBehandlingHistorikk(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlingsteg-historikk',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Beskytt aktørid og oppdaterer nødvendige tabeller
     * @param requestBody Liste med aktør-IDer
     * @returns unknown AktørId er endret.
     * @throws ApiError
     */
    beskyttAktoerId(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beskyttAktoerId',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'AktørId er uendret.',
                500: 'Feilet pga ukjent feil.'
            }
        });
    }
    /**
     * Henter en dump av info for debugging og analyse av en sak
     * Henter en dump av info for debugging og analyse av en sak. Logger hvem som har hatt innsyn i sak
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    dumpSak(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/diagnostikk/sak',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Oppretter automatisk revurdering av feriepenger.
     * Oppretter automatisk revurdering av feriepenger.
     * @param requestBody Fødselsnumre (skilt med mellomrom eller linjeskift)
     * @returns unknown default response
     * @throws ApiError
     */
    opprettFeriepengerevurdering(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/feriepengerevurdering',
            body: requestBody,
            mediaType: 'text/plain'
        });
    }
    /**
     * Oppretter automatisk revurdering av feriepenger.
     * Oppretter automatisk revurdering av feriepenger.
     * @param requestBody Saksnumre (skilt med mellomrom eller linjeskift)
     * @returns unknown default response
     * @throws ApiError
     */
    opprettFeriepengerevurderingSaksnumre(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/feriepengerevurdering-saksnumre',
            body: requestBody,
            mediaType: 'text/plain'
        });
    }
    /**
     * Innhent registerdata på nytt
     * Innhent registerdata på nytt
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    innhentRegisterdataPåNytt(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/innhent-registerdata',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Oppretter manuell revurdering med annet som årsak.
     * Oppretter manuell revurdering med annet som årsak.
     * @param requestBody Saksnumre (skilt med mellomrom eller linjeskift)
     * @returns unknown default response
     * @throws ApiError
     */
    opprettNyManuellRevurderingEllerTilbakestillingAvÅpenBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/manuell-revurdering',
            body: requestBody,
            mediaType: 'text/plain'
        });
    }
    /**
     * Markerer angitt dokument som ugyldig
     * Markerer et mottatt dokument som ugyldig
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    markerMottattDokumentUgyldig(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/marker-ugyldig',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Dump Cache fnr
     * Dump Cache fnr
     * @returns unknown default response
     * @throws ApiError
     */
    dumpFnrCache() {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rapportering/dump-fnr'
        });
    }
    /**
     * Cache fnr for aktørid for rapporteringsformålg
     * Cache fnr for aktørid for rapporteringsformål
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    innhentFnr(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rapportering/innhent-fnr',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Finner saksnummer for behandlinguuid
     * Finner saksnummer for behandlinguuid
     * @param requestBody Behandling-UUID
     * @returns unknown default response
     * @throws ApiError
     */
    hentSaksnummerForBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/saksnummerForBehandling',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter starttidspunkt for åpen behandling. Dvs tidspunktet den første søknaden kom inn på behandlingen i k9-sak.
     * Henter starttidspunkt for åpen behandling. Dvs tidspunktet den første søknaden kom inn på behandlingen i k9-sak.
     * @returns unknown default response
     * @throws ApiError
     */
    hentStarttidspunktÅpenBehandling() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/starttidspunkt-aapen-behandling'
        });
    }
    /**
     * Henter ut stønadstatistikk-JSON.
     * Henter ut stønadstatistikk-JSON.
     * @param requestBody Behandling-UUID
     * @returns unknown default response
     * @throws ApiError
     */
    hentUtStønadstatistikk(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/stonadstatistikk',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter vilkårshistorikk for beregning
     * Henter vilkårshistorikk for beregning
     * @param requestBody Behandling-UUID
     * @returns unknown default response
     * @throws ApiError
     */
    hentVilkårhistorikkForBeregning(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/vilkar-historikk-beregning',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class AksjonspunktService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent aksjonspunter for saker
     * @param saksnummer
     * @returns unknown Returnerer behandlinger med aksjonspunkt på CSV format
     * @throws ApiError
     */
    getAksjonspunkter2(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/aksjonspunkt',
            query: {
                saksnummer
            }
        });
    }
    /**
     * Hent aksjonspunter for saker
     * @param opprettetPeriode Tidsrom for opprettelse. Format YYYY-MM-DD/YYYY-MM-DD.
     * @param medUtforte Valgfritt å inkludere utførte aksjonspunkt. Default er false.
     * @returns unknown Returnerer behandlinger med aksjonspunkt opprettet innenfor angitt periode på CSV format
     * @throws ApiError
     */
    getAksjonspunkterSammendrag(opprettetPeriode, medUtforte) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/aksjonspunkt/sammendrag_periode',
            query: {
                opprettetPeriode,
                medUtforte
            }
        });
    }
    /**
     * Hent aksjonspunter for en behandling
     * @param behandlingId
     * @returns AksjonspunktDto
     * @throws ApiError
     */
    getAksjonspunkter(behandlingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aksjonspunkt',
            query: {
                behandlingId
            }
        });
    }
    /**
     * Lagre endringer gitt av aksjonspunktene og rekjør behandling fra gjeldende steg
     * @param requestBody Liste over aksjonspunkt som skal bekreftes, inklusiv data som trengs for å løse de.
     * @returns unknown default response
     * @throws ApiError
     */
    bekreft(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/aksjonspunkt',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent aksjonspunter for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns AksjonspunktDto
     * @throws ApiError
     */
    getAksjonspunkter1(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aksjonspunkt-v2',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Har behandling åpent kontroller revurdering aksjonspunkt
     * @param behandlingUuid behandlingUUID
     * @returns boolean
     * @throws ApiError
     */
    erKontrollerRevurderingAksjonspunktÅpent(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aksjonspunkt/kontroller-revurdering',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Overstyrer stegene
     * @param requestBody Liste over aksjonspunkter.
     * @returns unknown default response
     * @throws ApiError
     */
    overstyr(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/aksjonspunkt/overstyr',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * @deprecated
     * Hent risikoaksjonspunkt for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns AksjonspunktDto
     * @throws ApiError
     */
    getRisikoAksjonspunkt(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aksjonspunkt/risiko',
            query: {
                behandlingUuid
            }
        });
    }
}
export class AktoerService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter informasjon om en aktøer
     * @param aktoerId
     * @returns AktørInfoDto Returnerer basisinformasjon om en aktør og hvilke fagsaker vedkommede har i k9-sak.
     * @throws ApiError
     */
    getAktoerInfo(aktoerId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/aktoer-info',
            query: {
                aktoerId
            }
        });
    }
    /**
     * Henter saksnumre for en person. Kan for eksempel brukes for å finne ut om k9 er påvirket av 'aktør-splitt'
     * @param aktoerId
     * @returns AktørInfoDto Liste av fagsaker i k9-sak personen er del av.
     * @throws ApiError
     */
    getAktoerInfo1(aktoerId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/forvaltning/person/saksnumre-for-person',
            query: {
                aktoerId
            }
        });
    }
    /**
     * Redirecter til a-inntekt for arbeidstakeren
     * @param saksnummer SAKSNUMMER
     * @throws ApiError
     */
    getAinntektUrl(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/register/redirect-to/a-inntekt',
            query: {
                saksnummer
            },
            errors: {
                307: 'Redirecter til a-inntekt for arbeidstakeren'
            }
        });
    }
    /**
     * Redirecter til aa-reg for arbeidstakeren
     * @param saksnummer
     * @throws ApiError
     */
    getAktoerInfo2(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/register/redirect-to/aa-reg',
            query: {
                saksnummer
            },
            errors: {
                307: 'Redirecter til aa-reg for arbeidstakeren'
            }
        });
    }
}
export class BehandlingerService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer behandlingen som er tilknyttet id. Dette er resultat etter at asynkrone operasjoner er utført.
     * Hent behandling gitt id
     * @param behandlingUuid behandlingUUID
     * @returns BehandlingDto Returnerer Behandling
     * @throws ApiError
     */
    hentBehandlingData1(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer behandlingen som er tilknyttet id. Dette er resultat etter at asynkrone operasjoner er utført.
     * Hent behandling gitt id for backend
     * @param behandlingUuid behandlingUUID
     * @returns BehandlingDto Returnerer behandling
     * @throws ApiError
     */
    hentBehandlingResultatForBackend(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/backend-root',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Init hent behandling
     * @param requestBody
     * @returns string Hent behandling initiert, Returnerer status på fremdrift/feil i backend
     * @throws ApiError
     */
    oppfriskSaker(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/backend-root/refresh',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location'
        });
    }
    /**
     * Returnerer direkte overgang for behandling
     * Hent direkte overgang for behandling gitt id
     * @param behandlingUuid behandlingUUID
     * @returns DirekteOvergangDto Returnerer skjæringstidspunkter for direkte overgang
     * @throws ApiError
     */
    hentDirekteOvergangForBehandling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/direkte-overgang',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter førstegangngsbehandlingen som er/blir revurdert
     * Hent avsluttet førstegangsbehandling gitt id
     * @param behandlingUuid behandlingUUID
     * @returns BehandlingDto Returnerer avsluttet førstegangsbehandling
     * @throws ApiError
     */
    hentRevurderingensOriginalBehandling1(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/revurdering-original',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer link til enten samme (hvis ikke ferdig) eller redirecter til /behandlinger dersom asynkrone operasjoner er ferdig.
     * Url for å polle på behandling mens behandlingprosessen pågår i bakgrunnen(asynkront)
     * @param behandlingUuid behandlingUUID
     * @param gruppe
     * @returns AsyncPollingStatus Returnerer Status
     * @throws ApiError
     */
    hentBehandlingMidlertidigStatus1(behandlingUuid, gruppe) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/status',
            query: {
                behandlingUuid,
                gruppe
            },
            errors: {
                303: 'Behandling tilgjenglig (prosesstasks avsluttet)',
                418: 'ProsessTasks har feilet'
            }
        });
    }
    /**
     * Returnerer behandlingen som er tilknyttet id. Dette er resultat etter at asynkrone operasjoner er utført.
     * Hent behandling gitt id
     * @param behandlingId
     * @returns BehandlingDto Returnerer Behandling
     * @throws ApiError
     */
    hentBehandlingData(behandlingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandlinger',
            query: {
                behandlingId
            }
        });
    }
    /**
     * Init hent behandling
     * @param requestBody
     * @returns string Hent behandling initiert, Returnerer link til å polle på fremdrift
     * @throws ApiError
     */
    hentBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location',
            errors: {
                303: 'Behandling tilgjenglig (prosesstasks avsluttet)'
            }
        });
    }
    /**
     * Opprette ny behandling
     * @param requestBody Saksnummer og flagg om det er ny behandling etter klage
     * @returns string Opprett ny behandling pågår
     * @throws ApiError
     */
    opprettNyBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/behandlinger',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location'
        });
    }
    /**
     * Returnerer alle behandlinger som er tilknyttet saksnummer.
     * Henter alle behandlinger basert på saksnummer
     * @param saksnummer Saksnummer må være et eksisterende saksnummer
     * @returns BehandlingDto default response
     * @throws ApiError
     */
    hentBehandlinger(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandlinger/alle',
            query: {
                saksnummer
            }
        });
    }
    /**
     * Bytte behandlende enhet
     * @param requestBody Ny enhet som skal byttes
     * @returns unknown default response
     * @throws ApiError
     */
    byttBehandlendeEnhet(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/bytt-enhet',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Endrer ventefrist for behandling på vent
     * @param requestBody Frist for behandling på vent
     * @returns unknown default response
     * @throws ApiError
     */
    endreFristForBehandlingPaVent(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/endre-pa-vent',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Gjenopptar behandling som er satt på vent
     * @param requestBody BehandlingId for behandling som skal gjenopptas
     * @returns string Gjenoppta behandling påstartet i bakgrunnen
     * @throws ApiError
     */
    gjenopptaBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/gjenoppta',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location'
        });
    }
    /**
     * Henlegger behandling
     * @param requestBody Henleggelsesårsak
     * @returns unknown default response
     * @throws ApiError
     */
    henleggBehandling(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/henlegg',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Åpner behandling for endringer
     * @param requestBody BehandlingId for behandling som skal åpnes for endringer
     * @returns string Åpning av behandling for endringer påstartet i bakgrunnen
     * @throws ApiError
     */
    åpneBehandlingForEndringer(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/opne-for-endringer',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location'
        });
    }
    /**
     * Henter lovlige operasjoner på behandling for menyvalg
     * @param behandlingUuid behandlingUUID
     * @returns BehandlingOperasjonerDto default response
     * @throws ApiError
     */
    hentLovligeBehandlingsoperasjoner(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandlinger/rettigheter',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter førstegangngsbehandlingen som er/blir revurdert
     * Hent avsluttet førstegangsbehandling gitt id
     * @param behandlingId
     * @returns BehandlingDto Returnerer avsluttet førstegangsbehandling
     * @throws ApiError
     */
    hentRevurderingensOriginalBehandling(behandlingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandlinger/revurdering-original',
            query: {
                behandlingId
            }
        });
    }
    /**
     * Setter behandling på vent
     * @param requestBody Frist for behandling på vent
     * @returns unknown default response
     * @throws ApiError
     */
    settBehandlingPaVent(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandlinger/sett-pa-vent',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Returnerer link til enten samme (hvis ikke ferdig) eller redirecter til /behandlinger dersom asynkrone operasjoner er ferdig.
     * Url for å polle på behandling mens behandlingprosessen pågår i bakgrunnen(asynkront)
     * @param behandlingId
     * @param gruppe
     * @returns AsyncPollingStatus Returnerer Status
     * @throws ApiError
     */
    hentBehandlingMidlertidigStatus(behandlingId, gruppe) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandlinger/status',
            query: {
                behandlingId,
                gruppe
            },
            errors: {
                303: 'Behandling tilgjenglig (prosesstasks avsluttet)',
                418: 'ProsessTasks har feilet'
            }
        });
    }
    /**
     * Opprette ny unntaksbehandling
     * @param requestBody Saksnummer
     * @returns string Opprett ny unntaksbehandling pågår
     * @throws ApiError
     */
    opprettNyUnntaksbehandling(requestBody) {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/behandlinger/unntak',
            body: requestBody,
            mediaType: 'application/json',
            responseHeader: 'Location'
        });
    }
    /**
     * Returnerer alle behandlinger som er tilknyttet saksnummer.
     * Henter alle behandlinger basert på saksnummer
     * @param saksnummer Saksnummer må være et eksisterende saksnummer
     * @returns BehandlingDto default response
     * @throws ApiError
     */
    hentAlleBehandlinger(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak/behandling',
            query: {
                saksnummer
            }
        });
    }
}
export class BehandlingÅrskvantumUttakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent forbrukte dager
     * @param behandlingUuid behandlingUUID
     * @returns ÅrskvantumForbrukteDager Returnerer forbrukte dager av totalt årskvantum
     * @throws ApiError
     */
    getForbrukteDager(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aarskvantum/forbruktedager',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent input til beregning av årskvantum
     * @param requestBody behandlingUUID
     * @returns unknown input til beregning av årskvantum
     * @throws ApiError
     */
    inputTilÅrskvantumsBeregning(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/aarskvantum/input',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent utbetalingsgrunnlag fra årskvantum
     * @param requestBody behandlingUUID
     * @returns unknown utbetalingsgrunnlag fra årskvantum
     * @throws ApiError
     */
    hentUtbetalingsgrunnlagFraÅrskvantum(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/aarskvantum/utbetalingsgrunnlag',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent full uttaksplan
     * @param saksnummer saksnummer
     * @param behandlingUuid behandlingUUID
     * @returns FullUttaksplan Returnerer full uttaksplan hittil i år
     * @throws ApiError
     */
    getFullUttaksplan(saksnummer, behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/aarskvantum/uttaksplan',
            query: {
                saksnummer,
                behandlingUuid
            }
        });
    }
}
export class BehandlingÅrskvantumUttrekkService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent uttrekk fra årskvantum
     * @returns unknown uttrekk fra årskvantum
     * @throws ApiError
     */
    hentUttrekk() {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/aarskvantum/uttrekk'
        });
    }
}
export class ArbeidsgiverService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter informasjon om alle arbeidsgivere (navn, fødselsnr for privat arbeidsgiver osv)
     * Henter informasjon om alle arbeidsgivere knyttet til bruker
     * @param behandlingUuid behandlingUUID
     * @returns ArbeidsgiverOversiktDto Returnerer ArbeidsgiverOversiktDto
     * @throws ApiError
     */
    getArbeidsgiverOpplysninger(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/arbeidsgiver',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BeregningsgrunnlagService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer beregningsgrunnlag for behandling.
     * Hent beregningsgrunnlag for angitt behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsgrunnlagDto default response
     * @throws ApiError
     */
    hentBeregningsgrunnlag(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsgrunnlag',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer beregningsgrunnlag for behandling.
     * Henter alle beregningsgrunnlag for angitt behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsgrunnlagDto default response
     * @throws ApiError
     */
    hentBeregningsgrunnlagene(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsgrunnlag/alle',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter alle koblingene for angitt behandling
     * Henter alle koblingene for angitt behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsgrunnlagKoblingDto default response
     * @throws ApiError
     */
    hentNøkkelknippe(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsgrunnlag/koblinger',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter alle koblingene til vurdering for angitt behandling
     * Henter alle koblingene til vurdering for angitt behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsgrunnlagKoblingDto default response
     * @throws ApiError
     */
    hentNøklerTilVurdering(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsgrunnlag/koblingerTilVurdering',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer data for overstyring av input til beregning.
     * Henter data for overstyring av input til beregning
     * @param behandlingUuid behandlingUUID
     * @returns OverstyrBeregningInputPeriode default response
     * @throws ApiError
     */
    hentOverstyrInputBeregning(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsgrunnlag/overstyrInput',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BeregningsresultatService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer beregningsresultat med uttaksplan for behandling.
     * Hent beregningsresultat med uttaksplan fra behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsresultatDto default response
     * @throws ApiError
     */
    hentBeregningsresultat(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsresultat',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Har revurdering samme resultat som original behandling
     * @param behandlingUuid behandlingUUID
     * @returns boolean default response
     * @throws ApiError
     */
    harRevurderingSammeResultatSomOriginalBehandling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsresultat/har-samme-resultat',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer beregningsresultat med uttaksplan for behandling.
     * Hent beregningsresultat med uttaksplan for foreldrepenger behandling
     * @param behandlingUuid behandlingUUID
     * @returns BeregningsresultatMedUtbetaltePeriodeDto default response
     * @throws ApiError
     */
    hentBeregningsresultatMedUtbetaling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/beregningsresultat/utbetalt',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BehandlingFosterbarnService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent fosterbarn for omsorgspenger
     * @param behandlingUuid behandlingUUID
     * @returns FosterbarnListeDto Returnerer Fosterbarn, null hvis ikke finnes (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    hentFosterbarn(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/fosterbarn',
            query: {
                behandlingUuid
            }
        });
    }
}
export class OpplæringspengerService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer alle perioder og tilhørende vurderinger av gjennomgått opplæring
     * Hent vurderinger av gjennomgått opplæring
     * @param behandlingUuid behandlingUUID
     * @returns GjennomgåttOpplæringDto perioder fra søknad og vurdert opplæring
     * @throws ApiError
     */
    hentVurdertOpplæring(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/gjennomgåttopplæring',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer alle perioder og tilhørende institusjonsvurderinger
     * Hent institusjonsvurderinger
     * @param behandlingUuid behandlingUUID
     * @returns InstitusjonerDto perioder fra søknad og vurderte institusjoner
     * @throws ApiError
     */
    hentVurdertInstitusjon(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/institusjon',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer alle perioder og tilhørende vurderinger av nødvendig opplæring
     * Hent vurderinger av nødvendig opplæring
     * @param behandlingUuid behandlingUUID
     * @returns NødvendigOpplæringDto perioder fra søknad og vurdert opplæring
     * @throws ApiError
     */
    hentVurdertNødvendigOpplæring(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/nødvendigopplæring',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Laster ned selve dokumentet (innholdet).
     * Laster ned selve dokumentet (innholdet).
     * @param behandlingUuid behandlingUUID
     * @param sykdomDokumentId sykdomDokumentId
     * @returns unknown default response
     * @throws ApiError
     */
    hentDokumentinnhold(behandlingUuid, sykdomDokumentId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/opplæring/dokument/innhold',
            query: {
                behandlingUuid,
                sykdomDokumentId
            }
        });
    }
    /**
     * Henter en liste over dokumenter som kan brukes i vurdering.
     * Henter en liste over dokumenter som kan brukes i vurdering.
     * @param behandlingUuid behandlingUUID
     * @returns OpplæringDokumentDto
     * @throws ApiError
     */
    hentDokumenter(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/opplæring/dokument/liste',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer alle perioder og tilhørende vurderinger av reisetid
     * Hent vurderinger av reisetid
     * @param behandlingUuid behandlingUUID
     * @returns ReisetidDto perioder fra søknad og vurdert reisetid
     * @throws ApiError
     */
    hentVurdertReisetid(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/reisetid',
            query: {
                behandlingUuid
            }
        });
    }
}
export class InntektArbeidYtelseService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer info om innhentet og avklart inntekter/arbeid og ytelser for bruker, inkludert hva bruker har vedlagt søknad.
     * Hent informasjon om innhentet og avklart inntekter, arbeid og ytelser
     * @param behandlingUuid behandlingUUID
     * @returns InntektArbeidYtelseArbeidsforholdV2Dto Returnerer InntektArbeidYtelseDto, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getArbeidsforhold(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/iay/arbeidsforhold-v2',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer arbeidsforhold oppgitt på inntektsmeldinger
     * Hent arbeidsforhold fra inntektsmeldinger
     * @param requestBody Match-kritierer for å lete opp fagsaken med inntektsmeldinger
     * @returns InntektArbeidYtelseArbeidsforholdV2Dto Returnerer InntektArbeidYtelseDto, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    hentArbeidsforholdIdFraInntektsmeldinger(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/iay/im-arbeidsforhold-v2',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class KompletthetService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer beregningsgrunnlag for behandling.
     * Hent tilstand for kompletthet for behandling
     * @param behandlingUuid behandlingUUID
     * @returns KompletthetsVurderingDto default response
     * @throws ApiError
     */
    utledStatusForKompletthet(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/kompletthet/beregning',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer beregningsgrunnlag for behandling.
     * Hent tilstand for kompletthet for behandling
     * @param behandlingUuid behandlingUUID
     * @returns KompletthetsVurderingV2Dto default response
     * @throws ApiError
     */
    utledStatusForKompletthetV2(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/kompletthet/beregning-v2',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter vurderinger på bruk av inntektsmeldinger
     * Henter vurderinger på bruk av inntektsmeldinger
     * @param behandlingUuid behandlingUUID
     * @returns VurderingPerPeriode default response
     * @throws ApiError
     */
    utledVurderingerAvMottatteInntektsmeldinger(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/kompletthet/beregning/vurderinger',
            query: {
                behandlingUuid
            }
        });
    }
}
export class KontrollService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * @deprecated
     * Hent kontrollresultatet for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns unknown
     * @throws ApiError
     */
    hentKontrollresultat(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/kontrollresultat',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * @deprecated
     * Hent kontrollresultatet for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns unknown
     * @throws ApiError
     */
    hentKontrollresultatV21(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/kontrollresultat/resultat',
            query: {
                behandlingUuid
            }
        });
    }
}
export class OmsorgenForService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer informasjon saksbehandler har skrevet inn fra legeerklæring og vurderinger vedrørende kontinuerlig tilsyn & pleie
     * Hent omsorgen for opplysninger
     * @param behandlingUuid behandlingUUID
     * @returns OmsorgenForOversiktDto null hvis ikke eksisterer
     * @throws ApiError
     */
    hentOmsorgenForInformasjon(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/omsorg-for',
            query: {
                behandlingUuid
            }
        });
    }
}
export class OppgittOpptjeningService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer info om oppgitt opptjening og om hvilken ytelser det blir søkt ytelser for.
     * Hent informasjon om oppgitt opptjening for alle søknadsperioder
     * @param behandlingUuid behandlingUUID
     * @returns SøknadsperiodeOgOppgittOpptjeningV2Dto Returnerer SøknadsperiodeOgOppgittOpptjeningDto, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getOppgittOpptjeningV2(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/oppgitt-opptjening-v2',
            query: {
                behandlingUuid
            }
        });
    }
}
export class OpptjeningService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent informasjon om opptjening
     * @param behandlingUuid behandlingUUID
     * @returns OpptjeningerDto Returnerer Opptjening, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getOpptjeninger(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/opptjening-v2',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent informasjon om inntekt
     * @param behandlingUuid behandlingUUID
     * @returns OpptjeningDto Returnerer inntekter, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getInntekt(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/opptjening/inntekt',
            query: {
                behandlingUuid
            }
        });
    }
}
export class PerioderService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent perioder til behandling og kilden til disse
     * Hent perioder til behandling og kilden til disse
     * @param behandlingUuid behandlingUUID
     * @returns StatusForPerioderPåBehandling Liste med periode og årsaken til at perioden behandles
     * @throws ApiError
     */
    hentPerioderTilBehandling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/perioder',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent perioder til behandling og kilden til disse
     * Hent perioder til behandling og kilden til disse
     * @param behandlingUuid behandlingUUID
     * @returns StatusForPerioderPåBehandling Liste med periode og årsaken til at perioden behandles
     * @throws ApiError
     */
    hentPerioderMedVilkårForBehandling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/perioder-med-vilkar',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BehandlingPersonService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent informasjon om medlemskap i Folketrygden for søker i behandling
     * @param behandlingUuid behandlingUUID
     * @returns MedlemV2Dto Returnerer Medlemskap, null hvis ikke finnes (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    hentMedlemskap(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/person/medlemskap-v2',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent informasjon om personopplysninger søker i behandling
     * @param behandlingUuid behandlingUUID
     * @returns PersonopplysningDto Returnerer Personopplysninger, null hvis ikke finnes (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getPersonopplysninger(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/person/personopplysninger',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent informasjon om personopplysninger søker i behandling
     * @param behandlingUuid behandlingUUID
     * @returns PersonopplysningDto Returnerer Personopplysninger, null hvis ikke finnes (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getPersonopplysninger1(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleietrengende',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BehandlingPleiepengerUttakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter ut arbeidstid som bruker skulle oppgitt
     * @param behandlingUuid behandlingUUID
     * @returns ManglendeArbeidstidDto Henter ut arbeidstid som bruker skulle oppgitt
     * @throws ApiError
     */
    getArbeidstidSomMangler(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/arbeidstid-mangler',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter ut uttaksgrunnlag for behandling
     * @param formData
     * @returns unknown Uttaksgrunnlag
     * @throws ApiError
     */
    debugInput(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/pleiepenger/debug-input',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Henter ut uttaksgrunnlag for behandling
     * @param behandlingUuid behandlingUUID
     * @returns unknown Uttaksgrunnlag
     * @throws ApiError
     */
    kjøreplan(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/debug-kjøreplan',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Simuler uttaksplan mot ubesluttede data
     * @param behandlingUuid behandlingUUID
     * @returns Simulering Returnerer simulert uttaksplan for angitt behandling
     * @throws ApiError
     */
    simulertUttaksplan(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/simuler',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent uttaksplan for behandling
     * @param behandlingUuid behandlingUUID
     * @returns Uttaksplan Returnerer uttaksplan for angitt behandling
     * @throws ApiError
     */
    getUttaksplan(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/uttak',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent uttaksplan for behandling med utsatte perioder
     * @param behandlingUuid behandlingUUID
     * @returns UttaksplanMedUtsattePerioder Returnerer uttaksplan for angitt behandling
     * @throws ApiError
     */
    uttaksplanMedUtsattePerioder(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/uttak-med-utsatt',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BehandlingUttakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent overstyrbare aktiviteter for uttak for behandling
     * @param requestBody
     * @returns OverstyrbareUttakAktiviterDto Returnerer overstyrbare aktiviteter
     * @throws ApiError
     */
    hentOverstyrbareAktiviterForUttak(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/pleiepenger/uttak/overstyrbare-aktiviteter',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent overstyrt uttak for behandling
     * @param behandlingUuid behandlingUUID
     * @returns OverstyrtUttakDto Returnerer uttak overstyrt av overstyrer, null hvis ikke finnes noe
     * @throws ApiError
     */
    getOverstyrtUttak(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleiepenger/uttak/overstyrt',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent Fastsatt uttak for behandling
     * @param behandlingUuid behandlingUUID
     * @returns FastsattUttakDto Returnerer uttak fastsatt av saksbehandler (fakta avklart før vurdering av uttak), null hvis ikke finnes noe
     * @throws ApiError
     */
    getFastsattUttak(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/uttak/fastsatt',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent oppgitt uttak for behandling
     * @param behandlingUuid behandlingUUID
     * @returns OppgittUttakDto Returnerer Oppgitt uttak fra søknad, null hvis ikke finnes noe
     * @throws ApiError
     */
    getOppgittUttak(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/uttak/oppgitt',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent oppgitt utenlandsopphold
     * @param behandlingUuid behandlingUUID
     * @returns UtenlandsoppholdDto Returnerer søkers oppgitte utenlandsopphold, tom liste hvis det ikke finnes noe
     * @throws ApiError
     */
    getUtenlandsopphold(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/uttak/utenlandsopphold',
            query: {
                behandlingUuid
            }
        });
    }
}
export class DødService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent rett pleiepenger ved død
     * Hent vurdering av rett til pleiepenger ved død
     * @param behandlingUuid behandlingUUID
     * @returns VurderingRettPleiepengerVedDødDto rett til pleiepenger ved død
     * @returns void ingen rett til pleiepenger ved død vurdert
     * @throws ApiError
     */
    hentVurderingRettPleiepengerVedDød(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/pleietrengende/dod',
            query: {
                behandlingUuid
            }
        });
    }
}
export class SøknadService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent informasjon om søknad
     * @param behandlingUuid behandlingUUID
     * @returns SøknadDto Returnerer Søknad, null hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getSøknad(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/soknad',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Finner søknadspperioder på siste fagsak
     * Henter søknadsperioder på siste fagsak på ytelse, bruker, og pleieptrengende
     * @param requestBody Match kritierer for å lete opp fagsaker
     * @returns Periode default response
     * @throws ApiError
     */
    hentSøknadPerioder(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/soknad/perioder',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finner søknadspperioder med saksnummer
     * Henter søknadsperioder med saksnummer
     * @param saksnummer
     * @returns Periode default response
     * @throws ApiError
     */
    hentSøknadPerioderMedSaksnummer(saksnummer) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/soknad/perioder/saksnummer',
            query: {
                saksnummer
            }
        });
    }
}
export class SykdomService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter informasjon om sykdomsaksjonspunkt
     * Hent informasjon om sykdomsaksjonspunkt
     * @param behandlingUuid behandlingUUID
     * @returns SykdomAksjonspunktDto Informasjon om sykdomsaksjonspunkt
     * @throws ApiError
     */
    hentSykdomAksjonspunkt(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/aksjonspunkt',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Oppdaterer metainformasjonen om et dokument.
     * Oppdaterer metainformasjonen om et dokument.
     * @param requestBody
     * @returns unknown Dokumentet har blitt opprettet.
     * @throws ApiError
     */
    oppdaterDokument(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/dokument',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter alle registrerte diagnosekoder på den pleietrengende..
     * Henter alle registrerte diagnosekoder på den pleietrengende.
     * @param behandlingUuid behandlingUUID
     * @returns SykdomDiagnosekoderDto
     * @throws ApiError
     */
    hentDiagnosekoder(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/diagnosekoder',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Oppdaterer diagnosekoder på den pleietrengende.
     * Oppdaterer diagnosekoder på den pleietrengende.
     * @param requestBody
     * @returns unknown Dokumentet har blitt opprettet.
     * @throws ApiError
     */
    oppdaterDiagnosekoder(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/dokument/diagnosekoder',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter en liste over dokumenter som kanskje skal brukes til å oppdatere tidligere vurderinger.
     * Henter en liste over dokumenter hvor saksbehandler ikke har tatt stilling til om de berører eksisterende vurderinger.
     * @param behandlingUuid behandlingUUID
     * @returns SykdomDokumentDto
     * @throws ApiError
     */
    hentSykdomsdokumenterSomIkkeHarOppdatertEksisterendeVurderinger(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/eksisterendevurderinger',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Kvitter ut at saksbehandler har tatt stilling til om dokumenter påvirker eksisterende vurderinger.
     * Kvitter ut at saksbehandler har tatt stilling til om dokumenter påvirker eksisterende vurderinger.
     * @param requestBody
     * @returns unknown Dokumentene har blitt utkvittert.
     * @throws ApiError
     */
    sykdomDokumentUtkvitterEksisterendeVurderinger(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/dokument/eksisterendevurderinger',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter alle perioder den pleietrengende er innlagt på sykehus og liknende.
     * Henter alle perioder den pleietrengende er innlagt på sykehus og liknende.
     * @param behandlingUuid behandlingUUID
     * @returns SykdomInnleggelseDto
     * @throws ApiError
     */
    hentSykdomInnleggelse(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/innleggelse',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Oppdaterer perioder den pleietrengende er innlagt på sykehus og liknende.
     * Oppdaterer perioder den pleietrengende er innlagt på sykehus og liknende.
     * @param requestBody
     * @returns unknown Dokumentet har blitt opprettet.
     * @throws ApiError
     */
    oppdaterSykdomInnleggelse(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/dokument/innleggelse',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter en liste over dokumenter som kan brukes i vurdering.
     * Henter en liste over dokumenter som kan brukes i vurdering.
     * @param behandlingUuid behandlingUUID
     * @returns SykdomDokumentDto
     * @throws ApiError
     */
    hentSykdomsdokumenter(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/liste',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * TEST TEST TEST Oppretter et dokument.
     * TEST TEST TEST Oppretter et dokument.
     * @param requestBody
     * @returns unknown Dokumentet har blitt opprettet.
     * @throws ApiError
     */
    leggTilNyttDokument(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/dokument/ny',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * En oversikt over alle dokumenter som er koblet på den pleietrengende behandlingen refererer til.
     * En oversikt over alle dokumenter som er koblet på den pleietrengende behandlingen refererer til.
     * @param behandlingUuid behandlingUUID
     * @returns SykdomDokumentOversikt
     * @throws ApiError
     */
    hentDokumentoversikt(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/oversikt',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * En gitt vurdering angitt med ID.
     * Henter informasjon om én gitt vurdering.
     * @param behandlingUuid behandlingUUID
     * @param sykdomVurderingId sykdomVurderingId
     * @returns SykdomVurderingDto
     * @throws ApiError
     */
    hentSykdomsInformasjonFor(behandlingUuid, sykdomVurderingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/vurdering',
            query: {
                behandlingUuid,
                sykdomVurderingId
            }
        });
    }
    /**
     * Oppretter en ny vurdering.
     * Oppretter en ny vurdering.
     * @param requestBody
     * @returns SykdomVurderingEndringResultatDto Et resultatobjekt som viser vurderinger som blir erstattet.
     * @throws ApiError
     */
    opprettSykdomsVurdering(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/vurdering',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * En oversikt over sykdomsvurderinger for i livets sluttfase
     * En oversikt over sykdomsvurderinger for i livets sluttfase
     * @param behandlingUuid behandlingUUID
     * @returns SykdomVurderingOversikt
     * @throws ApiError
     */
    hentSykdomsoversiktForIlivetsSluttase(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/vurdering/oversikt/I_LIVETS_SLUTT',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * En oversikt over sykdomsvurderinger for kontinuerlig tilsyn og pleie
     * En oversikt over sykdomsvurderinger for kontinuerlig tilsyn og pleie
     * @param behandlingUuid behandlingUUID
     * @returns SykdomVurderingOversikt
     * @throws ApiError
     */
    hentSykdomsoversiktForKtp(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/vurdering/oversikt/KONTINUERLIG_TILSYN_OG_PLEIE',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * En oversikt over sykdomsvurderinger for langvarig sykdom
     * En oversikt over sykdomsvurderinger for langvarig sykdom
     * @param behandlingUuid behandlingUUID
     * @returns SykdomVurderingOversikt
     * @throws ApiError
     */
    hentSykdomsoversiktForLangvarigSykdom(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/vurdering/oversikt/LANGVARIG_SYKDOM',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * En oversikt over sykdomsvurderinger for to omsorgspersoner
     * En oversikt over sykdomsvurderinger for to omsorgspersoner
     * @param behandlingUuid behandlingUUID
     * @returns SykdomVurderingOversikt
     * @throws ApiError
     */
    hentSykdomsoversiktForToOmsorgspersoner(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/vurdering/oversikt/TO_OMSORGSPERSONER',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Oppdaterer en vurdering.
     * Oppdaterer en vurdering.
     * @param requestBody
     * @returns SykdomVurderingEndringResultatDto Et resultatobjekt som viser vurderinger som blir erstattet.
     * @throws ApiError
     */
    oppdaterSykdomsVurdering(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/behandling/sykdom/vurdering/versjon',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class DokumentService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Laster ned selve dokumentet (innholdet).
     * Laster ned selve dokumentet (innholdet).
     * @param behandlingUuid behandlingUUID
     * @param sykdomDokumentId sykdomDokumentId
     * @returns unknown default response
     * @throws ApiError
     */
    hentDokumentinnhold1(behandlingUuid, sykdomDokumentId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/sykdom/dokument/innhold',
            query: {
                behandlingUuid,
                sykdomDokumentId
            }
        });
    }
    /**
     * Retunerer dokument som er tilknyttet saksnummer, journalpostId og dokumentId.
     * Søk etter dokument på JOARK-identifikatorene journalpostId og dokumentId
     * @param saksnummer Saksnummer
     * @param journalpostId Unik identifikator av journalposten (forsendelsenivå)
     * @param dokumentId Unik identifikator av DokumentInfo/Dokumentbeskrivelse (dokumentnivå)
     * @returns unknown default response
     * @throws ApiError
     */
    hentDokument(saksnummer, journalpostId, dokumentId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/dokument/hent-dokument',
            query: {
                saksnummer,
                journalpostId,
                dokumentId
            }
        });
    }
    /**
     * Oversikt over alle pdf dokumenter fra dokumentarkiv registrert for saksnummer.
     * Henter dokumentlisten knyttet til en sak
     * @param saksnummer Saksnummer
     * @returns DokumentDto default response
     * @throws ApiError
     */
    hentAlleDokumenterForSak(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/dokument/hent-dokumentliste',
            query: {
                saksnummer
            }
        });
    }
}
export class SøknadsfristService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer status for søknadsfrist.
     * Hent status på søknadsfrist
     * @param behandlingUuid behandlingUUID
     * @returns SøknadsfristTilstandDto default response
     * @throws ApiError
     */
    utledStatus(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/søknadsfrist/status',
            query: {
                behandlingUuid
            }
        });
    }
}
export class TilbakekrevingsvalgService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent tilbakekrevingsvalg for behandlingen
     * @param behandlingUuid behandlingUUID
     * @returns TilbakekrevingValgDto default response
     * @throws ApiError
     */
    hentTilbakekrevingValg(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/tilbakekreving/valg',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter varseltekst for tilbakekreving
     * @param behandlingUuid behandlingUUID
     * @returns VarseltekstDto default response
     * @throws ApiError
     */
    hentVarseltekst(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/tilbakekreving/varseltekst',
            query: {
                behandlingUuid
            }
        });
    }
}
export class TilsynService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer alle perioder med etablert tilsyn
     * Hent etablert tilsyn perioder
     * @param behandlingUuid behandlingUUID
     * @returns EtablertTilsynNattevåkOgBeredskapDto perioder med etablert tilsyn, nattevåk og beredskap
     * @throws ApiError
     */
    hentEtablertTilsyn(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/tilsyn',
            query: {
                behandlingUuid
            }
        });
    }
}
export class TotrinnskontrollService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent aksjonspunkter som skal til totrinnskontroll.
     * @param behandlingUuid behandlingUUID
     * @returns TotrinnskontrollSkjermlenkeContextDto
     * @throws ApiError
     */
    hentTotrinnskontrollSkjermlenkeContext(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/totrinnskontroll/arsaker',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent aksjonspunkter som skal til totrinnskontroll.
     * @param behandlingUuid behandlingUUID
     * @returns TotrinnskontrollSkjermlenkeContextDto
     * @throws ApiError
     */
    hentTotrinnskontrollvurderingSkjermlenkeContext(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/totrinnskontroll/arsaker_read_only',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BehandlingUtvidetRettService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent rammevedtak
     * @param behandlingUuid behandlingUUID
     * @returns RammevedtakResponse Returnerer relevante rammevedtak for en behandling om utvidet rett
     * @throws ApiError
     */
    hentRammevedtak(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/utvidetRett/rammevedtak',
            query: {
                behandlingUuid
            }
        });
    }
}
export class VedtakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent liste over dokumenter flagget med at de inneholder informasjon som ikke er/kan bli punsjet
     * @param behandlingUuid behandlingUUID
     * @returns DokumentMedUstrukturerteDataDto
     * @throws ApiError
     */
    hentDokumenterMedUstrukturerteData(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/vedtak/fritekstdokumenter',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * @deprecated
     * Hent vedtak varsel gitt behandlingId
     * @param behandlingUuid behandlingUUID
     * @returns unknown default response
     * @throws ApiError
     */
    hentVedtakVarsel(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/brev/vedtak',
            query: {
                behandlingUuid
            }
        });
    }
}
export class VilkårService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent informasjon om vilkår for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns VilkårDto Returnerer vilkår på behandling, tom liste hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getVilkårV3(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/vilkar-v3',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Returnerer info om vilkår, inkludert hvordan eventuelt kjørt (input og evaluering).
     * Forvaltning : Hent informasjon om vilkår for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns VilkårMedPerioderDto Returnerer vilkår på behandling, tom liste hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getVilkårFullV3(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/vilkar/full-v3',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent informasjon om vilkår samlet for en behandling
     * @param behandlingUuid behandlingUUID
     * @returns VilkårResultatContainer Returnerer vilkår på behandling, tom liste hvis ikke eksisterer (GUI støtter ikke NOT_FOUND p.t.)
     * @throws ApiError
     */
    getVilkårSamlet(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/vilkar/samlet',
            query: {
                behandlingUuid
            }
        });
    }
}
export class YtelserService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent andre overlappende K9-ytelser som påvirker denne behandlingen
     * Hent andre overlappende K9-ytelser som påvirker denne behandlingen
     * @param behandlingUuid behandlingUUID
     * @returns OverlappendeYtelseDto default response
     * @throws ApiError
     */
    hentOverlappendeYtelser(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/behandling/ytelser',
            query: {
                behandlingUuid
            }
        });
    }
}
export class BeregningService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent kalkulatorinput for behandling
     * @param behandlingId
     * @returns KalkulatorInputPrVilkårperiodeDto Returnerer kalkulatorinput på JSON format
     * @throws ApiError
     */
    getKalkulatorInput(behandlingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/beregning',
            query: {
                behandlingId
            }
        });
    }
    /**
     * Finner behandlinger og informasjon om perioder som er rammet av IM-feil
     * @returns unknown default response
     * @throws ApiError
     */
    finnBehandlingerMedFeilIm() {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/finn-feil-inntektsmelding-bruk'
        });
    }
    /**
     * Fjerner prosesstrigger for reberegning av grunnlag
     * Fjerner prosesstrigger for reberegning av grunnlag
     * @param requestBody Saksnummer og skjæringstidspunkt (YYYY-MM-DD) på csv-format
     * @returns unknown default response
     * @throws ApiError
     */
    fjernProsessTriggerForReberegning(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/fjern-prosesstrigger-reberegning',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Sorterte inntektsmeldinger per vilkårsperiode
     * @param behandlingId
     * @returns Inntektsmelding Returnerer kalkulatorinput på JSON format
     * @throws ApiError
     */
    inntektsmeldingSortering(behandlingId) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/inntektsmelding-sortering',
            query: {
                behandlingId
            }
        });
    }
    /**
     * Oppretter manuell revurdering grunnet nye opplysninger om beregning.
     * Oppretter manuell revurdering grunnet nye opplysninger om beregning.
     * @param requestBody Saksnummer og skjæringstidspunkt (YYYY-MM-DD) på csv-format
     * @returns unknown default response
     * @throws ApiError
     */
    revurderGrunnetEndretOpplysning(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/manuell-revurdering-beregning',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Oppretter manuell revurdering grunnet nye opplysninger om opptjening.
     * Oppretter manuell revurdering grunnet nye opplysninger om opptjening.
     * @param requestBody Saksnummer og skjæringstidspunkt (YYYY-MM-DD) på csv-format
     * @returns unknown default response
     * @throws ApiError
     */
    revurderGrunnetOpplysningOmOpptjening(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/manuell-revurdering-opptjening',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Data til utledning av forlengelse av aktivitetstatus
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    finnAktivitetstatusForlengelseData(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/psb-aktivitetstatus-forlengelse-data',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Oppretter manuell revurdering og bruker skatteoppgjør fra oppgitt behandling.
     * Oppretter manuell revurdering og bruker skatteoppgjør fra oppgitt behandling.
     * @param requestBody
     * @returns unknown default response
     * @throws ApiError
     */
    revurderOgBrukForrigeSkatteoppgjør(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/revurder-bruk-forrige-skatteoppgjør',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Oppretter manuell revurdering for reinnhenting av PGI.
     * Oppretter manuell revurdering for reinnhenting av PGI.
     * @param requestBody
     * @returns unknown default response
     * @throws ApiError
     */
    revurderOgInnhentPgi(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/beregning/revurder-innhent-pgi',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class BrevService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Bestiller generering og sending av brevet
     * @param requestBody Inneholder kode til brevmal og data som skal flettes inn i brevet
     * @returns void Bestilling ok
     * @throws ApiError
     */
    bestillDokument(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/brev/bestill',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent navnet til gitt organisasjonsnr for sending til tredjepart
     * @param requestBody
     * @returns unknown respons fra ereg, eller null viss organisasjon ikke blir funnet
     * @throws ApiError
     */
    getBrevMottakerinfoEreg(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/brev/mottaker-info/ereg',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class BrukerdialogService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer nyeste gyldige vedtak for en gitt aktørId
     * Returnerer nyeste gyldige vedtak for en gitt aktørId
     * @param requestBody
     * @returns HarGyldigOmsorgsdagerVedtakDto default response
     * @throws ApiError
     */
    hentSisteGyldigeVedtakForAktorId(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/brukerdialog/omsorgsdager-kronisk-sykt-barn/har-gyldig-vedtak',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class FagsakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent fagsak for saksnummer
     * @param saksnummer
     * @returns FagsakDto Returnerer fagsak
     * @throws ApiError
     */
    hentFagsak(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak',
            query: {
                saksnummer
            },
            errors: {
                404: 'Fagsak ikke tilgjengelig'
            }
        });
    }
    /**
     * Hent brukerdata for aktørId
     * @param saksnummer
     * @returns PersonDto Returnerer person
     * @throws ApiError
     */
    hentBrukerForFagsak(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak/bruker',
            query: {
                saksnummer
            },
            errors: {
                404: 'Person ikke tilgjengelig'
            }
        });
    }
    /**
     * Finner matchende fagsaker for angitt ytelse, bruker, etc..
     * Søk etter saker på ytelse, bruker, og evt. pleieptrengende/relatertPerson
     * @param requestBody Match kritierer for å lete opp fagsaker
     * @returns FagsakInfoDto default response
     * @throws ApiError
     */
    matchFagsaker(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fagsak/match',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent liste over saket tilknyttet en pleietrengende
     * @param behandlingUuid behandlingUUID
     * @returns RelatertSakDto
     * @throws ApiError
     */
    hentRelaterteSaker(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak/relatertesaker',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Hent rettigheter for saksnummer
     * @param saksnummer
     * @returns SakRettigheterDto Returnerer rettigheter
     * @throws ApiError
     */
    hentRettigheter(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak/rettigheter',
            query: {
                saksnummer
            },
            errors: {
                404: 'Fagsak ikke tilgjengelig'
            }
        });
    }
    /**
     * Spesifikke saker kan søkes via saksnummer. Oversikt over saker knyttet til en bruker kan søkes via fødselsnummer eller d-nummer.
     * Søk etter saker på saksnummer eller fødselsnummer
     * @param requestBody Søkestreng kan være saksnummer, fødselsnummer eller D-nummer.
     * @returns FagsakDto default response
     * @throws ApiError
     */
    søkFagsaker(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fagsak/sok',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Returnerer link til enten samme (hvis ikke ferdig) eller redirecter til /fagsak dersom asynkrone operasjoner er ferdig.
     * Url for å polle på fagsak mens behandlingprosessen pågår i bakgrunnen(asynkront)
     * @param saksnummer
     * @param gruppe
     * @returns AsyncPollingStatus Returnerer Status
     * @throws ApiError
     */
    hentFagsakMidlertidigStatus(saksnummer, gruppe) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/fagsak/status',
            query: {
                saksnummer,
                gruppe
            },
            errors: {
                303: 'Pågående prosesstasks avsluttet',
                418: 'ProsessTasks har feilet'
            }
        });
    }
}
export class FordelService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Mottak av dokument.
     * @param requestBody Hendelse innsendt.
     * @returns PåvirkedeSaker default response
     * @throws ApiError
     */
    innsending(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fagsak/hendelse/innsending',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finn saker påvirket av hendelse
     * Finn saker påvirket av hendelse
     * @param requestBody Oppretter fagsak
     * @returns PåvirkedeSaker default response
     * @throws ApiError
     */
    finnPåvirkedeFagsaker(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fagsak/hendelse/sok',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finn siste fagsak som matcher søkekriteriene
     * Finn siste eksisterende fagsak.
     * @param requestBody Oppretter fagsak
     * @returns unknown default response
     * @throws ApiError
     */
    finnSisteFagsak(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fagsak/siste',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finn eller opprett ny fagsak
     * Finn eller opprett ny sak.
     * @param requestBody Oppretter fagsak
     * @returns SaksnummerDto default response
     * @throws ApiError
     */
    opprettSak(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/fagsak/opprett',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * @deprecated
     * Finn eller opprett ny fagsak basert på D-/fødselsnummer.
     * Finn eller opprett ny sak basert på D-/fødselsnummer.
     * @param requestBody Oppretter fagsak
     * @returns SaksnummerDto default response
     * @throws ApiError
     */
    opprettSakMedFnr(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/fagsak/opprett/fnr',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finn eller opprett sak med gitt saksnummer og motta ny journalpost
     * Finn eller opprett sak med gitt saksnummer og motta ny journalpost
     * @param requestBody Krever saksnummer, journalpostId, aktørId, periode og ytelseType
     * @returns unknown default response
     * @throws ApiError
     */
    opprettSakOgMottaJournalpost(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/fagsak/opprett/journalpost',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Finn eksisterende fagsak
     * Finn eksisterende sak.
     * @param requestBody Oppretter fagsak
     * @returns SaksnummerDto default response
     * @throws ApiError
     */
    finnEksisterendeFagsak(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/fagsak/sok',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * @deprecated
     * Mottak av dokument.
     * @param requestBody Søknad/dokument innsendt.
     * @returns InnsendingMottatt default response
     * @throws ApiError
     */
    innsending1(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/innsending',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Varsel om en nye journalposter som skal behandles i systemet. Alle må tilhøre samme saksnummer, og være av samme type(brevkode, ytelsetype)
     * Ny journalpost skal behandles.
     * @param requestBody Krever saksnummer, journalpostId og behandlingstemaOffisiellKode
     * @returns unknown default response
     * @throws ApiError
     */
    mottaJournalposter(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/journalposter',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Legger til fødselsnumre som skal rutes til Infotrygd for PSB.
     * Legger til aktør-IDer som skal rutes til Infotrygd for PSB.
     * @param requestBody Liste med aktør-IDer
     * @returns unknown default response
     * @throws ApiError
     */
    leggTilPsbInfotrygdAktør(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/psb-infotrygd/aktoer',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Sjekker om PSB-fordeling skal til Infotrygd for minst én av personene.
     * Sjekker om PSB-fordeling skal til Infotrygd for minst én av personene.
     * @param requestBody Sjekker om PSB-fordeling skal til Infotrygd for minst én av personen)
     * @returns boolean default response
     * @throws ApiError
     */
    sjekkPsbInfotrygdPerson(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/psb-infotrygd/finnes',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Legger til fødselsnumre som skal rutes til Infotrygd for PSB.
     * Legger til fødselsnumre som skal rutes til Infotrygd for PSB.
     * @param requestBody Fødselsnumre (skilt med mellomrom eller linjeskift
     * @returns unknown default response
     * @throws ApiError
     */
    leggTilPsbInfotrygdPerson(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/psb-infotrygd/fnr',
            body: requestBody,
            mediaType: 'text/plain'
        });
    }
    /**
     * Sjekker om det finnes en eksisterende fagsak med søker, pleietrengende og/eller relatert part.
     * Sjekker om det finnes en eksisterende fagsak med søker, pleietrengende og/eller relatert part.
     * @param requestBody Søkeparametere
     * @returns boolean default response
     * @throws ApiError
     */
    finnesEksisterendeFagsakMedEnAvAktørene(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/relatertSak',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Setter at angitt saksnumre skal behandles som PB (gammel ordning) for PSB-saker.
     * Setter at angitt saksnumre skal behandles som PB (gammel ordning) for PSB-saker.
     * @param saksnummer
     * @returns unknown default response
     * @throws ApiError
     */
    leggTilPbPerson(saksnummer) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/fordel/sett-til-pb',
            query: {
                saksnummer
            }
        });
    }
}
export class FeriepengerService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Oppretter task som logger saker som vør vurderes for revurdering av feriepenger etter fiks av at kvote er pr år
     * @returns unknown default response
     * @throws ApiError
     */
    finnSakerSomSkalRevurderes() {
        return this.httpRequest.request({
            method: 'POST',
            url: '/feriepengerevurderingkandidater'
        });
    }
}
export class DefaultService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter liste av saker med ubehandlede behandlinger hvor dødsfall er årsak. Resultat er tenkt brukt i enhetenes prioritering av behandlinger. Kan fjernes når ny los løser samme behov. Bruk antall til å justere hvis kallet timer ut.
     * @param antall
     * @returns unknown default response
     * @throws ApiError
     */
    finnUbehandledeDødsfallBehandlinger(antall) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/finn-ubehandlede-saker-doed',
            query: {
                antall
            }
        });
    }
    /**
     * @param redirectTo
     * @param original
     * @returns unknown default response
     * @throws ApiError
     */
    login(redirectTo = '/k9/web/', original = '/k9/sak') {
        return this.httpRequest.request({
            method: 'GET',
            url: '/login',
            query: {
                redirectTo,
                original
            }
        });
    }
    /**
     * Henter liste av saker med ubehandlede unntaksbehandlinger
     * @returns unknown default response
     * @throws ApiError
     */
    finnUbehandledeUnntaksbehandlnger() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/unntaksbehandling/forvaltning/finn-ubehandlede'
        });
    }
}
export class ForvaltningPersonService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent fnr for aktørid
     * @param requestBody AktørIder (skilt med mellomrom eller linjeskift)
     * @returns unknown Hent fnr for aktørid
     * @throws ApiError
     */
    getFnrForAktørId(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/forvaltning/person/hentFnr',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class HistorikkService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter alle historikkinnslag for en gitt sak.
     * @param saksnummer Saksnummer må være et eksisterende saksnummer
     * @returns unknown default response
     * @throws ApiError
     */
    hentAlleInnslag(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/historikk',
            query: {
                saksnummer
            }
        });
    }
}
export class InfotrygdmigreringService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Deaktiverer migrert skjæringstidspunkt fra infotrygd for gitt sak
     * @param requestBody
     * @returns unknown default response
     * @throws ApiError
     */
    deaktiverSkjærinstidspunkt(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/infotrygdmigrering/deaktiverSkjærinstidspunkt',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent saker som har fått deaktivert migrering og har flere perioder
     * @returns SaksnummerDto Returnerer aker som har fått deaktivert migrering og har flere perioder
     * @throws ApiError
     */
    finnSakerMedDeaktivertMigrering() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/infotrygdmigrering/defaktiverteMigreringer'
        });
    }
    /**
     * Hent saker som feilaktig har blitt behandlet som ikke migrert fra infotrygd
     * @returns SaksnummerDto Returnerer saker som feilaktig har blitt behandlet som ikke migrert fra infotrygd
     * @throws ApiError
     */
    feilbehandledeMigreringer() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/infotrygdmigrering/feilbehandletMigrering'
        });
    }
    /**
     * Legger til migrert skjæringstidspunkt fra infotrygd for gitt sak
     * @param requestBody
     * @returns unknown default response
     * @throws ApiError
     */
    leggTilSkjærinstidspunkt(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/infotrygdmigrering/leggTilSkjæringstidspunkt',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Hent skjæringstidspunkter for infotrygdmigrering for saker
     * @param saksnummer
     * @returns MigrertSkjæringstidspunktDto Returnerer alle skjæringstidspunkt som har blitt lagret på sak
     * @throws ApiError
     */
    getSkjæringstidspunkter(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/infotrygdmigrering/skjæringstidspunkter',
            query: {
                saksnummer
            }
        });
    }
}
export class InitFetchService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer
     * @returns InitLinksDto default response
     * @throws ApiError
     */
    hentInitielleRessurser() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/init-fetch'
        });
    }
}
export class IntegrasjonService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Inneholder også detaljer og evt kjent tidspunkt for når systemet er oppe igjen.
     * Gir en oversikt over systemer som er nede
     * @returns SystemNedeDto default response
     * @throws ApiError
     */
    finnSystemerSomErNede() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/integrasjon/status'
        });
    }
    /**
     * Returnerer en boolean som angir om detaljerte feilmeldinger skal vises av GUI
     * @returns boolean default response
     * @throws ApiError
     */
    skalViseDetaljerteFeilmeldinger() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/integrasjon/status/vises'
        });
    }
}
export class KodeverkService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter kodeliste
     * @returns unknown default response
     * @throws ApiError
     */
    hentGruppertKodeliste() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/kodeverk'
        });
    }
    /**
     * Henter liste over behandlende enheter
     * @param ytelseType
     * @returns OrganisasjonsEnhet default response
     * @throws ApiError
     */
    hentBehandlendeEnheter(ytelseType = 'OMP') {
        return this.httpRequest.request({
            method: 'GET',
            url: '/kodeverk/behandlende-enheter',
            query: {
                ytelseType
            }
        });
    }
    /**
     * Ikkje reell implementasjon for bruk. Kun for openapi type generering av k9-formidling kodeverkstyper
     * @returns K9FormidlingKodeverkWeb default response
     * @throws ApiError
     */
    getK9FormidlingKodeverkTyper() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/kodeverk/k9formidling/kodeverk/typer'
        });
    }
    /**
     * Ikkje reell implementasjon for bruk. Kun for openapi type generering av k9-sak kodeverkstyper
     * @returns K9SakKodeverkWeb default response
     * @throws ApiError
     */
    getK9SakKodeverkTyper() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/kodeverk/k9sak/kodeverk/typer'
        });
    }
}
export class LosService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returnerer behandlingen som er tilknyttet id.
     * Hent behandling gitt id
     * @param behandlingUuid behandlingUUID
     * @returns BehandlingMedFagsakDto Returnerer Behandling
     * @throws ApiError
     */
    hentBehandlingData2(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/los/behandling',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * @param behandlingUuid behandlingUUID
     * @returns LosOpplysningerSomManglerIKlageDto Returnerer opplysninger los trenger for å fylle ut klageoppgaver
     * @throws ApiError
     */
    hentLosdataForKlage(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/los/klage/berik',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter merknad på oppgave i los
     * @param behandlingUuid behandlingUUID
     * @returns unknown default response
     * @throws ApiError
     */
    getMerknad(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/los/merknad',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Lagrer merknad på oppgave i los
     * @param requestBody behandlingUUID
     * @returns unknown default response
     * @throws ApiError
     */
    postMerknad(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/los/merknad',
            body: requestBody,
            mediaType: '*/*'
        });
    }
}
export class NavAnsattService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Ident hentes fra sikkerhetskonteksten som er tilgjengelig etter innlogging.
     * Returnerer fullt navn for ident
     * @returns InnloggetAnsattDto default response
     * @throws ApiError
     */
    innloggetBruker() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/nav-ansatt'
        });
    }
    /**
     * Identer hentes fra historikkinnslag og sykdomsvurderinger.
     * Returnerer fullt navn for identer som har berørt en fagsak
     * @param behandlingUuid behandlingUUID
     * @returns SaksbehandlerDto default response
     * @throws ApiError
     */
    getSaksbehandlere(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/saksbehandler',
            query: {
                behandlingUuid
            }
        });
    }
}
export class NotatService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter alle notater for fagsak
     * @param saksnummer Saksnummer
     * @param notatId Notat uuid
     * @returns unknown default response
     * @throws ApiError
     */
    hent(saksnummer, notatId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/notat',
            query: {
                saksnummer,
                notatId
            }
        });
    }
    /**
     * Lag nytt notat
     * @param requestBody Nytt notat
     * @returns unknown default response
     * @throws ApiError
     */
    opprett(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/notat',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Endre eksistrende notat
     * @param requestBody Notat som skal endres
     * @returns unknown default response
     * @throws ApiError
     */
    endre(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/notat/endre',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Skjul notat
     * @param requestBody Notat som skal skjules
     * @returns unknown default response
     * @throws ApiError
     */
    skjul(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/notat/skjul',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class OppdragService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter data som k9-sak sender til k9-oppdrag ved iverksetting
     * Henter data som k9-sak sender til k9-oppdrag ved iverksetting
     * @param behandlingId
     * @returns TilkjentYtelseOppdrag Returnerer data som k9-sak sender tli k9-oppdrag ved iverksetting
     * @throws ApiError
     */
    hentIverksettingData(behandlingId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/oppdrag/forvaltning/hent-iverksetting-data',
            query: {
                behandlingId
            }
        });
    }
}
export class OpplæringsinstitusjonService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Hent opplæringsinstitusjon med uuid
     * @param id
     * @returns GodkjentOpplæringsinstitusjonDto Returnerer opplæringsinstitusjon
     * @returns void Opplæringsinstitusjon ikke funnet
     * @throws ApiError
     */
    hentMedUuid(id) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/opplæringsinstitusjon',
            query: {
                id
            }
        });
    }
    /**
     * Hent aktiv opplæringsinstitusjon med uuid for oppgitt periode
     * @param id
     * @param aktivPeriode Format: YYYY-MM-DD/YYYY-MM-DD
     * @returns GodkjentOpplæringsinstitusjonDto Returnerer aktiv opplæringsinstitusjon
     * @returns void Opplæringsinstitusjon ikke funnet
     * @throws ApiError
     */
    hentAktivMedUuid(id, aktivPeriode) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/opplæringsinstitusjon/aktiv',
            query: {
                id,
                aktivPeriode
            }
        });
    }
    /**
     * Hent aktive opplæringsinstitusjoner for oppgitt periode
     * @param aktivPeriode Format: YYYY-MM-DD/YYYY-MM-DD
     * @returns GodkjentOpplæringsinstitusjonDto Returnerer aktive opplæringsinstitusjoner for oppgitt periode
     * @throws ApiError
     */
    hentAktive(aktivPeriode) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/opplæringsinstitusjon/aktive',
            query: {
                aktivPeriode
            }
        });
    }
    /**
     * Hent opplæringsinstitusjoner
     * @returns GodkjentOpplæringsinstitusjonDto Returnerer opplæringsinstitusjoner
     * @throws ApiError
     */
    hentAlle() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/opplæringsinstitusjon/alle'
        });
    }
    /**
     * Sjekk om opplæringsinstitusjon er aktiv i oppgitt periode
     * @param id
     * @param aktivPeriode Format: YYYY-MM-DD/YYYY-MM-DD
     * @returns boolean Returnerer om opplæringsinstitusjon er aktiv i oppgitt periode
     * @throws ApiError
     */
    erAktiv(id, aktivPeriode) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/opplæringsinstitusjon/erAktiv',
            query: {
                id,
                aktivPeriode
            }
        });
    }
}
export class PipService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter aktørId'er tilknyttet en fagsak
     * @param saksnummer
     * @returns string default response
     * @throws ApiError
     */
    hentAktørIdListeTilknyttetSak(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/pip/aktoer-for-sak',
            query: {
                saksnummer
            }
        });
    }
    /**
     * Henter aktørIder, fagsak- og behandlingstatus tilknyttet til en behandling
     * @param behandlingUuid
     * @returns PipDto default response
     * @throws ApiError
     */
    hentAktørIdListeTilknyttetBehandling(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/pip/pipdata-for-behandling',
            query: {
                behandlingUuid
            }
        });
    }
}
export class ProsesstaskService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Oppretter en ny task klar for kjøring.
     * Oppretter en prosess task i henhold til request
     * @param requestBody Informasjon for restart en eksisterende prosesstask
     * @returns ProsessTaskDataDto Prosesstaskens oppdatert informasjon
     * @throws ApiError
     */
    createProsessTask(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/prosesstask/create',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                500: 'Feilet pga ukjent feil eller tekniske/funksjonelle feil'
            }
        });
    }
    /**
     * En allerede FERDIG prosesstask kan ikke restartes. En prosesstask har normalt et gitt antall forsøk den kan kjøres automatisk. Dette endepunktet vil tvinge tasken til å trigge uavhengig av maks antall forsøk
     * Restarter en eksisterende prosesstask.
     * @param requestBody Informasjon for restart en eksisterende prosesstask
     * @returns ProsessTaskRestartResultatDto Prosesstaskens oppdatert informasjon
     * @throws ApiError
     */
    restartProsessTask(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/prosesstask/launch',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                500: 'Feilet pga ukjent feil eller tekniske/funksjonelle feil'
            }
        });
    }
    /**
     * Lister prosesstasker med angitt status.
     * @param requestBody Liste av statuser som skal hentes.
     * @returns ProsessTaskDataDto Liste over prosesstasker, eller tom liste når angitt/default søkefilter ikke finner noen prosesstasker
     * @throws ApiError
     */
    finnProsessTasks(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/prosesstask/list',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Dette endepunktet vil tvinge feilede tasks til å trigge ett forsøk uavhengig av maks antall forsøk
     * Restarter alle prosesstask med status FEILET.
     * @returns ProsessTaskRetryAllResultatDto Response med liste av prosesstasks som restartes
     * @throws ApiError
     */
    retryAllProsessTask() {
        return this.httpRequest.request({
            method: 'POST',
            url: '/prosesstask/retryall',
            errors: {
                500: 'Feilet pga ukjent feil eller tekniske/funksjonelle feil'
            }
        });
    }
    /**
     * Setter feilet prosesstask med angitt prosesstask-id til FERDIG (kjøres ikke)
     * @param requestBody Prosesstask-id for feilet prosesstask
     * @returns unknown Angitt prosesstask-id satt til status FERDIG
     * @throws ApiError
     */
    setFeiletProsessTaskFerdig(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/prosesstask/setferdig',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                500: 'Feilet pga ukjent feil eller tekniske/funksjonelle feil'
            }
        });
    }
}
export class JournalposterService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * @deprecated
     * Henter uferdig journalposter fra punsj for en gitt behandlingUuid
     * @param behandlingUuid behandlingUUID
     * @returns JournalpostIderDto Returnerer en liste med uferdig journalpostIder som ligger i punsj på gitt behandlingUuid.
     * @throws ApiError
     */
    getUferdigJournalpostIderPrAktoer(behandlingUuid) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/punsj/journalpost/uferdig',
            query: {
                behandlingUuid
            }
        });
    }
    /**
     * Henter uferdige journalposter fra punsj for søker og pleietrengende
     * @param saksnummer SAKSNUMMER
     * @returns JournalpostIderDto Returnerer en liste med uferdig journalpostIder som ligger i punsj på et gitt saksnummer.
     * @throws ApiError
     */
    getUferdigJournalpostIderPrAktoer1(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/punsj/journalpost/uferdig/v2',
            query: {
                saksnummer
            }
        });
    }
}
export class RapporteringService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter en dump av info for debugging og analyse av en sak
     * Dumper en rapport av data
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    genererRapportForYtelse(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/rapportering/generer',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
}
export class RegisterdataService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Callback når registerinnhenting av IAY har blitt fullført i Abakus
     * @param requestBody callbackDto
     * @returns unknown default response
     * @throws ApiError
     */
    callback(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/registerdata/iay/callback',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class SaksnummerService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Henter reservert saksnummer med ytelse, bruker og pleietrengende
     * Hent reservert saksnummer.
     * @param saksnummer SaksnummerDto
     * @returns HentReservertSaksnummerDto default response
     * @throws ApiError
     */
    hentReservertSaksnummer(saksnummer) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/saksnummer',
            query: {
                saksnummer
            }
        });
    }
    /**
     * Reserver saksnummer
     * Reserver saksnummer.
     * @param requestBody ReserverSaksnummerDto
     * @returns SaksnummerDto default response
     * @throws ApiError
     */
    reserverSaksnummer(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/saksnummer/reserver',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Henter reserverte saksnummer med ytelse, bruker og pleietrengende
     * Hent alle reserverte saksnummer på søker.
     * @param requestBody AktørIdDto
     * @returns HentReservertSaksnummerDto default response
     * @throws ApiError
     */
    hentReserverteSaksnummerPåSøker(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/saksnummer/søker',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
export class UttakService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Fjerner prosesstrigger for endring fra annen omsorgsperson
     * Fjerner prosesstrigger for endring fra annen omsorgsperson
     * @param requestBody Behandling-id
     * @returns unknown default response
     * @throws ApiError
     */
    fjernProsessTriggerForEndringFraAnnenOmsorgsperson(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/uttak/fjern-prosesstrigger-endring-annen-omsorgsperson',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
    /**
     * Fjerner prosesstrigger for endring fra annen omsorgsperson
     * Fjerner prosesstrigger for endring fra annen omsorgsperson
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    fjernProsessTriggerForEndringFraAnnenOmsorgspersonMedGittPeriode(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/uttak/fjern-prosesstrigger-endring-annen-omsorgsperson-gitt-periode',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Henter tidslinje for revurdering av uttak
     * Henter tidslinje for revurdering av uttak
     * @param formData
     * @returns unknown default response
     * @throws ApiError
     */
    hentEndringsperioderTidslinje(formData) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/uttak/hent-endret-uttak-revurdering-tidslinjer',
            formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    /**
     * Henter tidslinjer som fører til endring i sak
     * Henter tidslinjer der annen omsorgsperson påvirket sak for sak med behandlingsårsak RE_ANNEN_SAK
     * @param requestBody Behandling-id
     * @returns unknown default response
     * @throws ApiError
     */
    hentTidslinjerEndringFraAnnenOmsorgsperson(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/uttak/hent-endringstidslinjer-fra-annen-omsorgsperson',
            body: requestBody,
            mediaType: 'application/json'
        });
    }
}
//# sourceMappingURL=services.gen.js.map