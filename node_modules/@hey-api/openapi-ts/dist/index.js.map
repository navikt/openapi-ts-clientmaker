{"version":3,"sources":["../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js","../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js","../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js","../../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js","../../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/lib/util/resolveCommand.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/lib/util/escape.js","../../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js","../../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/lib/util/readShebang.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/lib/parse.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/lib/enoent.js","../../../node_modules/.pnpm/cross-spawn@7.0.5/node_modules/cross-spawn/index.js","../src/index.ts","../src/utils/regexp.ts","../src/utils/escape.ts","../src/compiler/utils.ts","../src/utils/config.ts","../src/compiler/types.ts","../src/compiler/module.ts","../src/compiler/classes.ts","../src/compiler/convert.ts","../src/compiler/return.ts","../src/compiler/transform.ts","../src/compiler/typedef.ts","../src/compiler/index.ts","../src/ir/parser.ts","../src/generate/class.ts","../src/utils/getHttpRequestName.ts","../src/utils/sort.ts","../src/generate/utils.ts","../src/generate/client.ts","../src/generate/core.ts","../src/generate/files.ts","../src/openApi/shared/utils/identifier.ts","../src/utils/stringCase.ts","../src/generate/indexFile.ts","../src/generate/output.ts","../src/utils/ref.ts","../src/ir/context.ts","../src/openApi/shared/utils/filter.ts","../src/openApi/shared/utils/parameter.ts","../src/openApi/common/parser/sanitize.ts","../src/openApi/shared/utils/operation.ts","../src/ir/mediaType.ts","../src/openApi/2.0.x/parser/mediaType.ts","../src/ir/pagination.ts","../src/ir/utils.ts","../src/openApi/shared/utils/discriminator.ts","../src/openApi/2.0.x/parser/schema.ts","../src/openApi/2.0.x/parser/pagination.ts","../src/openApi/2.0.x/parser/operation.ts","../src/openApi/2.0.x/parser/parameter.ts","../src/openApi/2.0.x/parser/index.ts","../src/openApi/3.0.x/parser/mediaType.ts","../src/openApi/3.0.x/parser/schema.ts","../src/openApi/3.0.x/parser/pagination.ts","../src/openApi/3.0.x/parser/operation.ts","../src/openApi/3.0.x/parser/parameter.ts","../src/openApi/3.0.x/parser/requestBody.ts","../src/openApi/3.0.x/parser/index.ts","../src/openApi/3.1.x/parser/mediaType.ts","../src/openApi/3.1.x/parser/schema.ts","../src/openApi/3.1.x/parser/pagination.ts","../src/openApi/3.1.x/parser/operation.ts","../src/openApi/3.1.x/parser/parameter.ts","../src/openApi/3.1.x/parser/requestBody.ts","../src/openApi/3.1.x/parser/index.ts","../src/openApi/common/parser/service.ts","../src/utils/const.ts","../src/utils/transform.ts","../src/openApi/v3/parser/inferType.ts","../src/openApi/common/parser/stripNamespace.ts","../src/openApi/common/parser/type.ts","../src/utils/unique.ts","../src/openApi/common/parser/getEnums.ts","../src/openApi/common/parser/getPattern.ts","../src/openApi/v2/parser/getModelProperties.ts","../src/openApi/common/parser/getRef.ts","../src/openApi/v2/parser/getRequiredPropertiesFromComposition.ts","../src/openApi/v2/parser/getModelComposition.ts","../src/openApi/v2/parser/getModel.ts","../src/openApi/v2/parser/getModels.ts","../src/utils/enum.ts","../src/utils/meta.ts","../src/utils/type.ts","../src/openApi/common/parser/operation.ts","../src/openApi/common/parser/getDefault.ts","../src/openApi/v2/parser/getOperationParameter.ts","../src/openApi/v2/parser/getOperationParameters.ts","../src/openApi/common/parser/sort.ts","../src/openApi/v2/parser/getOperationResponse.ts","../src/openApi/v2/parser/getOperationResponses.ts","../src/openApi/v2/parser/operation.ts","../src/openApi/v2/parser/getOperations.ts","../src/openApi/v2/parser/getServer.ts","../src/openApi/v2/index.ts","../src/openApi/v3/parser/discriminator.ts","../src/openApi/v3/parser/getModelProperties.ts","../src/openApi/v3/parser/getRequiredPropertiesFromComposition.ts","../src/openApi/v3/parser/getModelComposition.ts","../src/openApi/v3/parser/getModel.ts","../src/openApi/v3/parser/parameter.ts","../src/openApi/v3/parser/getModels.ts","../src/openApi/v3/parser/getOperationParameter.ts","../src/openApi/v3/parser/getOperationParameters.ts","../src/openApi/v3/parser/getContent.ts","../src/openApi/v3/parser/getOperationRequestBody.ts","../src/openApi/v3/parser/getOperationResponse.ts","../src/openApi/v3/parser/getOperationResponses.ts","../src/openApi/v3/parser/operation.ts","../src/openApi/v3/parser/getOperations.ts","../src/openApi/v3/parser/getServer.ts","../src/openApi/v3/index.ts","../src/openApi/index.ts","../src/plugins/@hey-api/schemas/plugin.ts","../src/plugins/@hey-api/schemas/plugin-legacy.ts","../src/plugins/@hey-api/schemas/config.ts","../src/ir/parameter.ts","../src/ir/schema.ts","../src/ir/operation.ts","../src/utils/postprocess.ts","../src/plugins/shared/utils/ref.ts","../src/plugins/zod/plugin.ts","../src/plugins/@hey-api/transformers/plugin.ts","../src/plugins/@hey-api/typescript/ref.ts","../src/plugins/@hey-api/sdk/plugin-legacy.ts","../src/plugins/@hey-api/sdk/plugin.ts","../src/plugins/@hey-api/sdk/config.ts","../src/plugins/@hey-api/typescript/plugin-legacy.ts","../src/plugins/@hey-api/transformers/plugin-legacy.ts","../src/plugins/@hey-api/transformers/config.ts","../src/plugins/@hey-api/typescript/plugin.ts","../src/plugins/shared/utils/case.ts","../src/plugins/@hey-api/typescript/config.ts","../src/plugins/@tanstack/query-core/client.ts","../src/plugins/@tanstack/query-core/useType.ts","../src/plugins/@tanstack/query-core/queryKey.ts","../src/plugins/@tanstack/query-core/infiniteQueryOptions.ts","../src/plugins/@tanstack/query-core/mutationOptions.ts","../src/plugins/@tanstack/query-core/queryOptions.ts","../src/plugins/@tanstack/query-core/plugin.ts","../src/plugins/@tanstack/query-core/plugin-legacy.ts","../src/plugins/@tanstack/angular-query-experimental/config.ts","../src/plugins/@tanstack/react-query/config.ts","../src/plugins/@tanstack/solid-query/config.ts","../src/plugins/@tanstack/svelte-query/config.ts","../src/plugins/@tanstack/vue-query/config.ts","../src/plugins/fastify/plugin.ts","../src/plugins/fastify/config.ts","../src/plugins/zod/config.ts","../src/plugins/index.ts","../src/types/config.ts","../src/utils/handlebars.ts","../src/legacy/handlebars/compiled/client.js","../src/legacy/handlebars/compiled/core/angular/getHeaders.js","../src/legacy/handlebars/compiled/core/angular/getRequestBody.js","../src/legacy/handlebars/compiled/core/angular/getResponseBody.js","../src/legacy/handlebars/compiled/core/angular/getResponseHeader.js","../src/legacy/handlebars/compiled/core/angular/request.js","../src/legacy/handlebars/compiled/core/angular/sendRequest.js","../src/legacy/handlebars/compiled/core/ApiError.js","../src/legacy/handlebars/compiled/core/ApiRequestOptions.js","../src/legacy/handlebars/compiled/core/ApiResult.js","../src/legacy/handlebars/compiled/core/axios/getHeaders.js","../src/legacy/handlebars/compiled/core/axios/getRequestBody.js","../src/legacy/handlebars/compiled/core/axios/getResponseBody.js","../src/legacy/handlebars/compiled/core/axios/getResponseHeader.js","../src/legacy/handlebars/compiled/core/axios/request.js","../src/legacy/handlebars/compiled/core/axios/sendRequest.js","../src/legacy/handlebars/compiled/core/BaseHttpRequest.js","../src/legacy/handlebars/compiled/core/CancelablePromise.js","../src/legacy/handlebars/compiled/core/fetch/getHeaders.js","../src/legacy/handlebars/compiled/core/fetch/getRequestBody.js","../src/legacy/handlebars/compiled/core/fetch/getResponseBody.js","../src/legacy/handlebars/compiled/core/fetch/getResponseHeader.js","../src/legacy/handlebars/compiled/core/fetch/request.js","../src/legacy/handlebars/compiled/core/fetch/sendRequest.js","../src/legacy/handlebars/compiled/core/functions/base64.js","../src/legacy/handlebars/compiled/core/functions/catchErrorCodes.js","../src/legacy/handlebars/compiled/core/functions/getFormData.js","../src/legacy/handlebars/compiled/core/functions/getQueryString.js","../src/legacy/handlebars/compiled/core/functions/getUrl.js","../src/legacy/handlebars/compiled/core/functions/isBlob.js","../src/legacy/handlebars/compiled/core/functions/isFormData.js","../src/legacy/handlebars/compiled/core/functions/isString.js","../src/legacy/handlebars/compiled/core/functions/isStringWithValue.js","../src/legacy/handlebars/compiled/core/functions/isSuccess.js","../src/legacy/handlebars/compiled/core/functions/resolve.js","../src/legacy/handlebars/compiled/core/HttpRequest.js","../src/legacy/handlebars/compiled/core/OpenAPI.js","../src/legacy/handlebars/compiled/core/request.js","../src/legacy/handlebars/compiled/core/xhr/getHeaders.js","../src/legacy/handlebars/compiled/core/xhr/getRequestBody.js","../src/legacy/handlebars/compiled/core/xhr/getResponseBody.js","../src/legacy/handlebars/compiled/core/xhr/getResponseHeader.js","../src/legacy/handlebars/compiled/core/xhr/request.js","../src/legacy/handlebars/compiled/core/xhr/sendRequest.js","../src/utils/performance.ts","../src/utils/exports.ts"],"names":["require_windows","__commonJSMin","exports","module","isexe","sync","fs","checkPathExt","path","options","pathext","i","p","checkStat","stat","cb","er","require_mode","checkMode","mod","uid","gid","myUid","myGid","u","g","o","ug","ret","require_isexe","core","resolve","reject","is","require_which","isWindows","COLON","getNotFoundError","cmd","getPathInfo","opt","colon","pathEnv","pathExtExe","pathExt","which","found","step","ppRaw","pathPart","pCmd","subStep","ii","ext","res","whichSync","j","cur","require_path_key","pathKey","environment","key","require_resolveCommand","getPathKey","resolveCommandAttempt","parsed","withoutPathExt","env","cwd","hasCustomCwd","shouldSwitchCwd","resolved","resolveCommand","require_escape","metaCharsRegExp","escapeCommand","arg","escapeArgument","doubleEscapeMetaChars","require_shebang_regex","require_shebang_command","shebangRegex","string","match","argument","binary","require_readShebang","shebangCommand","readShebang","command","buffer","fd","require_parse","escape","isWin","isExecutableRegExp","isCmdShimRegExp","detectShebang","shebang","parseNonShell","commandFile","needsShell","needsDoubleEscapeMetaChars","shellCommand","parse","args","require_enoent","notFoundError","original","syscall","hookChildProcess","cp","originalEmit","name","arg1","err","verifyENOENT","status","verifyENOENTSync","require_cross_spawn","enoent","spawn","spawned","spawnSync","result","import_cross_spawn","illegalStartCharactersRegExp","numberRegExp","reservedBrowserGlobalsRegExp","reservedJavaScriptGlobalsRegExp","reservedJavaScriptKeywordsRegExp","reservedNodeGlobalsRegExp","reservedTypeScriptKeywordsRegExp","validTypescriptIdentifierRegExp","escapeName","value","unescapeName","escapeComment","_l","w","EOL","_config","getConfig","setConfig","config","isLegacyClient","legacyNameFromConfig","printer","ts","createSourceFile","sourceText","blankSourceFile","unescapeUnicode","_","hex","tsNodeToString","node","unescape","stringToTsNodes","createIdentifier","text","ots","alias","asType","nameNode","aliasNode","hasBothQuotes","hasNewlines","hasUnescapedBackticks","isBacktickEscaped","createStringLiteral","isTsNode","isType","processCommentObject","commentObject","lines","line","jsdocTexts","index","jsdoc","cleanedJsdoc","addLeadingComments","comments","isObjectStyle","comment","commentObjects","createTypeNode","base","createTypeReferenceNode","createPropertyAccessChain","expression","createPropertyAccessExpression","isOptional","nodeExpression","nodeName","createNull","toExpression","identifiers","isValueAccess","shorthand","createArrayLiteralExpression","createObjectType","parts","toAccessLevelModifiers","access","keyword","modifiers","toParameterDeclarations","parameters","parameter","createParameterDeclaration","param","createKeywordTypeNode","kind","toTypeParameters","types","type","createLiteralTypeNode","literal","createArrowFunction","async","multiLine","returnType","statements","createBlock","createAnonymousFunction","elements","createAwaitExpression","createFunctionTypeNode","typeParameters","obj","properties","canShorthand","assignment","nameIdentifier","createAsExpression","initializer","createPropertyAssignment","createEnumDeclaration","enumMemberComments","members","enumMember","createEnumMember","createNamespaceDeclaration","createIndexedAccessTypeNode","indexType","objectType","isSingleQuote","createConditionalExpression","condition","whenFalse","whenTrue","createTypeOfExpression","createTypeAliasDeclaration","exportType","typeArguments","typeName","createTypeParenthesizedNode","required","createNewExpression","argumentsArray","createForOfStatement","awaitModifier","statement","createAssignment","left","right","createRegularExpressionLiteral","flags","createExportAllDeclaration","createCallExpression","functionName","createNamedExportDeclarations","exportedTypes","hasNonTypeExport","item","exportClause","moduleSpecifier","createConstVariable","assertion","destructure","exportConst","declaration","createNamedImportDeclarations","imports","importedTypes","hasNonTypeImport","namedBindings","importClause","createConstructorDeclaration","accessLevel","createMethodDeclaration","isStatic","createClassDeclaration","decorator","m","member","expressionToStatement","createReturnStatement","createReturnFunctionCall","createReturnVariable","createSafeAccessExpression","element","createAccessExpression","createPropertyAccessExpressions","expressions","createBinaryExpression","operator","createIfStatement","elseStatement","thenStatement","createDateTransformMutation","safeAccessExpression","accessExpression","createFunctionTransformMutation","transformerName","createArrayTransformMutation","createDateTransformerExpression","parameterName","createArrayMapTransform","transformExpression","nullNode","maybeNullable","isNullable","createTypeInterfaceNode","indexProperty","useLegacyResolution","property","questionToken","propertyTypes","signature","indexSignature","createTypeUnionNode","nodes","createTypeIntersectionNode","createTypeTupleNode","createTypeRecordNode","keys","values","keyNode","valueNode","createTypeArrayNode","compiler","parseIR","context","schema","$ref","requestBody","pathItem","_method","method","operation","getHttpRequestName","client","sort","a","b","nameA","nameB","sorterByName","sortByName","items","ensureDirSync","removeDirSync","relativeModulePath","moduleOutput","sourceOutput","outputParts","generateLegacyClientClass","openApi","outputPath","templates","templateResult","clientModulePath","clientApi","generateClientBundle","dirPath","clientModulePathComponents","__require","clientSrcPath","file","generateLegacyCore","requestFile","regexps","ensureValidIdentifier","identifier","regexp","uppercaseRegExp","lowercaseRegExp","identifierRegExp","separatorsRegExp","leadingSeparatorsRegExp","separatorsAndIdentifierRegExp","numbersAndIdentifierRegExp","preserveCase","_case","isLastCharLower","isLastCharUpper","isLastLastCharUpper","isLastLastCharPreserved","separator","character","nextIndex","nextCharacter","isSeparatorBeforeNextCharacter","characterLower","characterUpper","stringCase","stripLeadingSeparators","offset","TypeScriptFile","dir","exportFromIndex","header","identifierCase","namespace","refValue","ensureUniqueIdentifier","importedItem","moduleMap","splitNameAndExtension","id","thisRelativePath","fileRelativePath","fileName","extension","output","importsStringArray","_module","count","create","nameTransformer","nameWithTransform","nameWithCasing","nameValue","generateIndexFile","files","generateLegacyOutput","spec","service","model","plugin","outputDir","generateOutput","indexFile","irRef","isRefOpenApiComponent","refToParts","refToName","resolveRef","current","part","IRContext","event","callbackFn","response","error","createdFile","canProcessRef","excludeRegExp","includeRegExp","mergeParametersObjects","source","target","ensureValidTypeScriptJavaScriptIdentifier","replaced","sanitizeNamespaceIdentifier","sanitizeOperationParameterName","withoutBrackets","ensureUniqueOperationId","operationIds","operationKey","operationToId","urlWithoutPlaceholders","fileLikeRegExp","jsonMimeRegExp","multipartFormDataMimeRegExp","xWwwFormUrlEncodedMimeRegExp","isMediaTypeFileLike","mediaType","mediaTypeToIrMediaType","contentToSchema","content","mediaTypeObject","mimeTypes","paginationKeywordsRegExp","addItemsToSchema","logicalOperator","mutateSchemaOneItem","discriminatorValue","mapping","getSchemaType","parseSchemaJsDoc","irSchema","parseSchemaMeta","parseArray","schemaItems","irItemsSchema","schemaToIrSchema","ofArray","parseBoolean","parseNumber","parseObject","schemaProperties","irAdditionalPropertiesSchema","parseString","initIrSchema","parseAllOf","schemaType","compositionSchemas","compositionSchema","irCompositionSchema","ref","irDiscriminatorSchema","irObjectSchema","parseOneType","requiredProperty","finalCompositionSchema","nestedItems","parseEnum","enumValue","typeOfEnumValue","enumType","enumSchema","parseRef","parseNullableType","typeIrSchema","parseType","parseUnknown","parseSchema","isPaginationType","paginationField","refSchema","finalSchema","allOf","pagination","parseOperationJsDoc","irOperation","initIrOperation","operationToIrOperation","securitySchemesMap","isRequestBodyRequired","requestBodyObject","requestBodyObjectRequired","requestBodyParameter","responseObject","securitySchemeObjects","securityRequirementObject","securitySchemeObject","irSecuritySchemeObject","parseOperation","defaultExplode","collectionFormat","defaultStyle","_in","parametersArrayToObject","parametersObject","parameterOrReference","parameterToIrParameter","style","irParameter","parseV2_0_X","shouldProcessRef","finalPathItem","commonOperation","operationArgs","$refDelete","$refGet","$refHead","$refOptions","$refPatch","$refPost","$refPut","parseAnyOf","parseOneOf","defaultAllowReserved","explode","parseParameter","requestBodyToIrRequestBody","irRequestBody","parseRequestBody","parseV3_0_X","securityOrReference","requestBodyOrReference","$refTrace","getSchemaTypes","parseNull","schemaTypes","parseManyTypes","nonNullCompositionSchemas","parseV3_1_X","allowedServiceMethods","getServiceVersion","version","refParametersPartial","refSchemasPartial","transformServiceName","transformTypeName","cleanAndTransformTypeName","transformed","inferType","definition","definitionTypes","isDefinitionTypeNullable","getDefinitionTypes","isDefinitionNullable","stripNamespace","getMappedType","format","hasSquareBracketsRegExp","getType","debug","joinedType","mapped","typeWithoutNamespace","matches","match1","match2","encodedType","unique","arr","getEnums","descriptions","names","getPattern","pattern","getModelProperties","getModel","models","propertyName","propertyRequired","ESCAPED_REF_SLASH","ESCAPED_REF_TILDE","getRef","paths","decodedPath","getRequiredPropertiesFromComposition","definitions","getModelComposition","composition","hasProperties","hasEnums","requiredProperties","modelProperties","modelProperty","isDefinition","meta","definitionRef","enums","arrayItems","additionalProperties","definitionType","getModels","definitionName","enumKey","customName","enumUnionType","enumerator","union","enumEntry","enumMeta","serialized","getParametersMeta","getSchemasMeta","isModelDate","typeReference","typeNode","typeArray","toType","typeEnum","typeDict","typeUnionOrIntersection","typeInterface","isLegacy","maybeRequired","transformTypeKeyName","setUniqueTypeName","unsetUniqueTypeName","getOperationKey","getOperationResponseHeader","operationResponses","isOperationParameterRequired","parseResponseStatusCode","code","sorterByResponseStatusCode","isErrorStatusCode","isSuccessStatusCode","inferDefaultResponseTypes","responses","addResponseType","description","$refs","errorKeywords","operationFilterFn","operationNameFn","operationId","operationParameterFilterFn","operationParameterNameFn","tagResponseTypes","getDefault","getOperationParameter","operationParameterWithoutName","operationParameter","allowedIn","getOperationParameters","operationParameters","parameterDef","skip","toSortedByRequired","aNeedsValue","bNeedsValue","getOperationResponse","operationResponse","getOperationResponses","responseCode","responseOrReference","getOperation","op","pathParams","url","operationWithoutName","successResponses","getOperations","operations","pathParameters","getServer","scheme","host","basePath","server","inverseDictionary","map","m2","findOneOfParentDiscriminator","parent","mapPropertyValue","discriminator","getAdditionalPropertiesModel","ap","apModel","apType","additionalPropertiesType","propertyValues","findModelComposition","def","foundComposition","propertiesProperty","initialValues","parentDefinition","inferredType","acc","arrayItemsDefinition","definitionConst","modelConst","getParameterSchema","contents","BASIC_MEDIA_TYPES","getContent","basicMediaTypeWithSchema","cleanMediaType","firstMediaTypeWithSchema","getOperationRequestBody","body","mergeParameters","opParams","globalParams","mergedParameters","pendingParameters","pendingParam","requestBodyDef","variables","variable","parseLegacy","parseOpenApiSpec","schemasId","stripSchema","schemaToJsonSchemaDraft_04","_schema","schemaToJsonSchemaDraft_05","schemaToJsonSchema2020_12","schemaName","schemasV2_0_X","schemasV3_0_X","schemasV3_1_X","handler","ensureValidSchemaOutput","parentKey","toSchemaName","validName","handlerLegacy","addSchema","defaultConfig","hasParameterGroupObjectRequired","parameterGroup","hasParametersObjectRequired","parameterWithPagination","deduplicateSchema","uniqueItems","typeIds","typeId","liftedSchema","hasOperationDataRequired","operationPagination","statusCodeToGroup","statusCode","operationResponsesMap","errors","defaultResponse","inferred","errorKeys","errorUnion","responseKeys","responseUnion","postProcessClient","postProcessModel","postProcessOperations","postProcessService","services","parserOperation","tag","getServiceName","getNewService","clone","postProcessServiceOperations","operationIrRef","affix","zodId","defaultIdentifier","intersectionIdentifier","lazyIdentifier","lengthIdentifier","literalIdentifier","maxIdentifier","mergeIdentifier","minIdentifier","optionalIdentifier","readonlyIdentifier","regexIdentifier","unionIdentifier","zIdentifier","arrayTypeToZodSchema","arrayExpression","unknownTypeToZodSchema","itemExpressions","schemaToZodSchema","booleanTypeToZodSchema","enumTypeToZodSchema","enumMembers","neverTypeToZodSchema","nullTypeToZodSchema","numberTypeToZodSchema","isBigInt","numberExpression","objectTypeToZodSchema","isRequired","propertyExpression","stringTypeToZodSchema","stringExpression","tupleTypeToZodSchema","tupleElements","undefinedTypeToZodSchema","voidTypeToZodSchema","schemaTypeToZodSchema","operationToZodSchema","optional","isCircularReference","identifierRef","refIdentifier","itemTypes","firstSchema","callParameter","bigIntExpressions","dataExpression","bigIntCallExpression","dateExpressions","identifierDate","operationTransformerIrRef","schemaIrRef","schemaResponseTransformerRef","transformersId","dataVariableName","ensureStatements","isNodeReturnStatement","schemaResponseTransformerNodes","identifierData","processSchemaType","callExpression","propertyAccessExpression","propertyNodes","arrayNodes","identifierItem","identifierResponse","identifierResponseTransformer","responseTransformerNode","typesId","onGet","importIdentifierData","importIdentifierError","identifierError","importIdentifierResponse","generateImport","onImport","setUniqueTypeNameArgs","created","modelResponseTransformerTypeName","operationDataTypeName","operationErrorTypeName","operationResponseTransformerTypeName","operationResponseTypeName","operationOptionsLegacyParserType","importedType","throwOnError","optionsName","toOperationParamType","getDefaultPrintable","typePath","toOperationReturnType","toOperationComment","params","toRequestOptions","onClientImport","responseTransformerName","toObj","prev","curr","errorResponses","serviceFunctionIdentifier","handleIllegal","toOperationStatements","errorType","responseType","processService","onNode","throwOnErrorTypeGeneric","compileFunctionParams","sdkOutput","imported","operationOptionsType","sdkId","getResponseType","contentType","cleanContent","securitySchemeObjectToAuthObject","operationAuth","auth","authObject","operationStatements","requestOptions","identifierTransformer","identifierSchema","generateClassSdk","sdks","uniqueTags","generateFlatSdk","clientModule","treeName","emptyModel","generateEnum","leadingComment","generateType","onCreated","processComposition","props","enumDeclarations","processType","processEnum","processScopedEnum","processModel","processServiceTypes","pathsMap","pathMap","methodMap","bodyParameters","bodyParameter","headerParameters","queryParameters","operationProperties","methodParameters","operationName","reqKey","reqResParameters","resKey","isVoidResponse","getRefModels","refModel","ensureModelResponseTransformerExists","modelName","generateResponseTransformer","processArray","refModels","nameModelResponseTransformer","processProperty","onRemoveNode","nonVoidResponses","nameCreated","fieldName","addJavaScriptEnum","enumObject","schemaToEnumObject","typeofItems","typeOfItemConst","addTypeEnum","schemaToType","addTypeScriptEnum","arrayTypeToIdentifier","booleanTypeToIdentifier","enumTypeToIdentifier","isRefComponent","shouldExportEnum","objectNode","enumNode","numberTypeToIdentifier","objectTypeToIdentifier","indexPropertyItems","hasOptionalProperties","stringTypeToIdentifier","tupleTypeToIdentifier","schemaTypeToIdentifier","irParametersToIrSchema","operationToDataType","data","dataRequired","operationToType","identifierErrors","errorsType","keyofType","identifierResponses","responsesType","getClientBaseUrlKey","useTypeData","useTypeError","typeError","axiosError","useTypeResponse","createQueryKeyFn","queryKeyName","TOptionsType","createQueryKeyFunction","infiniteIdentifier","identifierCreateQueryKey","fn","createQueryKeyLiteral","isInfinite","createQueryKeyType","queryKeyType","queryKeyFunctionIdentifier","queryKeyStatement","typeQueryKey","typeData","identifierQueryKey","createInfiniteParamsFn","infiniteQueryOptionsFn","createInfiniteParamsFunction","infiniteQueryOptionsFunctionIdentifier","createInfiniteQueryOptions","queryFn","state","typeResponse","typePageObjectParam","typePageParam","infiniteQueryKeyName","mutationOptionsFn","mutationOptionsFunctionIdentifier","createMutationOptions","mutationsType","queryOptionsFn","queryOptionsFunctionIdentifier","createQueryOptions","toInfiniteQueryOptionsName","toMutationOptionsName","toQueryOptionsName","toQueryKeyName","getPaginationIn","createTypeData","typesModulePath","nameTypeData","createTypeError","pluginName","nameTypeError","createTypeResponse","nameTypeResponse","typeInfiniteData","hasCreateInfiniteParamsFunction","hasCreateQueryKeyParamsFunction","hasInfiniteQueries","hasMutations","hasQueries","processedOperations","hasUsedQueryFn","paginationParameter","sdkModulePath","fastifyId","operationToRouteHandler","fileTypes","errorsTypeReference","defaultType","responsesTypeReference","replyTypes","routeHandlers","routeHandler","defaultPluginConfigs","CLIENTS","client_default","container","depth0","helpers","partials","stack1","alias1","alias2","lookupProperty","alias3","getHeaders_default","getRequestBody_default","getResponseBody_default","getResponseHeader_default","request_default","sendRequest_default","ApiError_default","ApiRequestOptions_default","ApiResult_default","BaseHttpRequest_default","CancelablePromise_default","base64_default","catchErrorCodes_default","getFormData_default","getQueryString_default","getUrl_default","isBlob_default","isFormData_default","isString_default","isStringWithValue_default","isSuccess_default","resolve_default","HttpRequest_default","OpenAPI_default","registerHandlebarHelpers","Handlebars","registerHandlebarTemplates","idEnd","idLength","idStart","Performance","PerformanceReport","totalMark","marks","totalDuration","totalName","mark","markMeasure","markDuration","percentage","utils","formatters","linters","processOutput","getClient","userConfig","getInput","input","getLogs","logs","getOutput","getPluginsConfig","pluginConfigs","userPlugins","userPluginsConfig","circularReferenceTracker","pluginOrder","plugins","dfs","defaultOptions","userOptions","nativePluginOption","dependency","userPlugin","getPlugins","defaultPlugins","getSpec","inputPath","watch","refParser","$RefParser","resolvedInput","getResolvedInput","arrayBuffer","hasChanged","sendRequest","eTag","lastModified","getWatch","initConfigs","configurationFile","configFromFile","loadConfig","configFile","dryRun","experimentalParser","exportCore","request","useOptions","createClient","configs","pCreateClient","_watch","logName","logsDir","logPath","defineConfig"],"mappings":"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","file":"index.js","sourcesContent":["module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction checkPathExt (path, options) {\n  var pathext = options.pathExt !== undefined ?\n    options.pathExt : process.env.PATHEXT\n\n  if (!pathext) {\n    return true\n  }\n\n  pathext = pathext.split(';')\n  if (pathext.indexOf('') !== -1) {\n    return true\n  }\n  for (var i = 0; i < pathext.length; i++) {\n    var p = pathext[i].toLowerCase()\n    if (p && path.substr(-p.length).toLowerCase() === p) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction checkStat (stat, path, options) {\n  if (!stat.isSymbolicLink() && !stat.isFile()) {\n    return false\n  }\n  return checkPathExt(path, options)\n}\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, path, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), path, options)\n}\n","module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), options)\n}\n\nfunction checkStat (stat, options) {\n  return stat.isFile() && checkMode(stat, options)\n}\n\nfunction checkMode (stat, options) {\n  var mod = stat.mode\n  var uid = stat.uid\n  var gid = stat.gid\n\n  var myUid = options.uid !== undefined ?\n    options.uid : process.getuid && process.getuid()\n  var myGid = options.gid !== undefined ?\n    options.gid : process.getgid && process.getgid()\n\n  var u = parseInt('100', 8)\n  var g = parseInt('010', 8)\n  var o = parseInt('001', 8)\n  var ug = u | g\n\n  var ret = (mod & o) ||\n    (mod & g) && gid === myGid ||\n    (mod & u) && uid === myUid ||\n    (mod & ug) && myUid === 0\n\n  return ret\n}\n","var fs = require('fs')\nvar core\nif (process.platform === 'win32' || global.TESTING_WINDOWS) {\n  core = require('./windows.js')\n} else {\n  core = require('./mode.js')\n}\n\nmodule.exports = isexe\nisexe.sync = sync\n\nfunction isexe (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  if (!cb) {\n    if (typeof Promise !== 'function') {\n      throw new TypeError('callback not provided')\n    }\n\n    return new Promise(function (resolve, reject) {\n      isexe(path, options || {}, function (er, is) {\n        if (er) {\n          reject(er)\n        } else {\n          resolve(is)\n        }\n      })\n    })\n  }\n\n  core(path, options || {}, function (er, is) {\n    // ignore EACCES because that just means we aren't allowed to run it\n    if (er) {\n      if (er.code === 'EACCES' || options && options.ignoreErrors) {\n        er = null\n        is = false\n      }\n    }\n    cb(er, is)\n  })\n}\n\nfunction sync (path, options) {\n  // my kingdom for a filtered catch\n  try {\n    return core.sync(path, options || {})\n  } catch (er) {\n    if (options && options.ignoreErrors || er.code === 'EACCES') {\n      return false\n    } else {\n      throw er\n    }\n  }\n}\n","const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n","'use strict';\n\nconst pathKey = (options = {}) => {\n\tconst environment = options.env || process.env;\n\tconst platform = options.platform || process.platform;\n\n\tif (platform !== 'win32') {\n\t\treturn 'PATH';\n\t}\n\n\treturn Object.keys(environment).reverse().find(key => key.toUpperCase() === 'PATH') || 'Path';\n};\n\nmodule.exports = pathKey;\n// TODO: Remove this for the next major release\nmodule.exports.default = pathKey;\n","'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst getPathKey = require('path-key');\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n","'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n\n    // Algorithm below is based on https://qntm.org/cmd\n    // It's slightly altered to disable JS backtracking to avoid hanging on specially crafted input\n    // Please see https://github.com/moxystudio/node-cross-spawn/pull/160 for more information\n\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(?=(\\\\+?)?)\\1\"/g, '$1$1\\\\\"');\n\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(?=(\\\\+?)?)\\1$/, '$1$1');\n\n    // All other backslashes occur literally\n\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, '^$1');\n    }\n\n    return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n","'use strict';\nmodule.exports = /^#!(.*)/;\n","'use strict';\nconst shebangRegex = require('shebang-regex');\n\nmodule.exports = (string = '') => {\n\tconst match = string.match(shebangRegex);\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tconst [path, argument] = match[0].replace(/#! ?/, '').split(' ');\n\tconst binary = path.split('/').pop();\n\n\tif (binary === 'env') {\n\t\treturn argument;\n\t}\n\n\treturn argument ? `${binary} ${argument}` : binary;\n};\n","'use strict';\n\nconst fs = require('fs');\nconst shebangCommand = require('shebang-command');\n\nfunction readShebang(command) {\n    // Read the first 150 bytes from the file\n    const size = 150;\n    const buffer = Buffer.alloc(size);\n\n    let fd;\n\n    try {\n        fd = fs.openSync(command, 'r');\n        fs.readSync(fd, buffer, 0, size, 0);\n        fs.closeSync(fd);\n    } catch (e) { /* Empty */ }\n\n    // Attempt to extract shebang (null is returned if not a shebang)\n    return shebangCommand(buffer.toString());\n}\n\nmodule.exports = readShebang;\n","'use strict';\n\nconst path = require('path');\nconst resolveCommand = require('./util/resolveCommand');\nconst escape = require('./util/escape');\nconst readShebang = require('./util/readShebang');\n\nconst isWin = process.platform === 'win32';\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n\n        return resolveCommand(parsed);\n    }\n\n    return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));\n\n        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args,\n        },\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n","'use strict';\n\nconst isWin = process.platform === 'win32';\n\nfunction notFoundError(original, syscall) {\n    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {\n        code: 'ENOENT',\n        errno: 'ENOENT',\n        syscall: `${syscall} ${original.command}`,\n        path: original.command,\n        spawnargs: original.args,\n    });\n}\n\nfunction hookChildProcess(cp, parsed) {\n    if (!isWin) {\n        return;\n    }\n\n    const originalEmit = cp.emit;\n\n    cp.emit = function (name, arg1) {\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === 'exit') {\n            const err = verifyENOENT(arg1, parsed);\n\n            if (err) {\n                return originalEmit.call(cp, 'error', err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n    };\n}\n\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawn');\n    }\n\n    return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawnSync');\n    }\n\n    return null;\n}\n\nmodule.exports = {\n    hookChildProcess,\n    verifyENOENT,\n    verifyENOENTSync,\n    notFoundError,\n};\n","'use strict';\n\nconst cp = require('child_process');\nconst parse = require('./lib/parse');\nconst enoent = require('./lib/enoent');\n\nfunction spawn(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n\n    // Spawn the child process\n    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);\n\n    // Hook into child process \"exit\" event to emit an error if the command\n    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    enoent.hookChildProcess(spawned, parsed);\n\n    return spawned;\n}\n\nfunction spawnSync(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n\n    // Spawn the child process\n    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);\n\n    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);\n\n    return result;\n}\n\nmodule.exports = spawn;\nmodule.exports.spawn = spawn;\nmodule.exports.sync = spawnSync;\n\nmodule.exports._parse = parse;\nmodule.exports._enoent = enoent;\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport {\n  $RefParser,\n  getResolvedInput,\n  type JSONSchema,\n  sendRequest,\n} from '@hey-api/json-schema-ref-parser';\nimport { loadConfig } from 'c12';\nimport { sync } from 'cross-spawn';\n\nimport { generateLegacyOutput, generateOutput } from './generate/output';\nimport { ensureDirSync } from './generate/utils';\nimport type { IR } from './ir/types';\nimport { parseLegacy, parseOpenApiSpec } from './openApi';\nimport type { ClientPlugins, UserPlugins } from './plugins';\nimport { defaultPluginConfigs } from './plugins';\nimport type {\n  AnyPluginName,\n  DefaultPluginConfigs,\n  PluginContext,\n  PluginNames,\n} from './plugins/types';\nimport type { Client } from './types/client';\nimport type {\n  ClientConfig,\n  Config,\n  Formatters,\n  Linters,\n  UserConfig,\n} from './types/config';\nimport { CLIENTS } from './types/config';\nimport {\n  isLegacyClient,\n  legacyNameFromConfig,\n  setConfig,\n} from './utils/config';\nimport { registerHandlebarTemplates } from './utils/handlebars';\nimport { Performance, PerformanceReport } from './utils/performance';\nimport { postProcessClient } from './utils/postprocess';\n\ntype OutputProcessor = {\n  args: (path: string) => ReadonlyArray<string>;\n  command: string;\n  name: string;\n};\n\n/**\n * Map of supported formatters\n */\nconst formatters: Record<Formatters, OutputProcessor> = {\n  biome: {\n    args: (path) => ['format', '--write', path],\n    command: 'biome',\n    name: 'Biome (Format)',\n  },\n  prettier: {\n    args: (path) => [\n      '--ignore-unknown',\n      path,\n      '--write',\n      '--ignore-path',\n      './.prettierignore',\n    ],\n    command: 'prettier',\n    name: 'Prettier',\n  },\n};\n\n/**\n * Map of supported linters\n */\nconst linters: Record<Linters, OutputProcessor> = {\n  biome: {\n    args: (path) => ['lint', '--apply', path],\n    command: 'biome',\n    name: 'Biome (Lint)',\n  },\n  eslint: {\n    args: (path) => [path, '--fix'],\n    command: 'eslint',\n    name: 'ESLint',\n  },\n  oxlint: {\n    args: (path) => ['--fix', path],\n    command: 'oxlint',\n    name: 'oxlint',\n  },\n};\n\nconst processOutput = ({ config }: { config: Config }) => {\n  if (config.output.format) {\n    const module = formatters[config.output.format];\n    console.log(`✨ Running ${module.name}`);\n    sync(module.command, module.args(config.output.path));\n  }\n\n  if (config.output.lint) {\n    const module = linters[config.output.lint];\n    console.log(`✨ Running ${module.name}`);\n    sync(module.command, module.args(config.output.path));\n  }\n};\n\nconst getClient = (userConfig: ClientConfig): Config['client'] => {\n  let client: Config['client'] = {\n    bundle: false,\n    name: '' as Config['client']['name'],\n  };\n  if (typeof userConfig.client === 'string') {\n    client.name = userConfig.client;\n  } else if (userConfig.client) {\n    client = {\n      ...client,\n      ...userConfig.client,\n    };\n  }\n  return client;\n};\n\nconst getInput = (userConfig: ClientConfig): Config['input'] => {\n  let input: Config['input'] = {\n    path: '',\n  };\n  if (typeof userConfig.input === 'string') {\n    input.path = userConfig.input;\n  } else if (userConfig.input && userConfig.input.path) {\n    input = {\n      ...input,\n      ...userConfig.input,\n    };\n  } else {\n    input = {\n      ...input,\n      path: userConfig.input,\n    };\n  }\n  return input;\n};\n\nconst getLogs = (userConfig: ClientConfig): Config['logs'] => {\n  let logs: Config['logs'] = {\n    level: 'info',\n    path: process.cwd(),\n  };\n  if (typeof userConfig.logs === 'string') {\n    logs.path = userConfig.logs;\n  } else {\n    logs = {\n      ...logs,\n      ...userConfig.logs,\n    };\n  }\n  return logs;\n};\n\nconst getOutput = (userConfig: ClientConfig): Config['output'] => {\n  let output: Config['output'] = {\n    clean: true,\n    format: false,\n    lint: false,\n    path: '',\n  };\n  if (typeof userConfig.output === 'string') {\n    output.path = userConfig.output;\n  } else {\n    output = {\n      ...output,\n      ...userConfig.output,\n    };\n  }\n  return output;\n};\n\nconst getPluginsConfig = ({\n  pluginConfigs,\n  userPlugins,\n  userPluginsConfig,\n}: {\n  pluginConfigs: DefaultPluginConfigs<ClientPlugins>;\n  userPlugins: ReadonlyArray<AnyPluginName>;\n  userPluginsConfig: Config['plugins'];\n}): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const circularReferenceTracker = new Set<AnyPluginName>();\n  const pluginOrder = new Set<AnyPluginName>();\n  const plugins: Config['plugins'] = {};\n\n  const dfs = (name: AnyPluginName) => {\n    if (circularReferenceTracker.has(name)) {\n      throw new Error(`Circular reference detected at '${name}'`);\n    }\n\n    if (!pluginOrder.has(name)) {\n      circularReferenceTracker.add(name);\n\n      const pluginConfig = pluginConfigs[name as PluginNames];\n      if (!pluginConfig) {\n        throw new Error(\n          `🚫 unknown plugin dependency \"${name}\" - do you need to register a custom plugin with this name?`,\n        );\n      }\n\n      const defaultOptions = defaultPluginConfigs[name as PluginNames];\n      const userOptions = userPluginsConfig[name as PluginNames];\n      if (userOptions && defaultOptions) {\n        const nativePluginOption = Object.keys(userOptions).find((key) =>\n          key.startsWith('_'),\n        );\n        if (nativePluginOption) {\n          throw new Error(\n            `🚫 cannot register plugin \"${name}\" - attempting to override a native plugin option \"${nativePluginOption}\"`,\n          );\n        }\n      }\n\n      const config = {\n        _dependencies: [],\n        ...defaultOptions,\n        ...userOptions,\n      };\n\n      if (config._infer) {\n        const context: PluginContext = {\n          ensureDependency: (dependency) => {\n            if (\n              typeof dependency === 'string' &&\n              !config._dependencies.includes(dependency)\n            ) {\n              config._dependencies = [...config._dependencies, dependency];\n            }\n          },\n          pluginByTag: (tag) => {\n            for (const userPlugin of userPlugins) {\n              const defaultConfig =\n                defaultPluginConfigs[userPlugin as PluginNames];\n              if (\n                defaultConfig &&\n                defaultConfig._tags?.includes(tag) &&\n                userPlugin !== name\n              ) {\n                return userPlugin;\n              }\n            }\n          },\n        };\n        config._infer(config, context);\n      }\n\n      for (const dependency of config._dependencies) {\n        dfs(dependency);\n      }\n\n      circularReferenceTracker.delete(name);\n      pluginOrder.add(name);\n\n      // @ts-expect-error\n      plugins[name] = config;\n    }\n  };\n\n  for (const name of userPlugins) {\n    dfs(name);\n  }\n\n  return {\n    pluginOrder: Array.from(pluginOrder) as ReadonlyArray<PluginNames>,\n    plugins,\n  };\n};\n\nconst getPlugins = (\n  userConfig: ClientConfig,\n): Pick<Config, 'plugins' | 'pluginOrder'> => {\n  const userPluginsConfig: Config['plugins'] = {};\n\n  const userPlugins = (userConfig.plugins ?? defaultPlugins)\n    .map((plugin) => {\n      if (typeof plugin === 'string') {\n        return plugin;\n      }\n\n      if (plugin.name) {\n        // @ts-expect-error\n        userPluginsConfig[plugin.name] = plugin;\n      }\n\n      return plugin.name;\n    })\n    .filter(Boolean);\n\n  return getPluginsConfig({\n    pluginConfigs: {\n      ...userPluginsConfig,\n      ...defaultPluginConfigs,\n    },\n    userPlugins,\n    userPluginsConfig,\n  });\n};\n\ninterface WatchValues {\n  headers: Headers;\n  lastValue: string | undefined;\n}\n\nconst getSpec = async ({\n  inputPath,\n  watch,\n}: {\n  inputPath: Config['input']['path'];\n  watch: WatchValues;\n}): Promise<\n  | {\n      data: JSONSchema;\n      error?: undefined;\n      response?: undefined;\n    }\n  | {\n      data?: undefined;\n      error: 'not-modified' | 'not-ok';\n      response: Response;\n    }\n> => {\n  const refParser = new $RefParser();\n  const resolvedInput = getResolvedInput({ pathOrUrlOrSchema: inputPath });\n\n  let arrayBuffer: ArrayBuffer | undefined;\n  // boolean signals whether the file has **definitely** changed\n  let hasChanged: boolean | undefined;\n  let response: Response | undefined;\n\n  // no support for watching files and objects for now\n  if (resolvedInput.type === 'url') {\n    // do not send HEAD request on first run\n    if (watch.lastValue) {\n      const request = await sendRequest({\n        init: {\n          headers: watch.headers,\n          method: 'HEAD',\n        },\n        url: resolvedInput.path,\n      });\n      response = request.response;\n\n      if (!response.ok) {\n        // assume the server is no longer running\n        // do nothing, it might be restarted later\n        return {\n          error: 'not-ok',\n          response,\n        };\n      }\n\n      if (response.status === 304) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n\n      if (hasChanged === undefined) {\n        const eTag = response.headers.get('ETag');\n        if (eTag) {\n          hasChanged = eTag !== watch.headers.get('If-None-Match');\n\n          if (hasChanged) {\n            watch.headers.set('If-None-Match', eTag);\n          }\n        }\n      }\n\n      if (hasChanged === undefined) {\n        const lastModified = response.headers.get('Last-Modified');\n        if (lastModified) {\n          hasChanged = lastModified !== watch.headers.get('If-Modified-Since');\n\n          if (hasChanged) {\n            watch.headers.set('If-Modified-Since', lastModified);\n          }\n        }\n      }\n\n      // we definitely know the input has not changed\n      if (hasChanged === false) {\n        return {\n          error: 'not-modified',\n          response,\n        };\n      }\n    }\n\n    const fileRequest = await sendRequest({\n      init: {\n        method: 'GET',\n      },\n      url: resolvedInput.path,\n    });\n    response = fileRequest.response;\n\n    if (!response.ok) {\n      // assume the server is no longer running\n      // do nothing, it might be restarted later\n      return {\n        error: 'not-ok',\n        response,\n      };\n    }\n\n    arrayBuffer = response.body\n      ? await response.arrayBuffer()\n      : new ArrayBuffer(0);\n\n    if (hasChanged === undefined) {\n      const content = new TextDecoder().decode(arrayBuffer);\n      hasChanged = content !== watch.lastValue;\n      watch.lastValue = content;\n    }\n  }\n\n  if (hasChanged === false) {\n    return {\n      error: 'not-modified',\n      response: response!,\n    };\n  }\n\n  const data = await refParser.bundle({\n    arrayBuffer,\n    pathOrUrlOrSchema: undefined,\n    resolvedInput,\n  });\n\n  return {\n    data,\n  };\n};\n\nconst getWatch = (\n  userConfig: Pick<ClientConfig, 'watch'> & Pick<Config, 'input'>,\n): Config['watch'] => {\n  let watch: Config['watch'] = {\n    enabled: false,\n    interval: 1000,\n  };\n  // we cannot watch spec passed as an object\n  if (typeof userConfig.input.path !== 'string') {\n    return watch;\n  }\n  if (typeof userConfig.watch === 'boolean') {\n    watch.enabled = userConfig.watch;\n  } else if (typeof userConfig.watch === 'number') {\n    watch = {\n      enabled: true,\n      interval: userConfig.watch,\n    };\n  } else if (userConfig.watch) {\n    watch = {\n      ...watch,\n      ...userConfig.watch,\n    };\n  }\n  return watch;\n};\n\nconst initConfigs = async (userConfig: UserConfig): Promise<Config[]> => {\n  let configurationFile: string | undefined = undefined;\n  if (userConfig.configFile) {\n    const parts = userConfig.configFile.split('.');\n    configurationFile = parts.slice(0, parts.length - 1).join('.');\n  }\n\n  const { config: configFromFile } = await loadConfig<UserConfig>({\n    configFile: configurationFile,\n    name: 'openapi-ts',\n  });\n\n  const userConfigs: ClientConfig[] = Array.isArray(userConfig)\n    ? userConfig\n    : Array.isArray(configFromFile)\n      ? configFromFile.map((config) => ({\n          ...config,\n          ...userConfig,\n        }))\n      : [{ ...(configFromFile ?? {}), ...userConfig }];\n\n  return userConfigs.map((userConfig) => {\n    const {\n      base,\n      configFile = '',\n      dryRun = false,\n      experimentalParser = false,\n      exportCore = true,\n      name,\n      request,\n      useOptions = true,\n    } = userConfig;\n\n    const logs = getLogs(userConfig);\n\n    if (logs.level === 'debug') {\n      console.warn('userConfig:', userConfig);\n    }\n\n    const input = getInput(userConfig);\n    const output = getOutput(userConfig);\n\n    if (!input.path) {\n      throw new Error(\n        '🚫 missing input - which OpenAPI specification should we use to generate your client?',\n      );\n    }\n\n    if (!output.path) {\n      throw new Error(\n        '🚫 missing output - where should we generate your client?',\n      );\n    }\n\n    const client = getClient(userConfig);\n\n    if (client.name && !CLIENTS.includes(client.name)) {\n      throw new Error('🚫 invalid client - select a valid client value');\n    }\n\n    if (!useOptions) {\n      console.warn(\n        '❗️ Deprecation warning: useOptions set to false. This setting will be removed in future versions. Please migrate useOptions to true https://heyapi.dev/openapi-ts/migrating.html#v0-27-38',\n      );\n    }\n\n    output.path = path.resolve(process.cwd(), output.path);\n\n    const config = setConfig({\n      ...getPlugins(userConfig),\n      base,\n      client,\n      configFile,\n      dryRun,\n      experimentalParser,\n      exportCore: isLegacyClient(client) ? exportCore : false,\n      input,\n      logs,\n      name,\n      output,\n      request,\n      useOptions,\n      watch: getWatch({ ...userConfig, input }),\n    });\n\n    if (logs.level === 'debug') {\n      console.warn('config:', config);\n    }\n\n    return config;\n  });\n};\n\n/**\n * Generate the OpenAPI client. This method will read the OpenAPI specification and based on the\n * given language it will generate the client, including the typed models, validation schemas,\n * service layer, etc.\n * @param userConfig {@link UserConfig} passed to the `createClient()` method\n */\nexport async function createClient(\n  userConfig: UserConfig,\n): Promise<ReadonlyArray<Client | IR.Context>> {\n  let configs: Config[] = [];\n\n  try {\n    Performance.start('createClient');\n\n    Performance.start('config');\n    configs = await initConfigs(userConfig);\n    Performance.end('config');\n\n    Performance.start('handlebars');\n    const templates = registerHandlebarTemplates();\n    Performance.end('handlebars');\n\n    const pCreateClient = async ({\n      config,\n      watch: _watch,\n    }: {\n      config: Config;\n      watch?: WatchValues;\n    }) => {\n      const inputPath = config.input.path;\n\n      const watch = _watch || {\n        headers: new Headers(),\n        lastValue: undefined,\n      };\n\n      Performance.start('spec');\n      const { data, error, response } = await getSpec({ inputPath, watch });\n      Performance.end('spec');\n\n      // throw on first run if there's an error to preserve user experience\n      // if in watch mode, subsequent errors won't throw to gracefully handle\n      // cases where server might be reloading\n      if (error && !_watch) {\n        throw new Error(\n          `Request failed with status ${response.status}: ${response.statusText}`,\n        );\n      }\n\n      let client: Client | undefined;\n      let context: IR.Context | undefined;\n\n      if (data) {\n        if (_watch) {\n          console.log(`⏳ Input changed, generating from ${inputPath}`);\n        } else {\n          console.log(`⏳ Generating from ${inputPath}`);\n        }\n\n        Performance.start('parser');\n        if (\n          config.experimentalParser &&\n          !isLegacyClient(config) &&\n          !legacyNameFromConfig(config)\n        ) {\n          context = parseOpenApiSpec({ config, spec: data });\n        }\n\n        // fallback to legacy parser\n        if (!context) {\n          const parsed = parseLegacy({ openApi: data });\n          client = postProcessClient(parsed, config);\n        }\n        Performance.end('parser');\n\n        Performance.start('generator');\n        if (context) {\n          await generateOutput({ context });\n        } else if (client) {\n          await generateLegacyOutput({ client, openApi: data, templates });\n        }\n        Performance.end('generator');\n\n        Performance.start('postprocess');\n        if (!config.dryRun) {\n          processOutput({ config });\n\n          const outputPath = process.env.INIT_CWD\n            ? `./${path.relative(process.env.INIT_CWD, config.output.path)}`\n            : config.output.path;\n          console.log(`🚀 Done! Your output is in ${outputPath}`);\n        }\n        Performance.end('postprocess');\n      }\n\n      if (config.watch.enabled && typeof inputPath === 'string') {\n        setTimeout(() => {\n          pCreateClient({ config, watch });\n        }, config.watch.interval);\n      }\n\n      return context || client;\n    };\n\n    const clients = await Promise.all(\n      configs.map((config) => pCreateClient({ config })),\n    );\n    const result = clients.filter((client) => Boolean(client)) as ReadonlyArray<\n      Client | IR.Context\n    >;\n\n    Performance.end('createClient');\n\n    const config = configs[0];\n    if (config && config.logs.level === 'debug') {\n      const perfReport = new PerformanceReport({\n        totalMark: 'createClient',\n      });\n      perfReport.report({\n        marks: [\n          'config',\n          'openapi',\n          'handlebars',\n          'parser',\n          'generator',\n          'postprocess',\n        ],\n      });\n    }\n\n    return result;\n  } catch (error) {\n    const config = configs[0] as Config | undefined;\n    const dryRun = config ? config.dryRun : userConfig?.dryRun;\n    // TODO: add setting for log output\n    if (!dryRun) {\n      const logs = config?.logs ?? getLogs(userConfig);\n      if (logs.level !== 'silent') {\n        const logName = `openapi-ts-error-${Date.now()}.log`;\n        const logsDir = path.resolve(process.cwd(), logs.path ?? '');\n        ensureDirSync(logsDir);\n        const logPath = path.resolve(logsDir, logName);\n        fs.writeFileSync(logPath, `${error.message}\\n${error.stack}`);\n        console.error(`🔥 Unexpected error occurred. Log saved to ${logPath}`);\n      }\n    }\n    console.error(`🔥 Unexpected error occurred. ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Default plugins used to generate artifacts if plugins aren't specified.\n */\nexport const defaultPlugins = [\n  '@hey-api/typescript',\n  '@hey-api/sdk',\n] as const satisfies ReadonlyArray<UserPlugins['name']>;\n\n/**\n * Type helper for openapi-ts.config.ts, returns {@link UserConfig} object\n */\nexport const defineConfig = (config: UserConfig): UserConfig => config;\n\nexport type { IR } from './ir/types';\nexport type { OpenApi } from './openApi/types';\nexport type { Plugin } from './plugins/types';\nexport type { UserConfig } from './types/config';\nexport type { LegacyIR } from './types/types';\nexport { utils } from './utils/exports';\n","/**\n * Matches characters from the start as long as they're not allowed.\n */\nexport const illegalStartCharactersRegExp = /^[^$_\\p{ID_Start}]+/u;\n\n/**\n * Matches string if it contains only digits and optionally decimal point or\n * leading minus sign.\n */\nexport const numberRegExp = /^-?\\d+(\\.\\d+)?$/;\n\nexport const reservedBrowserGlobalsRegExp =\n  /^(document|history|location|navigator|window)$/g;\n\nexport const reservedJavaScriptGlobalsRegExp =\n  /^(console|Array|Date|Error|Function|JSON|Map|Math|Object|Promise|RegExp|Set|WeakMap|WeakSet)$/g;\n\nexport const reservedJavaScriptKeywordsRegExp =\n  /^(arguments|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|eval|export|extends|false|finally|for|from|function|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)$/g;\n\nexport const reservedNodeGlobalsRegExp = /^(global|process|Buffer)$/g;\n\nexport const reservedTypeScriptKeywordsRegExp =\n  /^(any|as|bigint|boolean|namespace|never|null|number|string|symbol|type|undefined|unknown|void)$/g;\n\n/**\n * Javascript identifier regexp pattern retrieved from\n * {@link} https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const validTypescriptIdentifierRegExp =\n  /^[$_\\p{ID_Start}][$\\u200c\\u200d\\p{ID_Continue}]*$/u;\n","import { EOL } from 'os';\n\nimport { validTypescriptIdentifierRegExp } from './regexp';\n\nexport const escapeName = (value: string): string => {\n  if (value || value === '') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    const validName = validTypescriptIdentifierRegExp.test(value);\n    if (!validName) {\n      return `'${value}'`;\n    }\n  }\n  return value;\n};\n\nexport const unescapeName = (value: string): string => {\n  if (value && value.startsWith(\"'\") && value.endsWith(\"'\")) {\n    return value.slice(1, value.length - 1);\n  }\n  return value;\n};\n\nexport const escapeComment = (value: string) =>\n  value\n    .replace(/\\*\\//g, '*')\n    .replace(/\\/\\*/g, '*')\n    .replace(/\\r?\\n(.*)/g, (_l, w) => EOL + w.trim());\n","import ts from 'typescript';\n\nimport { getConfig } from '../utils/config';\nimport { unescapeName } from '../utils/escape';\nimport { createStringLiteral } from './types';\n\nexport interface ImportExportItemObject {\n  alias?: string;\n  asType?: boolean;\n  name: string;\n}\n\nconst printer = ts.createPrinter({\n  newLine: ts.NewLineKind.LineFeed,\n  removeComments: false,\n});\n\nexport const createSourceFile = (sourceText: string) =>\n  ts.createSourceFile(\n    '',\n    sourceText,\n    ts.ScriptTarget.ESNext,\n    false,\n    ts.ScriptKind.TS,\n  );\n\nconst blankSourceFile = createSourceFile('');\n\nconst unescapeUnicode = (value: string) =>\n  value.replace(/\\\\u([0-9a-fA-F]{4})/g, (_, hex: string) =>\n    String.fromCharCode(Number.parseInt(hex, 16)),\n  );\n\n/**\n * Print a TypeScript node to a string.\n * @param node the node to print\n * @returns string\n */\nexport function tsNodeToString({\n  node,\n  unescape = false,\n}: {\n  node: ts.Node;\n  unescape?: boolean;\n}): string {\n  const result = printer.printNode(\n    ts.EmitHint.Unspecified,\n    node,\n    blankSourceFile,\n  );\n\n  if (!unescape) {\n    return result;\n  }\n\n  try {\n    /**\n     * TypeScript Compiler API escapes unicode characters by default and there\n     * is no way to disable this behavior\n     * {@link https://github.com/microsoft/TypeScript/issues/36174}\n     */\n    return unescapeUnicode(result);\n  } catch {\n    if (getConfig().logs.level === 'debug') {\n      console.warn('Could not decode value:', result);\n    }\n    return result;\n  }\n}\n\n/**\n * Convert a string to a TypeScript Node\n * @param value the string to convert.\n * @returns ts.Node\n */\nexport function stringToTsNodes(value: string): ts.Node {\n  const file = createSourceFile(value);\n  return file.statements[0]!;\n}\n\nexport const createIdentifier = ({ text }: { text: string }) => {\n  const identifier = ts.factory.createIdentifier(text);\n  return identifier;\n};\n\n/**\n * ots for @hey-api/openapi-ts are helpers to reduce repetition of basic TypeScript\n * factory functions.\n */\nexport const ots = {\n  /**\n   * Create a boolean expression based on value.\n   */\n  boolean: (value: boolean) =>\n    value ? ts.factory.createTrue() : ts.factory.createFalse(),\n  export: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createExportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createExportSpecifier(asType, undefined, nameNode);\n  },\n  import: ({ alias, asType = false, name }: ImportExportItemObject) => {\n    const nameNode = createIdentifier({ text: name });\n    if (alias) {\n      const aliasNode = createIdentifier({ text: alias });\n      return ts.factory.createImportSpecifier(asType, nameNode, aliasNode);\n    }\n    return ts.factory.createImportSpecifier(asType, undefined, nameNode);\n  },\n  /**\n   * Create a numeric expression, handling negative numbers.\n   */\n  number: (value: number) => {\n    if (value < 0) {\n      return ts.factory.createPrefixUnaryExpression(\n        ts.SyntaxKind.MinusToken,\n        ts.factory.createNumericLiteral(Math.abs(value)),\n      );\n    }\n    return ts.factory.createNumericLiteral(value);\n  },\n  /**\n   * Create a string literal. This handles strings that start with '`' or \"'\".\n   */\n  string: (value: string, unescape = false) => {\n    let text = value;\n    if (unescape) {\n      text = unescapeName(text);\n    }\n    const hasBothQuotes = text.includes(\"'\") && text.includes('\"');\n    const hasNewlines = text.includes('\\n');\n    const hasUnescapedBackticks = text.startsWith('`');\n    const isBacktickEscaped = text.startsWith('\\\\`') && text.endsWith('\\\\`');\n    if (\n      (hasNewlines || hasBothQuotes || hasUnescapedBackticks) &&\n      !isBacktickEscaped\n    ) {\n      text = `\\`${text.replace(/(?<!\\\\)`/g, '\\\\`').replace(/\\${/g, '\\\\${')}\\``;\n    }\n    if (text.startsWith('`')) {\n      return createIdentifier({ text });\n    }\n    return createStringLiteral({ text });\n  },\n};\n\nexport const isTsNode = (node: any): node is ts.Expression =>\n  node !== null &&\n  typeof node === 'object' &&\n  typeof node.kind === 'number' &&\n  typeof node.flags === 'number' &&\n  typeof node.pos === 'number' &&\n  typeof node.end === 'number';\n\nexport const isType = <T>(value: T | undefined): value is T =>\n  value !== undefined;\n\ntype CommentLines = Array<string | null | false | undefined>;\ntype CommentObject = {\n  jsdoc?: boolean;\n  lines: CommentLines;\n};\nexport type Comments = CommentLines | Array<CommentObject>;\n\nconst processCommentObject = ({\n  commentObject,\n  node,\n}: {\n  commentObject: CommentObject;\n  node: ts.Node;\n}) => {\n  const lines = commentObject.lines.filter(\n    (line) => Boolean(line) || line === '',\n  ) as string[];\n  if (!lines.length) {\n    return;\n  }\n\n  if (!commentObject.jsdoc) {\n    for (const line of lines) {\n      ts.addSyntheticLeadingComment(\n        node,\n        ts.SyntaxKind.SingleLineCommentTrivia,\n        ` ${line}`,\n        true,\n      );\n    }\n    return;\n  }\n\n  const jsdocTexts = lines.map((line, index) => {\n    let text = line;\n    if (index !== lines.length) {\n      text = `${text}\\n`;\n    }\n    const jsdocText = ts.factory.createJSDocText(text);\n    return jsdocText;\n  });\n\n  const jsdoc = ts.factory.createJSDocComment(\n    ts.factory.createNodeArray(jsdocTexts),\n    undefined,\n  );\n\n  const cleanedJsdoc = tsNodeToString({ node: jsdoc, unescape: true })\n    .replace('/*', '')\n    .replace('*  */', '');\n\n  ts.addSyntheticLeadingComment(\n    node,\n    ts.SyntaxKind.MultiLineCommentTrivia,\n    cleanedJsdoc,\n    true,\n  );\n};\n\nexport const addLeadingComments = ({\n  comments = [],\n  node,\n}: {\n  comments?: Comments;\n  node: ts.Node;\n}) => {\n  const isObjectStyle = Boolean(\n    comments.find((comment) => typeof comment === 'object' && comment),\n  );\n\n  let commentObjects = comments as Array<CommentObject>;\n  if (!isObjectStyle) {\n    commentObjects = [\n      {\n        jsdoc: true,\n        lines: comments as CommentLines,\n      },\n    ];\n  }\n\n  for (const commentObject of commentObjects) {\n    processCommentObject({\n      commentObject,\n      node,\n    });\n  }\n};\n","import type { Config } from '../types/config';\n\nlet _config: Config;\n\nexport const getConfig = () => _config;\n\nexport const setConfig = (config: Config) => {\n  _config = config;\n  return getConfig();\n};\n\nexport const isLegacyClient = (config: Config | Config['client']) => {\n  const client = 'client' in config ? config.client.name : config.name;\n  return client.startsWith('legacy/');\n};\n\n/**\n * Wrap legacy `name` option so we don't use it when not using legacy clients.\n */\nexport const legacyNameFromConfig = (config: Config) => {\n  if (!isLegacyClient(config)) {\n    return;\n  }\n\n  return config.name;\n};\n","import ts from 'typescript';\n\nimport { escapeName } from '../utils/escape';\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  isTsNode,\n  isType,\n  ots,\n} from './utils';\n\nexport type AccessLevel = 'public' | 'protected' | 'private';\n\nexport type FunctionParameter =\n  | {\n      accessLevel?: AccessLevel;\n      default?: any;\n      isReadOnly?: boolean;\n      isRequired?: boolean;\n      name: string;\n      type?: any | ts.TypeNode;\n    }\n  | {\n      destructure: FunctionParameter[];\n    };\n\nexport interface FunctionTypeParameter {\n  default?: any;\n  extends?: string | ts.TypeNode;\n  name: string | ts.Identifier;\n}\n\nexport const createTypeNode = (\n  base: any | ts.TypeNode,\n  args?: (any | ts.TypeNode)[],\n): ts.TypeNode => {\n  if (ts.isTypeNode(base)) {\n    return base;\n  }\n\n  if (typeof base === 'number') {\n    return ts.factory.createLiteralTypeNode(ots.number(base));\n  }\n\n  return createTypeReferenceNode({\n    typeArguments: args?.map((arg) => createTypeNode(arg)),\n    typeName: base,\n  });\n};\n\nexport const createPropertyAccessChain = ({\n  expression,\n  name,\n}: {\n  expression: ts.Expression;\n  name: string | ts.MemberName;\n}) => {\n  const node = ts.factory.createPropertyAccessChain(\n    expression,\n    ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n    name,\n  );\n  return node;\n};\n\nexport const createPropertyAccessExpression = ({\n  expression,\n  isOptional,\n  name,\n}: {\n  expression: string | ts.Expression;\n  isOptional?: boolean;\n  name: string | ts.MemberName;\n}):\n  | ts.PropertyAccessChain\n  | ts.PropertyAccessExpression\n  | ts.ElementAccessExpression => {\n  const nodeExpression =\n    typeof expression === 'string'\n      ? createIdentifier({ text: expression })\n      : expression;\n\n  if (isOptional) {\n    return createPropertyAccessChain({\n      expression: nodeExpression,\n      name,\n    });\n  }\n\n  if (typeof name === 'string') {\n    validTypescriptIdentifierRegExp.lastIndex = 0;\n    if (!validTypescriptIdentifierRegExp.test(name)) {\n      // TODO: parser - this should escape name only for new parser\n      if (!name.startsWith(\"'\") && !name.endsWith(\"'\")) {\n        // eslint-disable-next-line no-useless-escape\n        name = `\\'${name}\\'`;\n      }\n      const nodeName = createIdentifier({ text: name });\n      return ts.factory.createElementAccessExpression(nodeExpression, nodeName);\n    }\n  }\n\n  const nodeName =\n    typeof name === 'string' ? createIdentifier({ text: name }) : name;\n\n  return ts.factory.createPropertyAccessExpression(nodeExpression, nodeName);\n};\n\nexport const createNull = (): ts.NullLiteral => ts.factory.createNull();\n\n/**\n * Convert an unknown value to an expression.\n * @param identifiers - list of keys that are treated as identifiers.\n * @param shorthand - if shorthand syntax is allowed.\n * @param unescape - if string should be unescaped.\n * @param value - the unknown value.\n * @returns ts.Expression\n */\nexport const toExpression = <T = unknown>({\n  identifiers = [],\n  isValueAccess,\n  shorthand,\n  unescape,\n  value,\n}: {\n  identifiers?: string[];\n  isValueAccess?: boolean;\n  shorthand?: boolean;\n  unescape?: boolean;\n  value: T;\n}): ts.Expression | undefined => {\n  if (value === null) {\n    return createNull();\n  }\n\n  if (Array.isArray(value)) {\n    return createArrayLiteralExpression({ elements: value });\n  }\n\n  if (typeof value === 'object') {\n    return createObjectType({\n      identifiers,\n      obj: value,\n      shorthand,\n    });\n  }\n\n  if (typeof value === 'number') {\n    return ots.number(value);\n  }\n\n  if (typeof value === 'boolean') {\n    return ots.boolean(value);\n  }\n\n  if (typeof value === 'string') {\n    if (isValueAccess) {\n      // TODO; handle more than single nested level, i.e. foo.bar.baz\n      const parts = value.split('.');\n      return createPropertyAccessExpression({\n        expression: parts[0]!,\n        name: parts[1]!,\n      });\n    }\n    return ots.string(value, unescape);\n  }\n};\n\n/**\n * Convert AccessLevel to proper TypeScript compiler API modifier.\n * @param access - the access level.\n * @returns ts.ModifierLike[]\n */\nexport const toAccessLevelModifiers = (\n  access?: AccessLevel,\n): ts.ModifierLike[] => {\n  const keyword =\n    access === 'public'\n      ? ts.SyntaxKind.PublicKeyword\n      : access === 'protected'\n        ? ts.SyntaxKind.ProtectedKeyword\n        : access === 'private'\n          ? ts.SyntaxKind.PrivateKeyword\n          : undefined;\n  const modifiers: ts.ModifierLike[] = [];\n  if (keyword) {\n    modifiers.push(ts.factory.createModifier(keyword));\n  }\n  return modifiers;\n};\n\n/**\n * Convert parameters to the declaration array expected by compiler API.\n * @param parameters - the parameters to convert to declarations\n * @returns ts.ParameterDeclaration[]\n */\nexport const toParameterDeclarations = (parameters: FunctionParameter[]) =>\n  parameters.map((parameter) => {\n    if ('destructure' in parameter) {\n      return createParameterDeclaration({\n        name: ts.factory.createObjectBindingPattern(\n          parameter.destructure\n            .map((param) => {\n              // TODO: add support for nested destructuring, not needed at the moment\n              if ('destructure' in param) {\n                return;\n              }\n\n              const result = ts.factory.createBindingElement(\n                undefined,\n                undefined,\n                createIdentifier({ text: param.name }),\n                undefined,\n              );\n              return result;\n            })\n            .filter(Boolean) as ts.BindingElement[],\n        ),\n      });\n    }\n\n    let modifiers = toAccessLevelModifiers(parameter.accessLevel);\n\n    if (parameter.isReadOnly) {\n      modifiers = [\n        ...modifiers,\n        ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword),\n      ];\n    }\n\n    return createParameterDeclaration({\n      initializer:\n        parameter.default !== undefined\n          ? toExpression({ value: parameter.default })\n          : undefined,\n      modifiers,\n      name: createIdentifier({ text: parameter.name }),\n      required: parameter.isRequired !== false,\n      type:\n        parameter.type !== undefined\n          ? createTypeNode(parameter.type)\n          : undefined,\n    });\n  });\n\nexport const createKeywordTypeNode = ({\n  keyword,\n}: {\n  keyword:\n    | 'any'\n    | 'boolean'\n    | 'never'\n    | 'number'\n    | 'string'\n    | 'undefined'\n    | 'unknown'\n    | 'void';\n}) => {\n  let kind: ts.KeywordTypeSyntaxKind = ts.SyntaxKind.AnyKeyword;\n  switch (keyword) {\n    case 'boolean':\n      kind = ts.SyntaxKind.BooleanKeyword;\n      break;\n    case 'never':\n      kind = ts.SyntaxKind.NeverKeyword;\n      break;\n    case 'number':\n      kind = ts.SyntaxKind.NumberKeyword;\n      break;\n    case 'string':\n      kind = ts.SyntaxKind.StringKeyword;\n      break;\n    case 'undefined':\n      kind = ts.SyntaxKind.UndefinedKeyword;\n      break;\n    case 'unknown':\n      kind = ts.SyntaxKind.UnknownKeyword;\n      break;\n    case 'void':\n      kind = ts.SyntaxKind.VoidKeyword;\n      break;\n  }\n  return ts.factory.createKeywordTypeNode(kind);\n};\n\nexport const toTypeParameters = (types: FunctionTypeParameter[]) =>\n  types.map((type) =>\n    ts.factory.createTypeParameterDeclaration(\n      undefined,\n      type.name,\n      // TODO: support other extends values\n      type.extends\n        ? typeof type.extends === 'string'\n          ? createKeywordTypeNode({ keyword: 'boolean' })\n          : type.extends\n        : undefined,\n      // TODO: support other default types\n      type.default !== undefined\n        ? isTsNode(type.default)\n          ? (type.default as unknown as ts.TypeNode)\n          : ts.factory.createLiteralTypeNode(\n              type.default ? ts.factory.createTrue() : ts.factory.createFalse(),\n            )\n        : undefined,\n    ),\n  );\n\nexport const createLiteralTypeNode = ({\n  literal,\n}: {\n  literal: ts.LiteralTypeNode['literal'];\n}) => {\n  const node = ts.factory.createLiteralTypeNode(literal);\n  return node;\n};\n\n/**\n * Create arrow function type expression.\n */\nexport const createArrowFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[] | ts.Expression;\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createArrowFunction(\n    async ? [ts.factory.createModifier(ts.SyntaxKind.AsyncKeyword)] : undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    undefined,\n    Array.isArray(statements)\n      ? createBlock({ multiLine, statements })\n      : statements,\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create anonymous function type expression.\n */\nexport const createAnonymousFunction = ({\n  async,\n  comment,\n  multiLine,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  async?: boolean;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  const expression = ts.factory.createFunctionExpression(\n    async ? [ts.factory.createModifier(ts.SyntaxKind.AsyncKeyword)] : undefined,\n    undefined,\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: expression,\n  });\n\n  return expression;\n};\n\n/**\n * Create Array type expression.\n */\nexport const createArrayLiteralExpression = <T>({\n  elements,\n  multiLine = false,\n}: {\n  /**\n   * The array to create.\n   */\n  elements: T[];\n  /**\n   * Should the array be multi line?\n   *\n   * @default false\n   */\n  multiLine?: boolean;\n}): ts.ArrayLiteralExpression => {\n  const expression = ts.factory.createArrayLiteralExpression(\n    elements\n      .map((value) => (isTsNode(value) ? value : toExpression({ value })))\n      .filter(isType<ts.Expression>),\n    // multiline if array contains objects\n    multiLine ||\n      (!Array.isArray(elements[0]) && typeof elements[0] === 'object'),\n  );\n  return expression;\n};\n\nexport const createAwaitExpression = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => ts.factory.createAwaitExpression(expression);\n\nexport const createFunctionTypeNode = ({\n  parameters = [],\n  returnType,\n  typeParameters,\n}: {\n  parameters?: ts.ParameterDeclaration[];\n  returnType: ts.TypeNode;\n  typeParameters?: ts.TypeParameterDeclaration[];\n}) => {\n  const node = ts.factory.createFunctionTypeNode(\n    typeParameters,\n    parameters,\n    returnType,\n  );\n  return node;\n};\n\nexport type ObjectValue =\n  | {\n      assertion?: 'any' | ts.TypeNode;\n      comments?: Comments;\n      spread: string;\n    }\n  | {\n      comments?: Comments;\n      isValueAccess?: boolean;\n      key: string;\n      shorthand?: boolean;\n      value: any;\n    };\n\ntype ObjectAssignment =\n  | ts.PropertyAssignment\n  | ts.ShorthandPropertyAssignment\n  | ts.SpreadAssignment;\n\n/**\n * Create Object type expression.\n * @param comments - comments to add to each property.\n * @param identifier - keys that should be treated as identifiers.\n * @param multiLine - if the object should be multiline.\n * @param obj - the object to create expression with.\n * @param shorthand - if shorthand syntax should be used.\n * @param unescape - if properties strings should be unescaped.\n * @returns ts.ObjectLiteralExpression\n */\nexport const createObjectType = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments,\n  identifiers = [],\n  multiLine = true,\n  obj,\n  shorthand,\n  unescape = false,\n}: {\n  comments?: Comments;\n  identifiers?: string[];\n  multiLine?: boolean;\n  obj: T;\n  shorthand?: boolean;\n  unescape?: boolean;\n}): ts.ObjectLiteralExpression => {\n  const properties = Array.isArray(obj)\n    ? obj\n        .map((value: ObjectValue) => {\n          // Check key value equality before possibly modifying it\n          let canShorthand = false;\n          if ('key' in value) {\n            const { key } = value;\n            canShorthand = key === value.value;\n            const firstDigitAndNonDigits =\n              key.match(/^[0-9]/) && key.match(/\\D+/g);\n            if (\n              (firstDigitAndNonDigits || key.match(/\\W/g) || key === '') &&\n              !key.startsWith(\"'\") &&\n              !key.endsWith(\"'\")\n            ) {\n              value.key = `'${key}'`;\n            }\n          }\n          let assignment: ObjectAssignment;\n          if ('spread' in value) {\n            const nameIdentifier = isTsNode(value.spread)\n              ? value.spread\n              : createIdentifier({ text: value.spread });\n            assignment = ts.factory.createSpreadAssignment(\n              value.assertion\n                ? createAsExpression({\n                    expression: nameIdentifier,\n                    type:\n                      typeof value.assertion === 'string'\n                        ? createKeywordTypeNode({ keyword: value.assertion })\n                        : value.assertion,\n                  })\n                : nameIdentifier,\n            );\n          } else if (value.shorthand || (shorthand && canShorthand)) {\n            assignment = ts.factory.createShorthandPropertyAssignment(\n              value.value,\n            );\n          } else {\n            let initializer: ts.Expression | undefined = isTsNode(value.value)\n              ? value.value\n              : Array.isArray(value.value)\n                ? createObjectType({\n                    multiLine,\n                    obj: value.value,\n                    shorthand,\n                    unescape,\n                  })\n                : toExpression({\n                    identifiers: identifiers.includes(value.key)\n                      ? Object.keys(value.value)\n                      : [],\n                    isValueAccess: value.isValueAccess,\n                    shorthand,\n                    unescape,\n                    value: value.value,\n                  });\n            if (!initializer) {\n              return undefined;\n            }\n            // Create a identifier if the current key is one and it is not an object\n            if (\n              identifiers.includes(value.key) &&\n              !ts.isObjectLiteralExpression(initializer)\n            ) {\n              initializer = createIdentifier({ text: value.value as string });\n            }\n            assignment = createPropertyAssignment({\n              initializer,\n              name: value.key,\n            });\n          }\n\n          addLeadingComments({\n            comments: value.comments,\n            node: assignment,\n          });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>)\n    : Object.entries(obj)\n        .map(([key, value]) => {\n          // Pass all object properties as identifiers if the whole object is an identifier\n          let initializer: ts.Expression | undefined = toExpression({\n            identifiers: identifiers.includes(key) ? Object.keys(value) : [],\n            shorthand,\n            unescape,\n            value,\n          });\n          if (!initializer) {\n            return undefined;\n          }\n          // Create a identifier if the current key is one and it is not an object\n          if (\n            identifiers.includes(key) &&\n            !ts.isObjectLiteralExpression(initializer)\n          ) {\n            initializer = createIdentifier({ text: value as string });\n          }\n          // Check key value equality before possibly modifying it\n          const canShorthand = key === value;\n          if (\n            key.match(/^[0-9]/) &&\n            key.match(/\\D+/g) &&\n            !key.startsWith(\"'\") &&\n            !key.endsWith(\"'\")\n          ) {\n            key = `'${key}'`;\n          }\n          if (key.match(/\\W/g) && !key.startsWith(\"'\") && !key.endsWith(\"'\")) {\n            key = `'${key}'`;\n          }\n          const assignment =\n            shorthand && canShorthand\n              ? ts.factory.createShorthandPropertyAssignment(value)\n              : createPropertyAssignment({ initializer, name: key });\n\n          return assignment;\n        })\n        .filter(isType<ObjectAssignment>);\n\n  const node = ts.factory.createObjectLiteralExpression(\n    properties as any[],\n    multiLine,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create enum declaration. Example `export enum T = { X, Y };`\n * @param comments - comments to add to each property.\n * @param leadingComment - leading comment to add to enum.\n * @param name - the name of the enum.\n * @param obj - the object representing the enum.\n * @returns ts.EnumDeclaration\n */\nexport const createEnumDeclaration = <\n  T extends Record<string, any> | Array<ObjectValue>,\n>({\n  comments: enumMemberComments = {},\n  leadingComment: comments,\n  name,\n  obj,\n}: {\n  comments?: Record<string | number, Comments>;\n  leadingComment?: Comments;\n  name: string;\n  obj: T;\n}): ts.EnumDeclaration => {\n  const members: Array<ts.EnumMember> = Array.isArray(obj)\n    ? obj.map((value) => {\n        const enumMember = createEnumMember({\n          initializer: toExpression({\n            value: value.value,\n          }),\n          name: value.key,\n        });\n\n        addLeadingComments({\n          comments: value.comments,\n          node: enumMember,\n        });\n\n        return enumMember;\n      })\n    : // TODO: parser - deprecate object syntax\n      Object.entries(obj).map(([key, value]) => {\n        const enumMember = ts.factory.createEnumMember(\n          key,\n          toExpression({\n            unescape: true,\n            value,\n          }),\n        );\n\n        addLeadingComments({\n          comments: enumMemberComments[key],\n          node: enumMember,\n        });\n\n        return enumMember;\n      });\n\n  const node = ts.factory.createEnumDeclaration(\n    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],\n    createIdentifier({ text: name }),\n    members,\n  );\n\n  addLeadingComments({\n    comments,\n    node,\n  });\n\n  return node;\n};\n\nconst createEnumMember = ({\n  initializer,\n  name,\n}: {\n  initializer?: ts.Expression;\n  name: string | ts.PropertyName;\n}) => {\n  let key = name;\n  if (typeof key === 'string') {\n    if (key.startsWith(\"'\") && key.endsWith(\"'\")) {\n      key = createStringLiteral({\n        isSingleQuote: false,\n        text: key,\n      });\n    } else {\n      key = escapeName(key);\n    }\n  }\n  return ts.factory.createEnumMember(key, initializer);\n};\n\n/**\n * Create namespace declaration. Example `export namespace MyNamespace { ... }`\n * @param name - the name of the namespace.\n * @param nodes - the nodes in the namespace.\n * @returns\n */\nexport const createNamespaceDeclaration = ({\n  name,\n  statements,\n}: {\n  name: string;\n  statements: Array<ts.Statement>;\n}) =>\n  ts.factory.createModuleDeclaration(\n    [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)],\n    createIdentifier({ text: name }),\n    ts.factory.createModuleBlock(statements),\n    ts.NodeFlags.Namespace,\n  );\n\nexport const createIndexedAccessTypeNode = ({\n  indexType,\n  objectType,\n}: {\n  indexType: ts.TypeNode;\n  objectType: ts.TypeNode;\n}) => {\n  const node = ts.factory.createIndexedAccessTypeNode(objectType, indexType);\n  return node;\n};\n\nexport const createStringLiteral = ({\n  isSingleQuote,\n  text,\n}: {\n  isSingleQuote?: boolean;\n  text: string;\n}) => {\n  if (isSingleQuote === undefined) {\n    isSingleQuote = !text.includes(\"'\");\n  }\n  const node = ts.factory.createStringLiteral(text, isSingleQuote);\n  return node;\n};\n\nexport const createConditionalExpression = ({\n  condition,\n  whenFalse,\n  whenTrue,\n}: {\n  condition: ts.Expression;\n  whenFalse: ts.Expression;\n  whenTrue: ts.Expression;\n}) => {\n  const expression = ts.factory.createConditionalExpression(\n    condition,\n    ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    whenTrue,\n    ts.factory.createToken(ts.SyntaxKind.ColonToken),\n    whenFalse,\n  );\n  return expression;\n};\n\nexport const createTypeOfExpression = ({ text }: { text: string }) => {\n  const expression = ts.factory.createTypeOfExpression(\n    createIdentifier({ text }),\n  );\n  return expression;\n};\n\n/**\n * Create a type alias declaration. Example `export type X = Y;`.\n * @param comment (optional) comments to add\n * @param name the name of the type\n * @param type the type\n * @returns ts.TypeAliasDeclaration\n */\nexport const createTypeAliasDeclaration = ({\n  comment,\n  exportType,\n  name,\n  type,\n  typeParameters = [],\n}: {\n  comment?: Comments;\n  exportType?: boolean;\n  name: string;\n  type: string | ts.TypeNode;\n  typeParameters?: FunctionTypeParameter[];\n}): ts.TypeAliasDeclaration => {\n  const node = ts.factory.createTypeAliasDeclaration(\n    exportType\n      ? [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)]\n      : undefined,\n    createIdentifier({ text: name }),\n    toTypeParameters(typeParameters),\n    createTypeNode(type),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\nexport const createTypeReferenceNode = ({\n  typeArguments,\n  typeName,\n}: {\n  typeArguments?: ts.TypeNode[];\n  typeName: string | ts.EntityName;\n}) => {\n  const node = ts.factory.createTypeReferenceNode(typeName, typeArguments);\n  return node;\n};\n\nexport const createTypeParenthesizedNode = ({\n  type,\n}: {\n  type: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParenthesizedType(type);\n  return node;\n};\n\nexport const createParameterDeclaration = ({\n  initializer,\n  modifiers,\n  name,\n  required = true,\n  type,\n}: {\n  initializer?: ts.Expression;\n  modifiers?: ts.ModifierLike[];\n  name: string | ts.BindingName;\n  required?: boolean;\n  type?: ts.TypeNode;\n}) => {\n  const node = ts.factory.createParameterDeclaration(\n    modifiers,\n    undefined,\n    name,\n    required ? undefined : ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n    type,\n    initializer,\n  );\n  return node;\n};\n\nexport const createNewExpression = ({\n  argumentsArray,\n  expression,\n  typeArguments,\n}: {\n  argumentsArray?: Array<ts.Expression>;\n  expression: ts.Expression;\n  typeArguments?: Array<ts.TypeNode>;\n}) => {\n  const node = ts.factory.createNewExpression(\n    expression,\n    typeArguments,\n    argumentsArray,\n  );\n  return node;\n};\n\nexport const createForOfStatement = ({\n  awaitModifier,\n  expression,\n  initializer,\n  statement,\n}: {\n  // TODO: parser - simplify this to be await?: boolean\n  awaitModifier?: ts.AwaitKeyword;\n  expression: ts.Expression;\n  initializer: ts.ForInitializer;\n  statement: ts.Statement;\n}) => {\n  const node = ts.factory.createForOfStatement(\n    awaitModifier,\n    initializer,\n    expression,\n    statement,\n  );\n  return node;\n};\n\nexport const createAssignment = ({\n  left,\n  right,\n}: {\n  left: ts.Expression;\n  right: ts.Expression;\n}) => ts.factory.createAssignment(left, right);\n\nexport const createBlock = ({\n  multiLine = true,\n  statements,\n}: {\n  multiLine?: boolean;\n  statements: Array<ts.Statement>;\n}) => ts.factory.createBlock(statements, multiLine);\n\nexport const createPropertyAssignment = ({\n  initializer,\n  name,\n}: {\n  initializer: ts.Expression;\n  name: string | ts.PropertyName;\n}) => ts.factory.createPropertyAssignment(name, initializer);\n\nexport const createRegularExpressionLiteral = ({\n  flags = [],\n  text,\n}: {\n  flags?: ReadonlyArray<'g' | 'i' | 'm' | 's' | 'u' | 'y'>;\n  text: string;\n}) => ts.factory.createRegularExpressionLiteral(`/${text}/${flags.join('')}`);\n\nexport const createAsExpression = ({\n  expression,\n  type,\n}: {\n  expression: ts.Expression;\n  type: ts.TypeNode;\n}) => ts.factory.createAsExpression(expression, type);\n","import ts from 'typescript';\n\nimport { createAsExpression, createTypeReferenceNode } from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  type ImportExportItemObject,\n  ots,\n} from './utils';\n\n/**\n * Create export all declaration. Example: `export * from './y'`.\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createExportAllDeclaration = ({\n  module,\n}: {\n  module: string;\n}): ts.ExportDeclaration => {\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    false,\n    undefined,\n    ots.string(module),\n  );\n  return statement;\n};\n\nexport type ImportExportItem = ImportExportItemObject | string;\n\nexport const createCallExpression = ({\n  functionName,\n  parameters = [],\n  types,\n}: {\n  functionName:\n    | string\n    | ts.PropertyAccessExpression\n    | ts.PropertyAccessChain\n    | ts.ElementAccessExpression;\n  parameters?: Array<string | ts.Expression | undefined>;\n  types?: ReadonlyArray<ts.TypeNode>;\n}) => {\n  const expression =\n    typeof functionName === 'string'\n      ? createIdentifier({ text: functionName })\n      : functionName;\n  const argumentsArray = parameters\n    .filter((parameter) => parameter !== undefined)\n    .map((parameter) =>\n      typeof parameter === 'string'\n        ? createIdentifier({ text: parameter })\n        : parameter,\n    );\n  const callExpression = ts.factory.createCallExpression(\n    expression,\n    types,\n    argumentsArray,\n  );\n  return callExpression;\n};\n\n/**\n * Create a named export declaration. Example: `export { X } from './y'`.\n * @param exports - named imports to export\n * @param module - module containing exports\n * @returns ts.ExportDeclaration\n */\nexport const createNamedExportDeclarations = ({\n  exports,\n  module,\n}: {\n  exports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ExportDeclaration => {\n  const exportedTypes = Array.isArray(exports) ? exports : [exports];\n  const hasNonTypeExport = exportedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = exportedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.export({\n      alias: item.alias,\n      asType: hasNonTypeExport && item.asType,\n      name: item.name,\n    });\n  });\n  const exportClause = ts.factory.createNamedExports(elements);\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createExportDeclaration(\n    undefined,\n    !hasNonTypeExport,\n    exportClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n\n/**\n * Create a const variable. Optionally, it can use const assertion or export\n * statement. Example: `export x = {} as const`.\n * @param assertion use const assertion?\n * @param exportConst export created variable?\n * @param expression expression for the variable.\n * @param name name of the variable.\n * @returns ts.VariableStatement\n */\nexport const createConstVariable = ({\n  assertion,\n  comment,\n  destructure,\n  exportConst,\n  expression,\n  name,\n  typeName,\n}: {\n  assertion?: 'const' | ts.TypeNode;\n  comment?: Comments;\n  destructure?: boolean;\n  exportConst?: boolean;\n  expression: ts.Expression;\n  name: string;\n  // TODO: support a more intuitive definition of generics for example\n  typeName?: string | ts.IndexedAccessTypeNode | ts.TypeNode;\n}): ts.VariableStatement => {\n  const initializer = assertion\n    ? createAsExpression({\n        expression,\n        type:\n          typeof assertion === 'string'\n            ? createTypeReferenceNode({ typeName: assertion })\n            : assertion,\n      })\n    : expression;\n  const nameIdentifier = createIdentifier({ text: name });\n  const declaration = ts.factory.createVariableDeclaration(\n    destructure\n      ? ts.factory.createObjectBindingPattern([\n          ts.factory.createBindingElement(\n            undefined,\n            undefined,\n            nameIdentifier,\n            undefined,\n          ),\n        ])\n      : nameIdentifier,\n    undefined,\n    typeName\n      ? typeof typeName === 'string'\n        ? createTypeReferenceNode({ typeName })\n        : typeName\n      : undefined,\n    initializer,\n  );\n  const statement = ts.factory.createVariableStatement(\n    exportConst\n      ? [ts.factory.createModifier(ts.SyntaxKind.ExportKeyword)]\n      : undefined,\n    ts.factory.createVariableDeclarationList([declaration], ts.NodeFlags.Const),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node: statement,\n  });\n\n  return statement;\n};\n\n/**\n * Create a named import declaration. Example: `import { X } from './y'`.\n * @param imports - named exports to import\n * @param module - module containing imports\n * @returns ts.ImportDeclaration\n */\nexport const createNamedImportDeclarations = ({\n  imports,\n  module,\n}: {\n  imports: Array<ImportExportItem> | ImportExportItem;\n  module: string;\n}): ts.ImportDeclaration => {\n  const importedTypes = Array.isArray(imports) ? imports : [imports];\n  const hasNonTypeImport = importedTypes.some(\n    (item) => typeof item !== 'object' || !item.asType,\n  );\n  const elements = importedTypes.map((name) => {\n    const item = typeof name === 'string' ? { name } : name;\n    return ots.import({\n      alias: item.alias,\n      asType: hasNonTypeImport && item.asType,\n      name: item.name,\n    });\n  });\n  const namedBindings = ts.factory.createNamedImports(elements);\n  const importClause = ts.factory.createImportClause(\n    !hasNonTypeImport,\n    undefined,\n    namedBindings,\n  );\n  const moduleSpecifier = ots.string(module);\n  const statement = ts.factory.createImportDeclaration(\n    undefined,\n    importClause,\n    moduleSpecifier,\n  );\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport {\n  type AccessLevel,\n  createBlock,\n  createTypeNode,\n  type FunctionParameter,\n  type FunctionTypeParameter,\n  toAccessLevelModifiers,\n  toExpression,\n  toParameterDeclarations,\n  toTypeParameters,\n} from './types';\nimport type { Comments } from './utils';\nimport { addLeadingComments, createIdentifier, isType } from './utils';\n\n/**\n * Create a class constructor declaration.\n * @param accessLevel - the access level of the constructor.\n * @param comment - comment to add to function.\n * @param multiLine - if it should be multi line.\n * @param parameters - parameters for the constructor.\n * @param statements - statements to put in the constructor body.\n * @returns ts.ConstructorDeclaration\n */\nexport const createConstructorDeclaration = ({\n  accessLevel,\n  comment,\n  multiLine = true,\n  parameters = [],\n  statements = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  multiLine?: boolean;\n  parameters?: FunctionParameter[];\n  statements?: ts.Statement[];\n}) => {\n  const node = ts.factory.createConstructorDeclaration(\n    toAccessLevelModifiers(accessLevel),\n    toParameterDeclarations(parameters),\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\n/**\n * Create a class method declaration.\n * @param accessLevel - the access level of the method.\n * @param comment - comment to add to function.\n * @param isStatic - if the function is static.\n * @param multiLine - if it should be multi line.\n * @param name - name of the method.\n * @param parameters - parameters for the method.\n * @param returnType - the return type of the method.\n * @param statements - statements to put in the constructor body.\n * @returns ts.MethodDeclaration\n */\nexport const createMethodDeclaration = ({\n  accessLevel,\n  comment,\n  isStatic = false,\n  multiLine = true,\n  name,\n  parameters = [],\n  returnType,\n  statements = [],\n  types = [],\n}: {\n  accessLevel?: AccessLevel;\n  comment?: Comments;\n  isStatic?: boolean;\n  multiLine?: boolean;\n  name: string;\n  parameters?: FunctionParameter[];\n  returnType?: string | ts.TypeNode;\n  statements?: ts.Statement[];\n  types?: FunctionTypeParameter[];\n}) => {\n  let modifiers = toAccessLevelModifiers(accessLevel);\n\n  if (isStatic) {\n    modifiers = [\n      ...modifiers,\n      ts.factory.createModifier(ts.SyntaxKind.StaticKeyword),\n    ];\n  }\n\n  const node = ts.factory.createMethodDeclaration(\n    modifiers,\n    undefined,\n    createIdentifier({ text: name }),\n    undefined,\n    types ? toTypeParameters(types) : undefined,\n    toParameterDeclarations(parameters),\n    returnType ? createTypeNode(returnType) : undefined,\n    createBlock({ multiLine, statements }),\n  );\n\n  addLeadingComments({\n    comments: comment,\n    node,\n  });\n\n  return node;\n};\n\ntype ClassDecorator = {\n  args: any[];\n  name: string;\n};\n\n/**\n * Create a class declaration.\n * @param decorator - the class decorator\n * @param members - elements in the class.\n * @param name - name of the class.\n * @returns ts.ClassDeclaration\n */\nexport const createClassDeclaration = ({\n  decorator,\n  members = [],\n  name,\n}: {\n  decorator?: ClassDecorator;\n  members?: ts.ClassElement[];\n  name: string;\n}) => {\n  let modifiers: ts.ModifierLike[] = [\n    ts.factory.createModifier(ts.SyntaxKind.ExportKeyword),\n  ];\n\n  if (decorator) {\n    modifiers = [\n      ts.factory.createDecorator(\n        createCallExpression({\n          functionName: decorator.name,\n          parameters: decorator.args\n            .map((arg) => toExpression({ value: arg }))\n            .filter(isType<ts.Expression>),\n        }),\n      ),\n      ...modifiers,\n    ];\n  }\n\n  // Add newline between each class member.\n  let m: ts.ClassElement[] = [];\n  members.forEach((member) => {\n    // @ts-expect-error\n    m = [...m, member, createIdentifier({ text: '\\n' })];\n  });\n\n  return ts.factory.createClassDeclaration(\n    modifiers,\n    createIdentifier({ text: name }),\n    [],\n    [],\n    m,\n  );\n};\n","import ts from 'typescript';\n\nexport const expressionToStatement = ({\n  expression,\n}: {\n  expression: ts.Expression;\n}) => {\n  const statement = ts.factory.createExpressionStatement(expression);\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { createCallExpression } from './module';\nimport { createTypeReferenceNode } from './types';\nimport { createIdentifier, isType } from './utils';\n\nexport const createReturnStatement = ({\n  expression,\n}: {\n  expression?: ts.Expression;\n}) => ts.factory.createReturnStatement(expression);\n\n/**\n * Create a return function call statement.\n * Example `return fn<string>(params)`.\n * @param args arguments to pass to the function.\n * @param name name of the function to call.\n * @param types list of function types\n * @returns ts.ReturnStatement\n */\nexport const createReturnFunctionCall = ({\n  args = [],\n  name,\n  types = [],\n}: {\n  args: any[];\n  name: string;\n  types?: string[];\n}) => {\n  const typeArguments = types.map((type) =>\n    createTypeReferenceNode({ typeName: type }),\n  );\n  const argumentsArray = args\n    .map((arg) =>\n      ts.isExpression(arg) ? arg : createIdentifier({ text: arg }),\n    )\n    .filter(isType<ts.Identifier | ts.Expression>);\n  const expression = createCallExpression({\n    functionName: name,\n    parameters: argumentsArray,\n    types: typeArguments,\n  });\n  const statement = createReturnStatement({ expression });\n  return statement;\n};\n\nexport const createReturnVariable = ({\n  expression,\n}: {\n  expression: string | ts.Expression;\n}) => {\n  const statement = createReturnStatement({\n    expression:\n      typeof expression === 'string'\n        ? createIdentifier({ text: expression })\n        : expression,\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport { expressionToStatement } from './convert';\nimport { createCallExpression } from './module';\nimport {\n  createArrowFunction,\n  createBlock,\n  createNewExpression,\n  createPropertyAccessChain,\n  createPropertyAccessExpression,\n} from './types';\nimport { createIdentifier } from './utils';\n\nexport const createSafeAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) => {\n      validTypescriptIdentifierRegExp.lastIndex = 0;\n      if (validTypescriptIdentifierRegExp.test(element)) {\n        return createPropertyAccessChain({\n          expression,\n          name: element,\n        });\n      }\n\n      return ts.factory.createElementAccessChain(\n        expression,\n        ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n        createIdentifier({ text: element }),\n      );\n    },\n    createIdentifier({ text: path[0]! }),\n  );\n\nexport const createAccessExpression = (path: string[]) =>\n  path.slice(1).reduce<ts.Expression>(\n    (expression, element) =>\n      createPropertyAccessExpression({\n        expression,\n        name: element,\n      }),\n    createIdentifier({ text: path[0]! }),\n  );\n\n/**\n * Handles an array of access expressions instead of nesting them (default TypeScript syntax)\n */\nexport const createPropertyAccessExpressions = ({\n  expressions,\n}: {\n  expressions: Array<string | ts.Expression | ts.MemberName>;\n}): ts.PropertyAccessExpression => {\n  const expression = expressions.reduce((expression, name) => {\n    const node = createPropertyAccessExpression({\n      expression,\n      // @ts-expect-error\n      name,\n    });\n    return node;\n  });\n  return expression as ts.PropertyAccessExpression;\n};\n\nexport const createBinaryExpression = ({\n  left,\n  operator = '=',\n  right,\n}: {\n  left: ts.Expression;\n  operator?: '=' | '===' | 'in';\n  right: ts.Expression | string;\n}) => {\n  const expression = ts.factory.createBinaryExpression(\n    left,\n    // TODO: add support for other tokens\n    operator === '='\n      ? ts.SyntaxKind.EqualsToken\n      : operator === '==='\n        ? ts.SyntaxKind.EqualsEqualsEqualsToken\n        : ts.SyntaxKind.InKeyword,\n    typeof right === 'string' ? createIdentifier({ text: right }) : right,\n  );\n  return expression;\n};\n\nexport const createIfStatement = ({\n  elseStatement,\n  expression,\n  thenStatement,\n}: {\n  elseStatement?: ts.Statement;\n  expression: ts.Expression;\n  thenStatement: ts.Statement;\n}) => ts.factory.createIfStatement(expression, thenStatement, elseStatement);\n\nexport const createDateTransformMutation = ({\n  path,\n}: {\n  path: string[];\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: ts.factory.createBinaryExpression(\n          accessExpression,\n          ts.SyntaxKind.EqualsToken,\n          createNewExpression({\n            argumentsArray: [accessExpression],\n            expression: createIdentifier({ text: 'Date' }),\n          }),\n        ),\n      }),\n    ],\n  });\n\n  const statement = createIfStatement({\n    expression: safeAccessExpression,\n    thenStatement,\n  });\n\n  return statement;\n};\n\nexport const createFunctionTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const thenStatement = createBlock({\n    statements: [\n      expressionToStatement({\n        expression: createCallExpression({\n          functionName: transformerName,\n          parameters: [accessExpression],\n        }),\n      }),\n    ],\n  });\n\n  const statement = [\n    createIfStatement({\n      expression: safeAccessExpression,\n      thenStatement,\n    }),\n  ];\n\n  return statement;\n};\n\nexport const createArrayTransformMutation = ({\n  path,\n  transformerName,\n}: {\n  path: string[];\n  transformerName: string;\n}): ts.Statement => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: ts.factory.createCallChain(\n            createPropertyAccessExpression({\n              expression: accessExpression,\n              name: 'forEach',\n            }),\n            undefined,\n            undefined,\n            [createIdentifier({ text: transformerName })],\n          ),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n\nexport const createDateTransformerExpression = ({\n  parameterName,\n}: {\n  parameterName: string;\n}) => {\n  const expression = createIdentifier({ text: 'Date' });\n  const newExpression = createNewExpression({\n    argumentsArray: [createIdentifier({ text: parameterName })],\n    expression,\n  });\n  return newExpression;\n};\n\nexport const createArrayMapTransform = ({\n  path,\n  transformExpression,\n}: {\n  path: string[];\n  transformExpression: ts.Expression;\n}) => {\n  const safeAccessExpression = createSafeAccessExpression(path);\n  const accessExpression = createAccessExpression(path);\n\n  const statement = createIfStatement({\n    expression: createCallExpression({\n      functionName: createPropertyAccessExpression({\n        expression: 'Array',\n        name: 'isArray',\n      }),\n      parameters: [safeAccessExpression],\n    }),\n    thenStatement: createBlock({\n      statements: [\n        expressionToStatement({\n          expression: ts.factory.createBinaryExpression(\n            accessExpression,\n            ts.factory.createToken(ts.SyntaxKind.EqualsToken),\n            ts.factory.createCallChain(\n              createPropertyAccessExpression({\n                expression: accessExpression,\n                name: 'map',\n              }),\n              undefined,\n              undefined,\n              [\n                createArrowFunction({\n                  parameters: [\n                    {\n                      name: 'item',\n                    },\n                  ],\n                  statements: transformExpression,\n                }),\n              ],\n            ),\n          ),\n        }),\n      ],\n    }),\n  });\n\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { validTypescriptIdentifierRegExp } from '../utils/regexp';\nimport {\n  createKeywordTypeNode,\n  createParameterDeclaration,\n  createStringLiteral,\n  createTypeNode,\n  createTypeReferenceNode,\n} from './types';\nimport {\n  addLeadingComments,\n  type Comments,\n  createIdentifier,\n  tsNodeToString,\n} from './utils';\n\nconst nullNode = createTypeReferenceNode({ typeName: 'null' });\n\n// Property of a interface type node.\nexport type Property = {\n  comment?: Comments;\n  isReadOnly?: boolean;\n  isRequired?: boolean;\n  name: string | ts.PropertyName;\n  type: any | ts.TypeNode;\n};\n\n/**\n * Returns a union of provided node with null if marked as nullable,\n * otherwise returns the provided node unmodified.\n */\nconst maybeNullable = ({\n  isNullable,\n  node,\n}: {\n  isNullable?: boolean;\n  node: ts.TypeNode;\n}) => {\n  if (!isNullable) {\n    return node;\n  }\n  return ts.factory.createUnionTypeNode([node, nullNode]);\n};\n\n/**\n * Create a interface type node. Example `{ readonly x: string, y?: number }`\n * @param properties - the properties of the interface.\n * @param isNullable - if the whole interface can be nullable\n * @returns ts.TypeLiteralNode | ts.TypeUnionNode\n */\nexport const createTypeInterfaceNode = ({\n  indexProperty,\n  isNullable,\n  properties,\n  useLegacyResolution,\n}: {\n  /**\n   * Adds an index signature if defined.\n   * @example\n   * ```ts\n   * type IndexProperty = {\n   *   [key: string]: string\n   * }\n   * ```\n   */\n  indexProperty?: Property;\n  isNullable?: boolean;\n  properties: Property[];\n  useLegacyResolution: boolean;\n}) => {\n  const propertyTypes: Array<ts.TypeNode> = [];\n\n  const members: Array<ts.TypeElement> = properties.map((property) => {\n    const modifiers: readonly ts.Modifier[] | undefined = property.isReadOnly\n      ? [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)]\n      : undefined;\n\n    const questionToken: ts.QuestionToken | undefined =\n      property.isRequired !== false\n        ? undefined\n        : ts.factory.createToken(ts.SyntaxKind.QuestionToken);\n\n    const type: ts.TypeNode | undefined = createTypeNode(property.type);\n    propertyTypes.push(type);\n\n    const signature = ts.factory.createPropertySignature(\n      modifiers,\n      useLegacyResolution ||\n        (typeof property.name === 'string' &&\n          property.name.match(validTypescriptIdentifierRegExp)) ||\n        (typeof property.name !== 'string' && ts.isPropertyName(property.name))\n        ? property.name\n        : createStringLiteral({ text: property.name }),\n      questionToken,\n      type,\n    );\n\n    addLeadingComments({\n      comments: property.comment,\n      node: signature,\n    });\n\n    return signature;\n  });\n\n  if (indexProperty) {\n    const modifiers: readonly ts.Modifier[] | undefined =\n      indexProperty.isReadOnly\n        ? [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)]\n        : undefined;\n    const indexSignature = ts.factory.createIndexSignature(\n      modifiers,\n      [\n        createParameterDeclaration({\n          name: createIdentifier({ text: String(indexProperty.name) }),\n          type: createKeywordTypeNode({ keyword: 'string' }),\n        }),\n      ],\n      createTypeNode(indexProperty.type),\n    );\n    members.push(indexSignature);\n  }\n\n  const node = ts.factory.createTypeLiteralNode(members);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type union node. Example `string | number | boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.UnionTypeNode\n */\nexport const createTypeUnionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createUnionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type intersection node. Example `string & number & boolean`\n * @param types - the types in the union\n * @param isNullable - if the whole type can be null\n * @returns ts.IntersectionTypeNode | ts.UnionTypeNode\n */\nexport const createTypeIntersectionNode = ({\n  isNullable,\n  types,\n}: {\n  isNullable?: boolean;\n  types: (any | ts.TypeNode)[];\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createIntersectionTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type tuple node. Example `string, number, boolean`\n * @param isNullable if the whole type can be null\n * @param types the types in the union\n * @returns ts.UnionTypeNode\n */\nexport const createTypeTupleNode = ({\n  isNullable = false,\n  types,\n}: {\n  isNullable?: boolean;\n  types: Array<any | ts.TypeNode>;\n}) => {\n  const nodes = types.map((type) => createTypeNode(type));\n  const node = ts.factory.createTupleTypeNode(nodes);\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type record node. Example `{ [key: string]: string }`\n * @param keys - key types.\n * @param values - value types.\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeRecordNode = (\n  keys: (any | ts.TypeNode)[],\n  values: (any | ts.TypeNode)[],\n  isNullable: boolean = false,\n  useLegacyResolution: boolean = true,\n) => {\n  const keyNode = createTypeUnionNode({\n    types: keys,\n  });\n  const valueNode = createTypeUnionNode({\n    types: values,\n  });\n  // NOTE: We use the syntax `{ [key: string]: string }` because using a Record causes\n  //       invalid types with circular dependencies. This is functionally the same.\n  // Ref: https://github.com/hey-api/openapi-ts/issues/370\n  const node = createTypeInterfaceNode({\n    properties: [\n      {\n        name: `[key: ${tsNodeToString({ node: keyNode, unescape: true })}]`,\n        type: valueNode,\n      },\n    ],\n    useLegacyResolution,\n  });\n  return maybeNullable({ isNullable, node });\n};\n\n/**\n * Create type array node. Example `Array<string | number>`\n * @param types - the types\n * @param isNullable - if the whole type can be null\n * @returns ts.TypeReferenceNode | ts.UnionTypeNode\n */\nexport const createTypeArrayNode = (\n  types: (any | ts.TypeNode)[] | ts.TypeNode | string,\n  isNullable: boolean = false,\n) => {\n  const node = createTypeReferenceNode({\n    typeArguments: [\n      // @ts-expect-error\n      Array.isArray(types) ? createTypeUnionNode({ types }) : types,\n    ],\n    typeName: 'Array',\n  });\n  return maybeNullable({ isNullable, node });\n};\n","import * as classes from './classes';\nimport * as convert from './convert';\nimport * as module from './module';\nimport * as _return from './return';\nimport * as transform from './transform';\nimport * as typedef from './typedef';\nimport * as types from './types';\nimport * as utils from './utils';\n\nexport type { Property } from './typedef';\nexport type { FunctionParameter } from './types';\nexport type { Comments } from './utils';\nexport type { ClassElement, Node, TypeNode } from 'typescript';\n\nexport const compiler = {\n  anonymousFunction: types.createAnonymousFunction,\n  arrayLiteralExpression: types.createArrayLiteralExpression,\n  arrowFunction: types.createArrowFunction,\n  asExpression: types.createAsExpression,\n  assignment: types.createAssignment,\n  awaitExpression: types.createAwaitExpression,\n  binaryExpression: transform.createBinaryExpression,\n  block: types.createBlock,\n  callExpression: module.createCallExpression,\n  classDeclaration: classes.createClassDeclaration,\n  conditionalExpression: types.createConditionalExpression,\n  constVariable: module.createConstVariable,\n  constructorDeclaration: classes.createConstructorDeclaration,\n  enumDeclaration: types.createEnumDeclaration,\n  exportAllDeclaration: module.createExportAllDeclaration,\n  exportNamedDeclaration: module.createNamedExportDeclarations,\n  expressionToStatement: convert.expressionToStatement,\n  forOfStatement: types.createForOfStatement,\n  functionTypeNode: types.createFunctionTypeNode,\n  identifier: utils.createIdentifier,\n  ifStatement: transform.createIfStatement,\n  indexedAccessTypeNode: types.createIndexedAccessTypeNode,\n  isTsNode: utils.isTsNode,\n  keywordTypeNode: types.createKeywordTypeNode,\n  literalTypeNode: types.createLiteralTypeNode,\n  methodDeclaration: classes.createMethodDeclaration,\n  namedImportDeclarations: module.createNamedImportDeclarations,\n  namespaceDeclaration: types.createNamespaceDeclaration,\n  newExpression: types.createNewExpression,\n  nodeToString: utils.tsNodeToString,\n  null: types.createNull,\n  objectExpression: types.createObjectType,\n  ots: utils.ots,\n  parameterDeclaration: types.createParameterDeclaration,\n  propertyAccessExpression: types.createPropertyAccessExpression,\n  propertyAccessExpressions: transform.createPropertyAccessExpressions,\n  propertyAssignment: types.createPropertyAssignment,\n  regularExpressionLiteral: types.createRegularExpressionLiteral,\n  returnFunctionCall: _return.createReturnFunctionCall,\n  returnStatement: _return.createReturnStatement,\n  returnVariable: _return.createReturnVariable,\n  safeAccessExpression: transform.createSafeAccessExpression,\n  stringLiteral: types.createStringLiteral,\n  stringToTsNodes: utils.stringToTsNodes,\n  transformArrayMap: transform.createArrayMapTransform,\n  transformArrayMutation: transform.createArrayTransformMutation,\n  transformDateMutation: transform.createDateTransformMutation,\n  transformFunctionMutation: transform.createFunctionTransformMutation,\n  transformNewDate: transform.createDateTransformerExpression,\n  typeAliasDeclaration: types.createTypeAliasDeclaration,\n  typeArrayNode: typedef.createTypeArrayNode,\n  typeInterfaceNode: typedef.createTypeInterfaceNode,\n  typeIntersectionNode: typedef.createTypeIntersectionNode,\n  typeNode: types.createTypeNode,\n  typeOfExpression: types.createTypeOfExpression,\n  typeParenthesizedNode: types.createTypeParenthesizedNode,\n  typeRecordNode: typedef.createTypeRecordNode,\n  typeReferenceNode: types.createTypeReferenceNode,\n  typeTupleNode: typedef.createTypeTupleNode,\n  typeUnionNode: typedef.createTypeUnionNode,\n  valueToExpression: types.toExpression,\n};\n","import type { IR } from './types';\n\n/**\n * Traverse the parsed intermediate representation model and broadcast\n * various events to listeners.\n */\nexport const parseIR = async ({ context }: { context: IR.Context }) => {\n  await context.broadcast('before');\n\n  if (context.ir.components) {\n    for (const name in context.ir.components.schemas) {\n      const schema = context.ir.components.schemas[name]!;\n      const $ref = `#/components/schemas/${name}`;\n      await context.broadcast('schema', { $ref, name, schema });\n    }\n\n    for (const name in context.ir.components.parameters) {\n      const parameter = context.ir.components.parameters[name]!;\n      const $ref = `#/components/parameters/${name}`;\n      await context.broadcast('parameter', { $ref, name, parameter });\n    }\n\n    for (const name in context.ir.components.requestBodies) {\n      const requestBody = context.ir.components.requestBodies[name]!;\n      const $ref = `#/components/requestBodies/${name}`;\n      await context.broadcast('requestBody', { $ref, name, requestBody });\n    }\n  }\n\n  for (const path in context.ir.paths) {\n    const pathItem = context.ir.paths[path as keyof IR.PathsObject];\n\n    for (const _method in pathItem) {\n      const method = _method as keyof IR.PathItemObject;\n      const operation = pathItem[method]!;\n      await context.broadcast('operation', { method, operation, path });\n    }\n  }\n\n  await context.broadcast('after');\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type { OpenApi } from '../openApi';\nimport type { Client } from '../types/client';\nimport { getConfig, legacyNameFromConfig } from '../utils/config';\nimport { getHttpRequestName } from '../utils/getHttpRequestName';\nimport type { Templates } from '../utils/handlebars';\nimport { sortByName } from '../utils/sort';\nimport { ensureDirSync } from './utils';\n\n/**\n * Generate the OpenAPI client index file using the Handlebar template and write it to disk.\n * The index file just contains all the exports you need to use the client as a standalone\n * library. But you can also import individual models and services directly.\n * @param openApi {@link OpenApi} Dereferenced OpenAPI specification\n * @param outputPath Directory to write the generated files to\n * @param client Client containing models, schemas, and services\n * @param templates The loaded handlebar templates\n */\nexport const generateLegacyClientClass = async (\n  openApi: OpenApi,\n  outputPath: string,\n  client: Client,\n  templates: Templates,\n) => {\n  const config = getConfig();\n\n  const templateResult = templates.client({\n    $config: config,\n    ...client,\n    httpRequest: getHttpRequestName(config.client),\n    models: sortByName(client.models),\n    services: sortByName(client.services),\n  });\n\n  if (legacyNameFromConfig(config)) {\n    ensureDirSync(outputPath);\n    fs.writeFileSync(\n      path.resolve(outputPath, `${legacyNameFromConfig(config)}.ts`),\n      templateResult,\n    );\n  }\n};\n","import type { Config } from '../types/config';\n\n/**\n * Generate the HttpRequest filename based on the selected client\n * @param client HTTP client to generate\n */\nexport const getHttpRequestName = (client: Config['client']): string => {\n  switch (client.name) {\n    case 'legacy/angular':\n      return 'AngularHttpRequest';\n    case 'legacy/axios':\n      return 'AxiosHttpRequest';\n    case 'legacy/fetch':\n      return 'FetchHttpRequest';\n    case 'legacy/node':\n      return 'NodeHttpRequest';\n    case 'legacy/xhr':\n      return 'XHRHttpRequest';\n    default:\n      return '';\n  }\n};\n","export function sort(a: string, b: string): number {\n  const nameA = a.toLocaleLowerCase();\n  const nameB = b.toLocaleLowerCase();\n  return nameA.localeCompare(nameB, 'en');\n}\n\nexport const sorterByName = <T extends { name: string }>(a: T, b: T) =>\n  sort(a.name, b.name);\n\nexport function sortByName<T extends { name: string }>(items: T[]): T[] {\n  return items.sort(sorterByName);\n}\n","import type { PathLike } from 'node:fs';\nimport fs from 'node:fs';\n\nexport const ensureDirSync = (path: PathLike) => {\n  if (!fs.existsSync(path)) {\n    fs.mkdirSync(path, { recursive: true });\n  }\n};\n\nexport const removeDirSync = (path: PathLike) => {\n  if (fs.existsSync(path)) {\n    fs.rmSync(path, { force: true, recursive: true });\n  }\n};\n\n/**\n * Construct a relative import path to modules. This is used for example\n * in plugins to import types or SDK module.\n */\nexport const relativeModulePath = ({\n  moduleOutput,\n  sourceOutput,\n}: {\n  /**\n   * Output path to the imported module.\n   * @example\n   * 'types'\n   */\n  moduleOutput: string;\n  /**\n   * Output path to the source module.\n   * @example\n   * '@tanstack/react-query'\n   */\n  sourceOutput: string;\n}): string => {\n  const outputParts = sourceOutput.split('/');\n  const relativePath =\n    new Array(outputParts.length).fill('').join('../') || './';\n  return `${relativePath}${moduleOutput}`;\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type { ImportExportItemObject } from '../compiler/utils';\nimport type { Config } from '../types/config';\nimport { ensureDirSync, relativeModulePath } from './utils';\n\n/**\n * Returns path to the client module. When using client packages, this will be\n * simply the name of the package. When bundling a client, this will be a\n * relative path to the bundled client folder.\n */\nexport const clientModulePath = ({\n  config,\n  sourceOutput,\n}: {\n  config: Config;\n  sourceOutput: string;\n}): string => {\n  if (config.client.bundle) {\n    return relativeModulePath({\n      moduleOutput: 'client',\n      sourceOutput,\n    });\n  }\n\n  return config.client.name;\n};\n\nexport const clientApi = {\n  Options: {\n    asType: true,\n    name: 'Options',\n  },\n  OptionsLegacyParser: {\n    asType: true,\n    name: 'OptionsLegacyParser',\n  },\n} satisfies Record<string, ImportExportItemObject>;\n\n/**\n * Creates a `client` folder containing the same modules as the client package.\n */\nexport const generateClientBundle = ({\n  name,\n  outputPath,\n}: {\n  name: string;\n  outputPath: string;\n}): void => {\n  // create folder for client modules\n  const dirPath = path.resolve(outputPath, 'client');\n  ensureDirSync(dirPath);\n\n  const clientModulePath = path.normalize(require.resolve(name));\n  const clientModulePathComponents = clientModulePath.split(path.sep);\n  const clientSrcPath = [\n    ...clientModulePathComponents.slice(\n      0,\n      clientModulePathComponents.indexOf('dist'),\n    ),\n    'src',\n  ].join(path.sep);\n\n  // copy client modules\n  const files = ['index.ts', 'types.ts', 'utils.ts'];\n  files.forEach((file) => {\n    fs.copyFileSync(\n      path.resolve(clientSrcPath, file),\n      path.resolve(dirPath, file),\n    );\n  });\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type { Client } from '../types/client';\nimport { getConfig, legacyNameFromConfig } from '../utils/config';\nimport { getHttpRequestName } from '../utils/getHttpRequestName';\nimport type { Templates } from '../utils/handlebars';\n\n/**\n * Generate OpenAPI core files, this includes the basic boilerplate code to handle requests.\n * @param outputPath Directory to write the generated files to\n * @param client Client containing models, schemas, and services\n * @param templates The loaded handlebar templates\n */\nexport const generateLegacyCore = async (\n  outputPath: string,\n  client: Client,\n  templates: Templates,\n): Promise<void> => {\n  const config = getConfig();\n\n  if (config.exportCore) {\n    const context = {\n      httpRequest: getHttpRequestName(config.client),\n      server: config.base !== undefined ? config.base : client.server,\n      version: client.version,\n    };\n\n    fs.rmSync(path.resolve(outputPath), {\n      force: true,\n      recursive: true,\n    });\n    fs.mkdirSync(path.resolve(outputPath), {\n      recursive: true,\n    });\n\n    await fs.writeFileSync(\n      path.resolve(outputPath, 'OpenAPI.ts'),\n      templates.core.settings({\n        $config: config,\n        ...context,\n      }),\n    );\n    await fs.writeFileSync(\n      path.resolve(outputPath, 'ApiError.ts'),\n      templates.core.apiError({\n        $config: config,\n        ...context,\n      }),\n    );\n    await fs.writeFileSync(\n      path.resolve(outputPath, 'ApiRequestOptions.ts'),\n      templates.core.apiRequestOptions({\n        $config: config,\n        ...context,\n      }),\n    );\n    await fs.writeFileSync(\n      path.resolve(outputPath, 'ApiResult.ts'),\n      templates.core.apiResult({\n        $config: config,\n        ...context,\n      }),\n    );\n    if (config.client.name !== 'legacy/angular') {\n      await fs.writeFileSync(\n        path.resolve(outputPath, 'CancelablePromise.ts'),\n        templates.core.cancelablePromise({\n          $config: config,\n          ...context,\n        }),\n      );\n    }\n    await fs.writeFileSync(\n      path.resolve(outputPath, 'request.ts'),\n      templates.core.request({\n        $config: config,\n        ...context,\n      }),\n    );\n\n    if (legacyNameFromConfig(config)) {\n      await fs.writeFileSync(\n        path.resolve(outputPath, 'BaseHttpRequest.ts'),\n        templates.core.baseHttpRequest({\n          $config: config,\n          ...context,\n        }),\n      );\n      await fs.writeFileSync(\n        path.resolve(outputPath, `${context.httpRequest}.ts`),\n        templates.core.httpRequest({\n          $config: config,\n          ...context,\n        }),\n      );\n    }\n\n    if (config.request) {\n      const requestFile = path.resolve(process.cwd(), config.request);\n      const requestFileExists = await fs.existsSync(requestFile);\n      if (!requestFileExists) {\n        throw new Error(`Custom request file \"${requestFile}\" does not exists`);\n      }\n      await fs.copyFileSync(\n        requestFile,\n        path.resolve(outputPath, 'request.ts'),\n      );\n    }\n  }\n};\n","import fs from 'node:fs';\nimport path from 'node:path';\n\nimport type ts from 'typescript';\n\nimport { compiler } from '../compiler';\nimport { type ImportExportItemObject, tsNodeToString } from '../compiler/utils';\nimport type { IR } from '../ir/types';\nimport { ensureValidIdentifier } from '../openApi/shared/utils/identifier';\nimport type { StringCase } from '../types/config';\nimport { stringCase } from '../utils/stringCase';\nimport { ensureDirSync } from './utils';\n\nexport interface Identifier {\n  /**\n   * Did this function add a new property to the file's `identifiers` map?\n   */\n  created: boolean;\n  /**\n   * The resolved identifier name. False means the identifier has been blacklisted.\n   */\n  name: string | false;\n}\n\ntype Namespace = Record<\n  string,\n  Pick<Identifier, 'name'> & {\n    /**\n     * Ref to the type in OpenAPI specification.\n     */\n    $ref: string;\n  }\n>;\n\ninterface Namespaces {\n  /**\n   * Type namespace. Types, interfaces, and type aliases exist here.\n   * @example\n   * ```ts\n   * export type Foo = string;\n   * ```\n   */\n  type: Namespace;\n  /**\n   * Value namespace. Variables, functions, classes, and constants exist here.\n   * @example\n   * ```js\n   * export const foo = '';\n   * ```\n   */\n  value: Namespace;\n}\n\nexport class TypeScriptFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  private _exportFromIndex: boolean;\n  private _headers: Array<string> = [];\n  private _identifierCase: StringCase | undefined;\n  private _imports = new Map<string, Map<string, ImportExportItemObject>>();\n  private _items: Array<ts.Node | string> = [];\n  private _name: string;\n  private _path: string;\n\n  public namespaces: Namespaces = {\n    type: {},\n    value: {},\n  };\n  /**\n   * Path relative to the client output root.\n   */\n  // TODO: parser - add relative path property for quick access, currently\n  // everything is resolved into an absolute path with cwd\n  // public relativePath: string;\n\n  public constructor({\n    dir,\n    exportFromIndex = false,\n    header = true,\n    identifierCase,\n    name,\n  }: {\n    dir: string;\n    /**\n     * Should the exports from this file be re-exported in the index barrel file?\n     */\n    exportFromIndex?: boolean;\n    header?: boolean;\n    identifierCase?: StringCase;\n    name: string;\n  }) {\n    this._exportFromIndex = exportFromIndex;\n    this._identifierCase = identifierCase;\n    this._name = this._setName(name);\n    this._path = path.resolve(dir, this._name);\n\n    if (header) {\n      this._headers.push(\n        '// This file is auto-generated by @hey-api/openapi-ts',\n      );\n    }\n  }\n\n  public add(...nodes: Array<ts.Node | string>) {\n    this._items = this._items.concat(nodes);\n  }\n\n  /**\n   * Prevents a specific identifier from being created. This is useful for\n   * transformers where we know a certain transformer won't be needed, and\n   * we want to avoid attempting to create since we know it won't happen.\n   */\n  public blockIdentifier({\n    $ref,\n    namespace,\n  }: Pick<EnsureUniqueIdentifierData, '$ref'> & {\n    namespace: keyof Namespaces;\n  }): Identifier {\n    const refValue = this.namespaces[namespace][$ref];\n    if (!refValue) {\n      throw new Error(\n        `Identifier for $ref ${$ref} in namespace ${namespace} not found`,\n      );\n    }\n\n    refValue.name = false;\n\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  public get exportFromIndex(): boolean {\n    return this._exportFromIndex;\n  }\n\n  public identifier({\n    namespace,\n    ...args\n  }: Omit<EnsureUniqueIdentifierData, 'case' | 'namespace'> & {\n    namespace: keyof Namespaces;\n  }): Identifier {\n    return ensureUniqueIdentifier({\n      case: this._identifierCase,\n      namespace: this.namespaces[namespace],\n      ...args,\n    });\n  }\n\n  /**\n   * Adds an import to the provided module. Handles duplication, returns added import.\n   */\n  public import({\n    module,\n    ...importedItem\n  }: ImportExportItemObject & {\n    module: string;\n  }): ImportExportItemObject {\n    let moduleMap = this._imports.get(module);\n\n    if (!moduleMap) {\n      moduleMap = new Map<string, ImportExportItemObject>();\n      this._imports.set(module, moduleMap);\n    }\n\n    const match = moduleMap.get(importedItem.name);\n    if (match) {\n      return match;\n    }\n\n    moduleMap.set(importedItem.name, importedItem);\n    return importedItem;\n  }\n\n  public isEmpty() {\n    return !this._items.length;\n  }\n\n  public nameWithoutExtension() {\n    const { name } = splitNameAndExtension(this._name);\n    return name;\n  }\n\n  public relativePathToFile({\n    context,\n    id,\n  }: {\n    context: IR.Context;\n    id: string;\n  }): string {\n    const file = context.file({ id });\n    if (!file) {\n      throw new Error(`File with id ${id} does not exist`);\n    }\n\n    const thisRelativePath = this._path.substring(\n      context.config.output.path.length + 1,\n    );\n    const fileRelativePath = file._path.substring(\n      context.config.output.path.length + 1,\n    );\n    const outputParts = thisRelativePath.split(path.sep);\n    const relativePath =\n      new Array(outputParts.length).fill('').join('../') || './';\n    // TODO: parser - cache responses\n    return `${relativePath}${splitNameAndExtension(fileRelativePath).name}`;\n  }\n\n  public remove(options?: Parameters<typeof fs.rmSync>[1]) {\n    fs.rmSync(this._path, options);\n  }\n\n  /**\n   * Removes last node form the stack. Works as undo.\n   */\n  public removeNode() {\n    this._items = this._items.slice(0, this._items.length - 1);\n  }\n\n  private _setName(fileName: string) {\n    if (fileName.includes('index')) {\n      return fileName;\n    }\n\n    const { extension, name } = splitNameAndExtension(fileName);\n    return [name, 'gen', extension].filter(Boolean).join('.');\n  }\n\n  public toString(separator: string = '\\n') {\n    let output: string[] = [];\n    if (this._headers.length) {\n      output.push(this._headers.join('\\n'));\n    }\n    const importsStringArray: string[] = [];\n    for (const [_module, moduleMap] of this._imports.entries()) {\n      const imports = Array.from(moduleMap.values());\n      const node = compiler.namedImportDeclarations({\n        imports,\n        module: _module,\n      });\n      importsStringArray.push(tsNodeToString({ node }));\n    }\n    if (importsStringArray.length) {\n      output.push(importsStringArray.join('\\n'));\n    }\n    output = output.concat(\n      this._items.map((node) =>\n        typeof node === 'string'\n          ? node\n          : tsNodeToString({ node, unescape: true }),\n      ),\n    );\n    return output.join(separator);\n  }\n\n  public write(separator = '\\n') {\n    if (this.isEmpty()) {\n      this.remove({ force: true });\n      return;\n    }\n\n    let dir = this._path;\n    if (typeof this._path === 'string') {\n      const parts = this._path.split(path.sep);\n      dir = parts.slice(0, parts.length - 1).join(path.sep);\n    }\n    ensureDirSync(dir);\n    fs.writeFileSync(this._path, this.toString(separator));\n  }\n}\n\ninterface EnsureUniqueIdentifierData {\n  $ref: string;\n  case: StringCase | undefined;\n  count?: number;\n  create?: boolean;\n  /**\n   * Transforms name obtained from `$ref` before it's passed to `stringCase()`.\n   */\n  nameTransformer?: (name: string) => string;\n  namespace: Namespace;\n}\n\nconst ensureUniqueIdentifier = ({\n  $ref,\n  case: identifierCase,\n  count = 1,\n  create = false,\n  nameTransformer,\n  namespace,\n}: EnsureUniqueIdentifierData): Identifier => {\n  const parts = $ref.split('/');\n  const name = parts[parts.length - 1] || '';\n\n  if (!name) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const refValue = namespace[$ref];\n  if (refValue) {\n    return {\n      created: false,\n      name: refValue.name,\n    };\n  }\n\n  const nameWithTransform = nameTransformer?.(name) ?? name;\n  let nameWithCasing = stringCase({\n    case: identifierCase,\n    value: nameWithTransform,\n  });\n\n  if (count > 1) {\n    nameWithCasing = `${nameWithCasing}${count}`;\n  }\n\n  let nameValue = namespace[nameWithCasing];\n  if (nameValue) {\n    if (nameValue.$ref === $ref) {\n      return {\n        created: false,\n        name: nameValue.name,\n      };\n    }\n\n    return ensureUniqueIdentifier({\n      $ref,\n      case: identifierCase,\n      count: count + 1,\n      create,\n      nameTransformer,\n      namespace,\n    });\n  }\n\n  if (!create) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  nameValue = {\n    $ref,\n    name: ensureValidIdentifier(nameWithCasing),\n  };\n  namespace[nameWithCasing] = nameValue;\n  namespace[nameValue.$ref] = nameValue;\n\n  return {\n    created: true,\n    name: nameValue.name,\n  };\n};\n\nconst splitNameAndExtension = (fileName: string) => {\n  const match = fileName.match(/\\.[0-9a-z]+$/i);\n  const extension = match ? match[0].slice(1) : '';\n  const name = fileName.slice(\n    0,\n    fileName.length - (extension ? extension.length + 1 : 0),\n  );\n  return { extension, name };\n};\n","import {\n  illegalStartCharactersRegExp,\n  reservedBrowserGlobalsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedJavaScriptKeywordsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n} from '../../../utils/regexp';\n\nconst regexps = [\n  reservedJavaScriptKeywordsRegExp,\n  reservedTypeScriptKeywordsRegExp,\n  reservedJavaScriptGlobalsRegExp,\n  reservedNodeGlobalsRegExp,\n  reservedBrowserGlobalsRegExp,\n];\n\nexport const ensureValidIdentifier = (name: string): string => {\n  let identifier = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n\n  illegalStartCharactersRegExp.lastIndex = 0;\n  if (illegalStartCharactersRegExp.test(identifier)) {\n    return `_${identifier}`;\n  }\n\n  for (const regexp of regexps) {\n    if (identifier.startsWith('_')) {\n      return identifier;\n    }\n\n    identifier = identifier.replace(regexp, '_$1');\n  }\n\n  return identifier;\n};\n","import type { StringCase } from '../types/config';\n\nconst uppercaseRegExp = /[\\p{Lu}]/u;\nconst lowercaseRegExp = /[\\p{Ll}]/u;\nconst identifierRegExp = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst separatorsRegExp = /[_.\\- `\\\\[\\]{}\\\\/]+/;\n\nconst leadingSeparatorsRegExp = new RegExp(`^${separatorsRegExp.source}`);\nconst separatorsAndIdentifierRegExp = new RegExp(\n  `${separatorsRegExp.source}${identifierRegExp.source}`,\n  'gu',\n);\nconst numbersAndIdentifierRegExp = new RegExp(\n  `\\\\d+${identifierRegExp.source}`,\n  'gu',\n);\n\nconst preserveCase = ({\n  case: _case,\n  string,\n}: {\n  readonly case: StringCase;\n  string: string;\n}) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  let isLastLastCharPreserved = false;\n\n  const separator =\n    _case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE' ? '_' : '-';\n\n  for (let index = 0; index < string.length; index++) {\n    const character = string[index]!;\n    isLastLastCharPreserved =\n      index > 2 ? string[index - 3] === separator : true;\n\n    let nextIndex = index + 1;\n    let nextCharacter = string[nextIndex];\n    separatorsRegExp.lastIndex = 0;\n    while (nextCharacter && separatorsRegExp.test(nextCharacter)) {\n      nextIndex += 1;\n      nextCharacter = string[nextIndex];\n    }\n    const isSeparatorBeforeNextCharacter = nextIndex !== index + 1;\n\n    lowercaseRegExp.lastIndex = 0;\n    uppercaseRegExp.lastIndex = 0;\n    if (\n      uppercaseRegExp.test(character) &&\n      (isLastCharLower ||\n        (nextCharacter &&\n          !isSeparatorBeforeNextCharacter &&\n          nextCharacter !== 's' &&\n          lowercaseRegExp.test(nextCharacter)))\n    ) {\n      // insert separator behind character\n      string = `${string.slice(0, index)}${separator}${string.slice(index)}`;\n      index++;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = false;\n      isLastCharUpper = true;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      lowercaseRegExp.test(character) &&\n      !isLastLastCharPreserved &&\n      // naive detection of plurals\n      !(\n        character === 's' &&\n        (!nextCharacter || nextCharacter.toLocaleLowerCase() !== nextCharacter)\n      )\n    ) {\n      // insert separator 2 characters behind\n      string = `${string.slice(0, index - 1)}${separator}${string.slice(index - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower = true;\n      isLastCharUpper = false;\n    } else {\n      const characterLower = character.toLocaleLowerCase();\n      const characterUpper = character.toLocaleUpperCase();\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharLower =\n        characterLower === character && characterUpper !== character;\n      isLastCharUpper =\n        characterUpper === character && characterLower !== character;\n    }\n  }\n\n  return string;\n};\n\nexport const stringCase = ({\n  case: _case,\n  stripLeadingSeparators = true,\n  value,\n}: {\n  readonly case: StringCase | undefined;\n  /**\n   * If leading separators have a semantic meaning, we might not want to\n   * remove them.\n   */\n  stripLeadingSeparators?: boolean;\n  value: string;\n}): string => {\n  let result = value.trim();\n\n  if (!result.length) {\n    return '';\n  }\n\n  if (!_case || _case === 'preserve') {\n    return result;\n  }\n\n  if (result.length === 1) {\n    separatorsRegExp.lastIndex = 0;\n    if (separatorsRegExp.test(result)) {\n      return '';\n    }\n\n    return _case === 'PascalCase' || _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n  }\n\n  const hasUpperCase = result !== result.toLocaleLowerCase();\n\n  if (hasUpperCase) {\n    result = preserveCase({ case: _case, string: result });\n  }\n\n  if (stripLeadingSeparators || result[0] !== value[0]) {\n    result = result.replace(leadingSeparatorsRegExp, '');\n  }\n\n  result =\n    _case === 'SCREAMING_SNAKE_CASE'\n      ? result.toLocaleUpperCase()\n      : result.toLocaleLowerCase();\n\n  if (_case === 'PascalCase') {\n    result = `${result.charAt(0).toLocaleUpperCase()}${result.slice(1)}`;\n  }\n\n  if (_case === 'snake_case' || _case === 'SCREAMING_SNAKE_CASE') {\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (offset === 0 && !stripLeadingSeparators) {\n          return match;\n        }\n        return `_${identifier}`;\n      },\n    );\n\n    if (result[result.length - 1] === '_') {\n      // strip trailing underscore\n      result = result.slice(0, result.length - 1);\n    }\n  } else {\n    separatorsAndIdentifierRegExp.lastIndex = 0;\n    numbersAndIdentifierRegExp.lastIndex = 0;\n\n    result = result.replaceAll(\n      numbersAndIdentifierRegExp,\n      (match, _, offset) => {\n        if (['_', '-', '.'].includes(result.charAt(offset + match.length))) {\n          return match;\n        }\n\n        return match.toLocaleUpperCase();\n      },\n    );\n\n    result = result.replaceAll(\n      separatorsAndIdentifierRegExp,\n      (match, identifier, offset) => {\n        if (\n          offset === 0 &&\n          !stripLeadingSeparators &&\n          match[0] &&\n          value.startsWith(match[0])\n        ) {\n          return match;\n        }\n        return identifier.toLocaleUpperCase();\n      },\n    );\n  }\n\n  return result;\n};\n","import { compiler } from '../compiler';\nimport type { Files } from '../types/utils';\nimport { getConfig, legacyNameFromConfig } from '../utils/config';\nimport { TypeScriptFile } from './files';\n\nexport const generateIndexFile = ({ files }: { files: Files }): void => {\n  const config = getConfig();\n\n  files.index = new TypeScriptFile({\n    dir: config.output.path,\n    name: 'index.ts',\n  });\n\n  if (legacyNameFromConfig(config)) {\n    files.index.add(\n      compiler.exportNamedDeclaration({\n        exports: legacyNameFromConfig(config)!,\n        module: `./${legacyNameFromConfig(config)}`,\n      }),\n    );\n  }\n\n  if (config.exportCore) {\n    files.index.add(\n      compiler.exportNamedDeclaration({\n        exports: 'ApiError',\n        module: './core/ApiError',\n      }),\n    );\n    if (config.plugins['@hey-api/sdk']?.response === 'response') {\n      files.index.add(\n        compiler.exportNamedDeclaration({\n          exports: { asType: true, name: 'ApiResult' },\n          module: './core/ApiResult',\n        }),\n      );\n    }\n    if (legacyNameFromConfig(config)) {\n      files.index.add(\n        compiler.exportNamedDeclaration({\n          exports: 'BaseHttpRequest',\n          module: './core/BaseHttpRequest',\n        }),\n      );\n    }\n    if (config.client.name !== 'legacy/angular') {\n      files.index.add(\n        compiler.exportNamedDeclaration({\n          exports: ['CancelablePromise', 'CancelError'],\n          module: './core/CancelablePromise',\n        }),\n      );\n    }\n    files.index.add(\n      compiler.exportNamedDeclaration({\n        exports: ['OpenAPI', { asType: true, name: 'OpenAPIConfig' }],\n        module: './core/OpenAPI',\n      }),\n    );\n  }\n\n  Object.keys(files)\n    .sort()\n    .forEach((name) => {\n      const file = files[name]!;\n\n      if (name === 'index' || file.isEmpty()) {\n        return;\n      }\n\n      if (['sdk', 'types'].includes(name)) {\n        files.index!.add(\n          compiler.exportAllDeclaration({\n            module: `./${file.nameWithoutExtension()}`,\n          }),\n        );\n      }\n    });\n};\n","import path from 'node:path';\n\nimport { compiler } from '../compiler';\nimport { parseIR } from '../ir/parser';\nimport type { IR } from '../ir/types';\nimport type { OpenApi } from '../openApi';\nimport type { Client } from '../types/client';\nimport type { Files } from '../types/utils';\nimport { getConfig, isLegacyClient } from '../utils/config';\nimport type { Templates } from '../utils/handlebars';\nimport { generateLegacyClientClass } from './class';\nimport { generateClientBundle } from './client';\nimport { generateLegacyCore } from './core';\nimport { TypeScriptFile } from './files';\nimport { generateIndexFile } from './indexFile';\nimport { removeDirSync } from './utils';\n\n/**\n * Write our OpenAPI client, using the given templates at the given output\n * @param openApi {@link OpenApi} Dereferenced OpenAPI specification\n * @param client Client containing models, schemas, and services\n * @param templates Templates wrapper with all loaded Handlebars templates\n */\nexport const generateLegacyOutput = async ({\n  client,\n  openApi,\n  templates,\n}: {\n  client: Client;\n  openApi: unknown;\n  templates: Templates;\n}): Promise<void> => {\n  const config = getConfig();\n\n  const spec = openApi as OpenApi;\n\n  // TODO: parser - move to config.input\n  if (client) {\n    if (\n      config.plugins['@hey-api/sdk']?.include &&\n      config.plugins['@hey-api/sdk'].asClass\n    ) {\n      const regexp = new RegExp(config.plugins['@hey-api/sdk'].include);\n      client.services = client.services.filter((service) =>\n        regexp.test(service.name),\n      );\n    }\n\n    if (config.plugins['@hey-api/typescript']?.include) {\n      const regexp = new RegExp(config.plugins['@hey-api/typescript'].include);\n      client.models = client.models.filter((model) => regexp.test(model.name));\n    }\n  }\n\n  const outputPath = path.resolve(config.output.path);\n\n  if (config.output.clean) {\n    removeDirSync(outputPath);\n  }\n\n  if (!isLegacyClient(config) && config.client.bundle) {\n    await generateClientBundle({ name: config.client.name, outputPath });\n  }\n\n  // deprecated files\n  await generateLegacyClientClass(spec, outputPath, client, templates);\n  await generateLegacyCore(\n    path.resolve(config.output.path, 'core'),\n    client,\n    templates,\n  );\n\n  const files: Files = {};\n\n  for (const name of config.pluginOrder) {\n    const plugin = config.plugins[name]!;\n    const outputParts = (plugin.output ?? '').split('/');\n    const outputDir = path.resolve(\n      config.output.path,\n      ...outputParts.slice(0, outputParts.length - 1),\n    );\n    files[plugin.name] = new TypeScriptFile({\n      dir: outputDir,\n      name: `${outputParts[outputParts.length - 1]}.ts`,\n    });\n    plugin._handlerLegacy({\n      client,\n      files,\n      openApi: spec,\n      plugin: plugin as never,\n    });\n  }\n\n  generateIndexFile({ files });\n\n  Object.entries(files).forEach(([name, file]) => {\n    if (config.dryRun) {\n      return;\n    }\n\n    if (name === 'index') {\n      file.write();\n    } else {\n      file.write('\\n\\n');\n    }\n  });\n};\n\nexport const generateOutput = async ({ context }: { context: IR.Context }) => {\n  const outputPath = path.resolve(context.config.output.path);\n\n  if (context.config.output.clean) {\n    removeDirSync(outputPath);\n  }\n\n  if (context.config.client.bundle) {\n    generateClientBundle({\n      name: context.config.client.name,\n      outputPath,\n    });\n  }\n\n  for (const name of context.config.pluginOrder) {\n    const plugin = context.config.plugins[name]!;\n    plugin._handler({\n      context,\n      plugin: plugin as never,\n    });\n  }\n\n  await parseIR({ context });\n\n  if (!context.config.dryRun) {\n    const indexFile = context.createFile({\n      id: '_index',\n      path: 'index',\n    });\n\n    for (const file of Object.values(context.files)) {\n      const fileName = file.nameWithoutExtension();\n\n      if (fileName === indexFile.nameWithoutExtension()) {\n        continue;\n      }\n\n      if (!file.isEmpty() && file.exportFromIndex) {\n        // TODO: parser - add export method for more granular control over\n        // what's exported so we can support named exports\n        indexFile.add(\n          compiler.exportAllDeclaration({\n            module: `./${fileName}`,\n          }),\n        );\n      }\n\n      file.write('\\n\\n');\n    }\n\n    indexFile.write();\n  }\n};\n","export const irRef = '#/ir/';\n\nexport const isRefOpenApiComponent = ($ref: string): boolean => {\n  const parts = refToParts($ref);\n  // reusable components are nested within components/<namespace>/<name>\n  return parts.length === 3 && parts[0] === 'components';\n};\n\n/**\n * Returns the reusable component name from `$ref`.\n */\nexport const refToName = ($ref: string): string => {\n  const parts = refToParts($ref);\n  const name = parts[parts.length - 1]!;\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  return decodeURI(name);\n};\n\nconst refToParts = ($ref: string): string[] => {\n  // Remove the leading `#` and split by `/` to traverse the object\n  const parts = $ref.replace(/^#\\//, '').split('/');\n  return parts;\n};\n\nexport const resolveRef = <T>({\n  $ref,\n  spec,\n}: {\n  $ref: string;\n  spec: Record<string, any>;\n}): T => {\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  const parts = refToParts(decodeURI($ref));\n\n  let current = spec;\n\n  for (const part of parts) {\n    const p = part as keyof typeof current;\n    if (current[p] === undefined) {\n      throw new Error(`Reference not found: ${$ref}`);\n    }\n    current = current[p];\n  }\n\n  return current as T;\n};\n","import path from 'node:path';\n\nimport { TypeScriptFile } from '../generate/files';\nimport type { Config, StringCase } from '../types/config';\nimport type { Files } from '../types/utils';\nimport { resolveRef } from '../utils/ref';\nimport type { IR } from './types';\n\ninterface ContextFile {\n  /**\n   * Should the exports from this file be re-exported in the index barrel file?\n   */\n  exportFromIndex?: boolean;\n  /**\n   * Unique file identifier.\n   */\n  id: string;\n  /**\n   * Define casing for identifiers in this file.\n   */\n  identifierCase?: StringCase;\n  /**\n   * Relative file path to the output path.\n   * @example\n   * 'bar/foo.ts'\n   */\n  path: string;\n}\n\ninterface Events {\n  /**\n   * Called after parsing.\n   */\n  after: () => void;\n  /**\n   * Called before parsing.\n   */\n  before: () => void;\n  operation: (args: {\n    method: keyof IR.PathItemObject;\n    operation: IR.OperationObject;\n    path: string;\n  }) => void;\n  parameter: (args: {\n    $ref: string;\n    name: string;\n    parameter: IR.ParameterObject;\n  }) => void;\n  requestBody: (args: {\n    $ref: string;\n    name: string;\n    requestBody: IR.RequestBodyObject;\n  }) => void;\n  schema: (args: {\n    $ref: string;\n    name: string;\n    schema: IR.SchemaObject;\n  }) => void;\n}\n\ntype Listeners = {\n  [T in keyof Events]?: Array<Events[T]>;\n};\n\nexport class IRContext<Spec extends Record<string, any> = any> {\n  /**\n   * Configuration for parsing and generating the output. This\n   * is a mix of user-provided and default values.\n   */\n  public config: Config;\n  /**\n   * A map of files that will be generated from `spec`.\n   */\n  public files: Files;\n  /**\n   * Intermediate representation model obtained from `spec`.\n   */\n  public ir: IR.Model;\n  /**\n   * Resolved specification from `input`.\n   */\n  public spec: Spec;\n\n  /**\n   * A map of event listeners.\n   */\n  private listeners: Listeners;\n\n  constructor({ config, spec }: { config: Config; spec: Spec }) {\n    this.config = config;\n    this.files = {};\n    this.ir = {};\n    this.listeners = {};\n    this.spec = spec;\n  }\n\n  /**\n   * Notify all event listeners about `event`.\n   */\n  public async broadcast<T extends keyof Events>(\n    event: T,\n    ...args: Parameters<Events[T]>\n  ): Promise<void> {\n    if (!this.listeners[event]) {\n      return;\n    }\n\n    await Promise.all(\n      this.listeners[event].map((callbackFn, index) => {\n        try {\n          // @ts-expect-error\n          const response = callbackFn(...args);\n          return Promise.resolve(response);\n        } catch (error) {\n          console.error(\n            `🔥 Event broadcast: \"${event}\"\\nindex: ${index}\\narguments: ${JSON.stringify(args, null, 2)}`,\n          );\n          throw error;\n        }\n      }),\n    );\n  }\n\n  /**\n   * Create and return a new TypeScript file. Also set the current file context\n   * to the newly created file.\n   */\n  public createFile(file: ContextFile): TypeScriptFile {\n    // TODO: parser - handle attempt to create duplicate\n    const outputParts = file.path.split('/');\n    const outputDir = path.resolve(\n      this.config.output.path,\n      ...outputParts.slice(0, outputParts.length - 1),\n    );\n    const createdFile = new TypeScriptFile({\n      dir: outputDir,\n      exportFromIndex: file.exportFromIndex,\n      identifierCase: file.identifierCase,\n      name: `${outputParts[outputParts.length - 1]}.ts`,\n    });\n    this.files[file.id] = createdFile;\n    return createdFile;\n  }\n\n  /**\n   * Returns a specific file by ID from `files`.\n   */\n  public file({ id }: Pick<ContextFile, 'id'>): TypeScriptFile | undefined {\n    return this.files[id];\n  }\n\n  // TODO: parser - works the same as resolveRef, but for IR schemas.\n  // for now, they map 1:1, but if they diverge (like with OpenAPI 2.0),\n  // we will want to rewrite $refs at parse time, so they continue pointing\n  // to the correct IR location\n  public resolveIrRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.ir,\n    });\n  }\n\n  /**\n   * Returns a resolved reference from `spec`.\n   */\n  public resolveRef<T>($ref: string) {\n    return resolveRef<T>({\n      $ref,\n      spec: this.spec,\n    });\n  }\n\n  /**\n   * Register a new `event` listener.\n   */\n  public subscribe<T extends keyof Events>(\n    event: T,\n    callbackFn: Events[T],\n  ): void {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callbackFn);\n  }\n}\n","/**\n * Exclude takes precedence over include.\n */\nexport const canProcessRef = ({\n  $ref,\n  excludeRegExp,\n  includeRegExp,\n}: {\n  $ref: string;\n  excludeRegExp?: RegExp;\n  includeRegExp?: RegExp;\n}): boolean => {\n  if (!excludeRegExp && !includeRegExp) {\n    return true;\n  }\n\n  if (excludeRegExp) {\n    excludeRegExp.lastIndex = 0;\n    if (excludeRegExp.test($ref)) {\n      return false;\n    }\n  }\n\n  if (includeRegExp) {\n    includeRegExp.lastIndex = 0;\n    return includeRegExp.test($ref);\n  }\n\n  return true;\n};\n","import type { IR } from '../../../ir/types';\n\nexport const mergeParametersObjects = ({\n  source,\n  target,\n}: {\n  source: IR.ParametersObject | undefined;\n  target: IR.ParametersObject | undefined;\n}): IR.ParametersObject | undefined => {\n  const result = { ...target };\n\n  if (source) {\n    if (source.cookie) {\n      if (result.cookie) {\n        result.cookie = {\n          ...result.cookie,\n          ...source.cookie,\n        };\n      } else {\n        result.cookie = source.cookie;\n      }\n    }\n\n    if (source.header) {\n      if (result.header) {\n        result.header = {\n          ...result.header,\n          ...source.header,\n        };\n      } else {\n        result.header = source.header;\n      }\n    }\n\n    if (source.path) {\n      if (result.path) {\n        result.path = {\n          ...result.path,\n          ...source.path,\n        };\n      } else {\n        result.path = source.path;\n      }\n    }\n\n    if (source.query) {\n      if (result.query) {\n        result.query = {\n          ...result.query,\n          ...source.query,\n        };\n      } else {\n        result.query = source.query;\n      }\n    }\n  }\n\n  if (!Object.keys(result).length) {\n    return;\n  }\n\n  return result;\n};\n","import { illegalStartCharactersRegExp } from '../../../utils/regexp';\n\nexport const ensureValidTypeScriptJavaScriptIdentifier = (name: string) => {\n  const replaced = name.replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_');\n  illegalStartCharactersRegExp.lastIndex = 0;\n  const startsWithIllegalCharacter =\n    illegalStartCharactersRegExp.test(replaced);\n  const valid = startsWithIllegalCharacter ? `_${replaced}` : replaced;\n  return valid;\n};\n\n/**\n * Sanitizes namespace identifiers so they are valid TypeScript identifiers of a certain form.\n *\n * 1: Remove any leading characters that are illegal as starting character of a typescript identifier.\n * 2: Replace illegal characters in remaining part of type name with hyphen (-).\n *\n * Step 1 should perhaps instead also replace illegal characters with underscore, or prefix with it, like sanitizeEnumName\n * does. The way this is now one could perhaps end up removing all characters, if all are illegal start characters. It\n * would be sort of a breaking change to do so, though, previously generated code might change then.\n *\n * JavaScript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n *\n * The output of this is expected to be converted to PascalCase\n */\nexport const sanitizeNamespaceIdentifier = (name: string) =>\n  name\n    .replace(/^[^\\p{ID_Start}]+/u, '')\n    .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '-')\n    .replace(/\\$/g, '-');\n\nexport const sanitizeOperationParameterName = (name: string) => {\n  const withoutBrackets = name.replace('[]', 'Array');\n  return sanitizeNamespaceIdentifier(withoutBrackets);\n};\n","import type { IR } from '../../../ir/types';\nimport { stringCase } from '../../../utils/stringCase';\nimport { sanitizeNamespaceIdentifier } from '../../common/parser/sanitize';\n\n/**\n * Verifies that operation ID is unique. For now, we only warn when this isn't\n * true as people like to not follow this part of the specification. In the\n * future, we should add a strict check and throw on duplicate identifiers.\n */\nexport const ensureUniqueOperationId = ({\n  id,\n  method,\n  operationIds,\n  path,\n}: {\n  id: string | undefined;\n  method: IR.OperationObject['method'];\n  operationIds: Map<string, string>;\n  path: keyof IR.PathsObject;\n}) => {\n  if (!id) {\n    return;\n  }\n\n  const operationKey = `${method.toUpperCase()} ${path}`;\n\n  if (operationIds.has(id)) {\n    // TODO: parser - support throw on duplicate\n    console.warn(\n      `❗️ Duplicate operationId: ${id} in ${operationKey}. Please ensure your operation IDs are unique. This behavior is not supported and will likely lead to unexpected results.`,\n    );\n  } else {\n    operationIds.set(id, operationKey);\n  }\n};\n\n/**\n * Returns an operation ID to use across the application. By default, we try\n * to use the provided ID. If it's not provided or the SDK is configured\n * to exclude it, we generate operation ID from its location.\n */\nexport const operationToId = ({\n  context,\n  id,\n  method,\n  path,\n}: {\n  context: IR.Context;\n  id: string | undefined;\n  method: string;\n  path: string;\n}): string => {\n  if (\n    id &&\n    (!context.config.plugins['@hey-api/sdk'] ||\n      context.config.plugins['@hey-api/sdk'].operationId)\n  ) {\n    return stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(id),\n    });\n  }\n\n  const urlWithoutPlaceholders = path\n    .replace(/{(.*?)}/g, 'by-$1')\n    // replace slashes with hyphens for camelcase method at the end\n    .replace(/[/:]/g, '-');\n\n  return stringCase({\n    case: 'camelCase',\n    value: `${method}-${urlWithoutPlaceholders}`,\n  });\n};\n","const fileLikeRegExp =\n  /^(application\\/(pdf|rtf|msword|vnd\\.(ms-|openxmlformats-officedocument\\.)|zip|x-(7z|tar|rar|zip|iso)|octet-stream|gzip|x-msdownload|json\\+download|xml|x-yaml|x-7z-compressed|x-tar)|text\\/(plain|yaml|css|javascript)|audio\\/(mpeg|wav)|video\\/(mp4|x-matroska)|image\\/(vnd\\.adobe\\.photoshop|svg\\+xml))(; ?charset=[^;]+)?$/i;\nconst jsonMimeRegExp = /^application\\/(.*\\+)?json(;.*)?$/i;\nconst multipartFormDataMimeRegExp = /^multipart\\/form-data(;.*)?$/i;\nconst xWwwFormUrlEncodedMimeRegExp =\n  /^application\\/x-www-form-urlencoded(;.*)?$/i;\n\nexport type IRMediaType = 'form-data' | 'json' | 'url-search-params';\n\nexport const isMediaTypeFileLike = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): boolean => {\n  fileLikeRegExp.lastIndex = 0;\n  return fileLikeRegExp.test(mediaType);\n};\n\nexport const mediaTypeToIrMediaType = ({\n  mediaType,\n}: {\n  mediaType: string;\n}): IRMediaType | undefined => {\n  jsonMimeRegExp.lastIndex = 0;\n  if (jsonMimeRegExp.test(mediaType)) {\n    return 'json';\n  }\n\n  multipartFormDataMimeRegExp.lastIndex = 0;\n  if (multipartFormDataMimeRegExp.test(mediaType)) {\n    return 'form-data';\n  }\n\n  xWwwFormUrlEncodedMimeRegExp.lastIndex = 0;\n  if (xWwwFormUrlEncodedMimeRegExp.test(mediaType)) {\n    return 'url-search-params';\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  ReferenceObject,\n  ResponseObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  mimeTypes,\n  response,\n}: {\n  mimeTypes: ReadonlyArray<string> | undefined;\n  response: Pick<ResponseObject, 'schema'>;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType of mimeTypes ?? []) {\n    return {\n      mediaType,\n      schema: response.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from './types';\n\nexport const paginationKeywordsRegExp =\n  /^(after|before|cursor|offset|page|start)$/;\n\nexport interface Pagination {\n  in: string;\n  name: string;\n  schema: IR.SchemaObject;\n}\n","import type { IR } from './types';\n\n/**\n * Simply adds `items` to the schema. Also handles setting the logical operator\n * and avoids setting it for a single item or tuples.\n */\nexport const addItemsToSchema = ({\n  items,\n  logicalOperator = 'or',\n  mutateSchemaOneItem = false,\n  schema,\n}: {\n  items: Array<IR.SchemaObject>;\n  logicalOperator?: IR.SchemaObject['logicalOperator'];\n  mutateSchemaOneItem?: boolean;\n  schema: IR.SchemaObject;\n}) => {\n  if (!items.length) {\n    return schema;\n  }\n\n  if (schema.type === 'tuple') {\n    schema.items = items;\n    return schema;\n  }\n\n  if (items.length !== 1) {\n    schema.items = items;\n    schema.logicalOperator = logicalOperator;\n    return schema;\n  }\n\n  if (mutateSchemaOneItem) {\n    // bring composition up to avoid extraneous brackets\n    schema = {\n      ...schema,\n      ...items[0],\n    };\n    return schema;\n  }\n\n  schema.items = items;\n  return schema;\n};\n","import { refToName } from '../../../utils/ref';\n\nexport const discriminatorValue = (\n  $ref: string,\n  mapping?: Record<string, string>,\n) => {\n  for (const name in mapping) {\n    const refMapped = mapping[name];\n    if (refMapped === $ref) {\n      return name;\n    }\n  }\n  return refToName($ref);\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaContext,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValue } from '../../shared/utils/discriminator';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n    });\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray = schema.items.allOf;\n        if (ofArray && ofArray.length > 1 && !schema.items['x-nullable']) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      schemaProperties[name] = schemaToIrSchema({\n        context,\n        schema: property,\n      });\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n    });\n    // no need to add \"any\" additional properties if there are no defined properties\n    if (\n      irSchema.properties ||\n      irAdditionalPropertiesSchema.type !== 'unknown'\n    ) {\n      irSchema.additionalProperties = irAdditionalPropertiesSchema;\n    }\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && $ref) {\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator]: {\n              const: discriminatorValue($ref),\n              type: 'string',\n            },\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator)) {\n          irDiscriminatorSchema.required = [ref.discriminator];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n              });\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema['x-nullable']) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema['x-nullable']) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const enumSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n    });\n\n    enumSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      enumSchema.type = enumType;\n    }\n\n    schemaItems.push(enumSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  // rewrite definitions refs as the internal schema follows OpenAPI 3.x syntax\n  // and stores all definitions as reusable schemas\n  irSchema.$ref = irSchema.$ref.replace(\n    /#\\/definitions\\/([^/]+)/g,\n    '#/components/schemas/$1',\n  );\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (schema['x-nullable']) {\n    return parseNullableType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n    });\n  }\n\n  return parseOneType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (schema.$ref) {\n    return parseRef({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n    });\n  }\n\n  return parseUnknown({\n    $ref,\n    context,\n    schema,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: Required<SchemaContext> & {\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    $ref,\n    context,\n    schema,\n  });\n};\n","import { paginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, ReferenceObject } from '../types/spec';\nimport { type SchemaObject } from '../types/spec';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema:\n    | ParameterObject\n    | SchemaObject\n    | ReferenceObject\n    | {\n        in: undefined;\n      };\n}): boolean | string => {\n  paginationKeywordsRegExp.lastIndex = 0;\n  if (paginationKeywordsRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<ParameterObject | SchemaObject>(\n      schema.$ref ?? '',\n    );\n\n    if ('in' in ref && ref.in) {\n      const refSchema =\n        'schema' in ref\n          ? ref.schema\n          : {\n              ...ref,\n              in: undefined,\n            };\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  if ('in' in schema) {\n    if (!schema.in) {\n      return false;\n    }\n\n    const finalSchema =\n      'schema' in schema\n        ? schema.schema\n        : {\n            ...schema,\n            in: undefined,\n          };\n\n    return paginationField({\n      context,\n      name,\n      schema: finalSchema,\n    });\n  }\n\n  for (const name in schema.properties) {\n    paginationKeywordsRegExp.lastIndex = 0;\n\n    if (paginationKeywordsRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR, IRBodyObject } from '../../../ir/types';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  ResponseObject,\n  SchemaObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'id' | 'parameters'> {\n  requestBody?: OperationObject['parameters'];\n}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  method,\n  operation,\n  path,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  operation: Operation;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operation.id,\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({ method, operation, path });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  let isRequestBodyRequired = false;\n  const requestBodyObject: IRBodyObject = {\n    mediaType: '',\n    schema: {\n      properties: {},\n      required: [],\n      type: 'object',\n    },\n  };\n  const requestBodyObjectRequired: Array<string> = [];\n\n  for (const requestBodyParameter of operation.requestBody ?? []) {\n    const requestBody =\n      '$ref' in requestBodyParameter\n        ? context.resolveRef<ParameterObject>(requestBodyParameter.$ref)\n        : requestBodyParameter;\n    const schema: SchemaObject =\n      requestBody.in === 'body'\n        ? requestBody.schema\n        : {\n            ...requestBody,\n            format: requestBody.type === 'file' ? 'binary' : requestBody.format,\n            required: undefined,\n            type: requestBody.type === 'file' ? 'string' : requestBody.type,\n          };\n    const content = mediaTypeObject({\n      mimeTypes: operation.consumes,\n      response: { schema },\n    });\n\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      const irSchema = schemaToIrSchema({\n        context,\n        schema:\n          '$ref' in requestBody\n            ? {\n                allOf: [\n                  {\n                    ...requestBody,\n                    $ref: requestBody.$ref as string,\n                    required: [],\n                    type: 'string',\n                  },\n                ],\n                description: requestBody.description,\n              }\n            : content.schema && '$ref' in content.schema\n              ? {\n                  allOf: [{ ...content.schema }],\n                  description: requestBody.description,\n                }\n              : {\n                  description: requestBody.description,\n                  ...content.schema,\n                },\n      });\n\n      requestBodyObject.mediaType = content.mediaType;\n\n      if (requestBody.in === 'body') {\n        requestBodyObject.schema = irSchema;\n      } else {\n        requestBodyObject.schema.properties![requestBody.name] = irSchema;\n\n        if (requestBody.required) {\n          requestBodyObjectRequired.push(requestBody.name);\n        }\n      }\n\n      if (pagination) {\n        requestBodyObject.pagination = pagination;\n      }\n\n      if (content.type) {\n        requestBodyObject.type = content.type;\n      }\n    }\n\n    if (requestBody.required) {\n      isRequestBodyRequired = true;\n    }\n  }\n\n  if (requestBodyObject.mediaType) {\n    if (requestBodyObjectRequired.length) {\n      requestBodyObject.schema.required = requestBodyObjectRequired;\n    }\n\n    irOperation.body = requestBodyObject;\n\n    if (isRequestBodyRequired) {\n      irOperation.body.required = isRequestBodyRequired;\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      // assume JSON by default\n      mimeTypes: operation.produces ? operation.produces : ['application/json'],\n      response: responseObject,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        let irSecuritySchemeObject: IR.SecurityObject | undefined;\n\n        if (securitySchemeObject.type === 'apiKey') {\n          irSecuritySchemeObject = securitySchemeObject;\n        }\n\n        if (securitySchemeObject.type === 'basic') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            scheme: 'basic',\n            type: 'http',\n          };\n        }\n\n        if (securitySchemeObject.type === 'oauth2') {\n          irSecuritySchemeObject = {\n            description: securitySchemeObject.description,\n            flows: {},\n            type: 'oauth2',\n          };\n\n          switch (securitySchemeObject.flow) {\n            case 'accessCode':\n              irSecuritySchemeObject.flows.authorizationCode = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'application':\n              irSecuritySchemeObject.flows.clientCredentials = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n            case 'implicit':\n              irSecuritySchemeObject.flows.implicit = {\n                authorizationUrl: securitySchemeObject.authorizationUrl!,\n                scopes: securitySchemeObject.scopes,\n              };\n              break;\n            case 'password':\n              irSecuritySchemeObject.flows.password = {\n                scopes: securitySchemeObject.scopes,\n                tokenUrl: securitySchemeObject.tokenUrl!,\n              };\n              break;\n          }\n        }\n\n        if (!irSecuritySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(irSecuritySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  operationIds,\n  path,\n  securitySchemesMap,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  operationIds: Map<string, string>;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}) => {\n  ensureUniqueOperationId({\n    id: operation.operationId,\n    method,\n    operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  operation.id = operationToId({\n    context,\n    id: operation.operationId,\n    method,\n    path,\n  });\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport type {\n  OperationObject,\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ntype Parameter = Exclude<ParameterObject, { in: 'body' }>;\n\n/**\n * Returns default parameter `explode` based on value of `collectionFormat`.\n */\nconst defaultExplode = (\n  collectionFormat: Parameter['collectionFormat'],\n): boolean => {\n  switch (collectionFormat) {\n    case 'multi':\n      return true;\n    case 'csv':\n    case 'pipes':\n    case 'ssv':\n    case 'tsv':\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: Parameter['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'query':\n    default:\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  operation,\n  parameters,\n}: {\n  context: IR.Context;\n  operation: OperationObject;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    // push request body parameters into a separate field\n    if (parameter.in === 'body' || parameter.in === 'formData') {\n      // @ts-expect-error\n      if (!operation.requestBody) {\n        // @ts-expect-error\n        operation.requestBody = [];\n      }\n\n      // @ts-expect-error\n      operation.requestBody.push(parameter);\n      continue;\n    }\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: Parameter;\n}): IR.ParameterObject => {\n  const schema = parameter;\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [\n            {\n              ...schema,\n              $ref: schema.$ref as string,\n              required: Array.isArray(schema.required) ? schema.required : [],\n              type: schema.type as SchemaObject['type'],\n            },\n          ],\n          description: parameter.description,\n        }\n      : {\n          description: parameter.description,\n          ...schema,\n          required: Array.isArray(schema.required) ? schema.required : [],\n          type: schema.type as SchemaObject['type'],\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = defaultStyle(parameter.in);\n  const explode = defaultExplode(parameter.collectionFormat);\n  const allowReserved = false;\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in as IR.ParameterObject['location'],\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n    }),\n    style,\n  };\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n","import type { IR } from '../../../ir/types';\nimport { canProcessRef } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV2_0_X,\n  OperationObject,\n  PathItemObject,\n  PathsObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject } from './parameter';\nimport { parseSchema } from './schema';\n\ntype PathKeys<T extends keyof PathsObject = keyof PathsObject> =\n  keyof T extends infer K ? (K extends `/${string}` ? K : never) : never;\n\nexport const parseV2_0_X = (context: IR.Context<OpenApiV2_0_X>) => {\n  const operationIds = new Map<string, string>();\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeRegExp = context.config.input.exclude\n    ? new RegExp(context.config.input.exclude)\n    : undefined;\n  const includeRegExp = context.config.input.include\n    ? new RegExp(context.config.input.include)\n    : undefined;\n\n  const shouldProcessRef = ($ref: string) =>\n    canProcessRef({\n      $ref,\n      excludeRegExp,\n      includeRegExp,\n    });\n\n  for (const name in context.spec.securityDefinitions) {\n    const securitySchemeObject = context.spec.securityDefinitions[name]!;\n    securitySchemesMap.set(name, securitySchemeObject);\n  }\n\n  if (context.spec.definitions) {\n    for (const name in context.spec.definitions) {\n      const $ref = `#/definitions/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const schema = context.spec.definitions[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  for (const path in context.spec.paths) {\n    if (path.startsWith('x-')) {\n      continue;\n    }\n\n    const pathItem = context.spec.paths[path as PathKeys]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const commonOperation: OperationObject = {\n      consumes: context.spec.consumes,\n      produces: context.spec.produces,\n      responses: {},\n      security: context.spec.security,\n    };\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          ...commonOperation,\n          id: '',\n          parameters: parametersArrayToObject({\n            context,\n            operation: commonOperation,\n            parameters: finalPathItem.parameters,\n          }),\n        },\n        operationIds,\n        path: path as PathKeys,\n        securitySchemesMap,\n      };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (finalPathItem.delete && shouldProcessRef($refDelete)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.delete,\n          parameters: finalPathItem.delete.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters,\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.get,\n          parameters: finalPathItem.get.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters,\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.head,\n          parameters: finalPathItem.head.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters,\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (finalPathItem.options && shouldProcessRef($refOptions)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.options,\n          parameters: finalPathItem.options.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters,\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (finalPathItem.patch && shouldProcessRef($refPatch)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.patch,\n          parameters: finalPathItem.patch.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters,\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.post,\n          parameters: finalPathItem.post.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters,\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut)) {\n      const parameters = mergeParametersObjects({\n        source: parametersArrayToObject({\n          context,\n          operation: finalPathItem.put,\n          parameters: finalPathItem.put.parameters,\n        }),\n        target: operationArgs.operation.parameters,\n      });\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters,\n        },\n      });\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type {\n  MediaTypeObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | ReferenceObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (schema && '$ref' in schema) {\n    return {\n      allOf: [{ ...schema }],\n    };\n  }\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaContext,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValue } from '../../shared/utils/discriminator';\nimport type { ReferenceObject, SchemaObject } from '../types/spec';\n\nexport const getSchemaType = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): SchemaType<SchemaObject> | undefined => {\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return 'object';\n  }\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    if (schema.maximum !== undefined) {\n      irSchema.exclusiveMaximum = schema.maximum;\n    }\n  } else if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    if (schema.minimum !== undefined) {\n      irSchema.exclusiveMinimum = schema.minimum;\n    }\n  } else if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (schema.maxItems && schema.maxItems === schema.minItems) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n    });\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      if ('$ref' in schema.items) {\n        schemaItems.push(irItemsSchema);\n      } else {\n        const ofArray =\n          schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n        if (ofArray && ofArray.length > 1 && !schema.items.nullable) {\n          // bring composition up to avoid incorrectly nested arrays\n          irSchema = {\n            ...irSchema,\n            ...irItemsSchema,\n          };\n        } else {\n          schemaItems.push(irItemsSchema);\n        }\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      schemaProperties[name] = schemaToIrSchema({\n        context,\n        schema: property,\n      });\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n    });\n    // no need to add \"any\" additional properties if there are no defined properties\n    if (\n      irSchema.properties ||\n      irAdditionalPropertiesSchema.type !== 'unknown'\n    ) {\n      irSchema.additionalProperties = irAdditionalPropertiesSchema;\n    }\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if ('$ref' in compositionSchema) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && $ref) {\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]: {\n              const: discriminatorValue($ref, ref.discriminator.mapping),\n              type: 'string',\n            },\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n    }\n  }\n\n  if (schemaType === 'object') {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema =\n              '$ref' in compositionSchema\n                ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n                : compositionSchema;\n\n            if (\n              getSchemaType({ schema: finalCompositionSchema }) === 'object'\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n              });\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schema.nullable) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original deprecated\n    if (nestedItems[0]!.deprecated) {\n      irSchema.deprecated = nestedItems[0]!.deprecated;\n    }\n\n    // TODO: parser - this is a hack to bring back up meta fields\n    // without it, some schemas were missing original description\n    if (nestedItems[0]!.description) {\n      irSchema.description = nestedItems[0]!.description;\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]: {\n            const: discriminatorValue(\n              compositionSchema.$ref,\n              schema.discriminator.mapping,\n            ),\n            type: 'string',\n          },\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | 'null' | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // nullable must be true\n      if (schema.nullable) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    const enumSchema = parseOneType({\n      context,\n      schema: {\n        description: schema['x-enum-descriptions']?.[index],\n        title:\n          schema['x-enum-varnames']?.[index] ?? schema['x-enumNames']?.[index],\n        // cast enum to string temporarily\n        type: enumType === 'null' ? 'string' : enumType,\n      },\n    });\n\n    enumSchema.const = enumValue;\n\n    // cast enum back\n    if (enumType === 'null') {\n      enumSchema.type = enumType;\n    }\n\n    schemaItems.push(enumSchema);\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaType = getSchemaType({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && '$ref' in compositionSchema) {\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]: {\n            const: discriminatorValue(\n              compositionSchema.$ref,\n              schema.discriminator.mapping,\n            ),\n            type: 'string',\n          },\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schema.nullable) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaType === 'object') {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  schema,\n}: SchemaContext & {\n  schema: ReferenceObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  return irSchema;\n};\n\nconst parseNullableType = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n  });\n\n  if (typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [\n    parseOneType({\n      context,\n      irSchema: typeIrSchema,\n      schema,\n    }),\n    {\n      type: 'null',\n    },\n  ];\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  const type = getSchemaType({ schema });\n\n  if (!type) {\n    return irSchema;\n  }\n\n  if (!schema.nullable) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type,\n      },\n    });\n  }\n\n  return parseNullableType({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type,\n    },\n  });\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n      });\n  }\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaObject | ReferenceObject;\n}): IR.SchemaObject => {\n  if ('$ref' in schema) {\n    return parseRef({\n      $ref,\n      context,\n      schema,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n    });\n  }\n\n  return parseUnknown({\n    $ref,\n    context,\n    schema,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: Required<SchemaContext> & {\n  schema: SchemaObject | ReferenceObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    $ref,\n    context,\n    schema,\n  });\n};\n","import { paginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  RequestBodyObject,\n} from '../types/spec';\nimport { type SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaType } from './schema';\n\nconst isPaginationType = (\n  schemaType: SchemaType<SchemaObject> | undefined,\n): boolean =>\n  schemaType === 'boolean' ||\n  schemaType === 'integer' ||\n  schemaType === 'number' ||\n  schemaType === 'string';\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject | ReferenceObject;\n}): boolean | string => {\n  paginationKeywordsRegExp.lastIndex = 0;\n  if (paginationKeywordsRegExp.test(name)) {\n    return true;\n  }\n\n  if ('$ref' in schema) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | ReferenceObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    paginationKeywordsRegExp.lastIndex = 0;\n\n    if (paginationKeywordsRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean' && !('$ref' in property)) {\n        const schemaType = getSchemaType({ schema: property });\n        // TODO: resolve deeper references\n\n        if (isPaginationType(schemaType)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'id' | 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  method,\n  operation,\n  path,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  operation: Operation;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operation.id,\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({ method, operation, path });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema:\n          content.schema && '$ref' in content.schema\n            ? {\n                allOf: [{ ...content.schema }],\n                description: requestBody.description,\n              }\n            : {\n                description: requestBody.description,\n                ...content.schema,\n              },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema:\n            '$ref' in operation.requestBody\n              ? {\n                  allOf: [{ ...operation.requestBody }],\n                  description: requestBody.description,\n                }\n              : content.schema && '$ref' in content.schema\n                ? {\n                    allOf: [{ ...content.schema }],\n                    description: requestBody.description,\n                  }\n                : {\n                    description: requestBody.description,\n                    ...content.schema,\n                  },\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  operationIds,\n  path,\n  securitySchemesMap,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  operationIds: Map<string, string>;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}) => {\n  ensureUniqueOperationId({\n    id: operation.operationId,\n    method,\n    operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  operation.id = operationToId({\n    context,\n    id: operation.operationId,\n    method,\n    path,\n  });\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<IR.ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject =\n    schema && '$ref' in schema\n      ? {\n          allOf: [{ ...schema }],\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n        }\n      : {\n          deprecated: parameter.deprecated,\n          description: parameter.description,\n          ...schema,\n        };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { canProcessRef } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV3_0_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\n\nexport const parseV3_0_X = (context: IR.Context<OpenApiV3_0_X>) => {\n  const operationIds = new Map<string, string>();\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeRegExp = context.config.input.exclude\n    ? new RegExp(context.config.input.exclude)\n    : undefined;\n  const includeRegExp = context.config.input.include\n    ? new RegExp(context.config.input.include)\n    : undefined;\n\n  const shouldProcessRef = ($ref: string) =>\n    canProcessRef({\n      $ref,\n      excludeRegExp,\n      includeRegExp,\n    });\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<\n      Parameters<typeof parseOperation>[0],\n      'method' | 'operation'\n    > & {\n      operation: Omit<\n        Parameters<typeof parseOperation>[0]['operation'],\n        'responses'\n      >;\n    } = {\n      context,\n      operation: {\n        description: finalPathItem.description,\n        id: '',\n        parameters: parametersArrayToObject({\n          context,\n          parameters: finalPathItem.parameters,\n        }),\n        security: context.spec.security,\n        servers: finalPathItem.servers,\n        summary: finalPathItem.summary,\n      },\n      operationIds,\n      path: path as keyof PathsObject,\n      securitySchemesMap,\n    };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (finalPathItem.delete && shouldProcessRef($refDelete)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (finalPathItem.options && shouldProcessRef($refOptions)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (finalPathItem.patch && shouldProcessRef($refPatch)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refTrace = `#/paths${path}/trace`;\n    if (finalPathItem.trace && shouldProcessRef($refTrace)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","import type { IRMediaType } from '../../../ir/mediaType';\nimport {\n  isMediaTypeFileLike,\n  mediaTypeToIrMediaType,\n} from '../../../ir/mediaType';\nimport type { MediaTypeObject, SchemaObject } from '../types/spec';\n\ninterface Content {\n  mediaType: string;\n  schema: SchemaObject | undefined;\n  type: IRMediaType | undefined;\n}\n\nexport const contentToSchema = ({\n  content,\n}: {\n  content: Content;\n}): SchemaObject | undefined => {\n  const { mediaType, schema } = content;\n\n  if (!schema) {\n    if (isMediaTypeFileLike({ mediaType })) {\n      return {\n        format: 'binary',\n        type: 'string',\n      };\n    }\n    return;\n  }\n\n  if (\n    schema.type === 'string' &&\n    !schema.format &&\n    isMediaTypeFileLike({ mediaType })\n  ) {\n    return {\n      ...schema,\n      format: 'binary',\n    };\n  }\n\n  return schema;\n};\n\nexport const mediaTypeObject = ({\n  content,\n}: {\n  content: Record<string, MediaTypeObject> | undefined;\n}): Content | undefined => {\n  // return the first supported MIME type\n  for (const mediaType in content) {\n    return {\n      mediaType,\n      schema: content[mediaType]!.schema,\n      type: mediaTypeToIrMediaType({ mediaType }),\n    };\n  }\n};\n","import type { IR } from '../../../ir/types';\nimport { addItemsToSchema } from '../../../ir/utils';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  SchemaContext,\n  SchemaType,\n  SchemaWithRequired,\n} from '../../shared/types/schema';\nimport { discriminatorValue } from '../../shared/utils/discriminator';\nimport type { SchemaObject } from '../types/spec';\n\nexport const getSchemaTypes = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): ReadonlyArray<SchemaType<SchemaObject>> => {\n  if (typeof schema.type === 'string') {\n    return [schema.type];\n  }\n\n  if (schema.type) {\n    return schema.type;\n  }\n\n  // infer object based on the presence of properties\n  if (schema.properties) {\n    return ['object'];\n  }\n\n  return [];\n};\n\nconst parseSchemaJsDoc = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.deprecated !== undefined) {\n    irSchema.deprecated = schema.deprecated;\n  }\n\n  if (schema.description) {\n    irSchema.description = schema.description;\n  }\n\n  if (schema.title) {\n    irSchema.title = schema.title;\n  }\n};\n\nconst parseSchemaMeta = ({\n  irSchema,\n  schema,\n}: {\n  irSchema: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  if (schema.const !== undefined) {\n    irSchema.const = schema.const;\n\n    // try to infer schema type\n    if (!schema.type) {\n      if (schema.const === null) {\n        irSchema.type = 'null';\n      } else {\n        switch (typeof schema.const) {\n          case 'bigint':\n          case 'number':\n            irSchema.type = 'number';\n            break;\n          case 'boolean':\n            irSchema.type = 'boolean';\n            break;\n          case 'string':\n            irSchema.type = 'string';\n            break;\n        }\n      }\n    }\n  }\n\n  if (schema.default !== undefined) {\n    irSchema.default = schema.default;\n  }\n\n  if (schema.exclusiveMaximum) {\n    irSchema.exclusiveMaximum = schema.exclusiveMaximum;\n  }\n\n  if (schema.exclusiveMinimum) {\n    irSchema.exclusiveMinimum = schema.exclusiveMinimum;\n  }\n\n  if (schema.format) {\n    irSchema.format = schema.format;\n  }\n\n  if (schema.maximum !== undefined) {\n    irSchema.maximum = schema.maximum;\n  }\n\n  if (schema.maxItems !== undefined) {\n    irSchema.maxItems = schema.maxItems;\n  }\n\n  if (schema.maxLength !== undefined) {\n    irSchema.maxLength = schema.maxLength;\n  }\n\n  if (schema.minimum !== undefined) {\n    irSchema.minimum = schema.minimum;\n  }\n\n  if (schema.minItems !== undefined) {\n    irSchema.minItems = schema.minItems;\n  }\n\n  if (schema.minLength !== undefined) {\n    irSchema.minLength = schema.minLength;\n  }\n\n  if (schema.pattern) {\n    irSchema.pattern = schema.pattern;\n  }\n\n  if (schema.readOnly) {\n    irSchema.accessScope = 'read';\n  } else if (schema.writeOnly) {\n    irSchema.accessScope = 'write';\n  }\n};\n\nconst parseArray = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (\n    (schema.prefixItems && schema.prefixItems.length) ||\n    (schema.maxItems && schema.maxItems === schema.minItems) ||\n    schema.const !== undefined\n  ) {\n    irSchema.type = 'tuple';\n  } else {\n    irSchema.type = 'array';\n  }\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const item of schema.prefixItems ?? []) {\n    schemaItems.push(\n      schemaToIrSchema({\n        context,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    const irItemsSchema = schemaToIrSchema({\n      context,\n      schema: schema.items,\n    });\n\n    if (\n      !schemaItems.length &&\n      schema.maxItems &&\n      schema.maxItems === schema.minItems\n    ) {\n      schemaItems = Array(schema.maxItems).fill(irItemsSchema);\n    } else {\n      const ofArray =\n        schema.items.allOf || schema.items.anyOf || schema.items.oneOf;\n      if (\n        ofArray &&\n        ofArray.length > 1 &&\n        !getSchemaTypes({ schema: schema.items }).includes('null')\n      ) {\n        // bring composition up to avoid incorrectly nested arrays\n        irSchema = {\n          ...irSchema,\n          ...irItemsSchema,\n        };\n      } else {\n        schemaItems.push(irItemsSchema);\n      }\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseBoolean = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'boolean';\n\n  return irSchema;\n};\n\nconst parseNull = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}) => {\n  irSchema.type = 'null';\n\n  return irSchema;\n};\n\nconst parseNumber = ({\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n}): IR.SchemaObject => {\n  irSchema.type = schema.type;\n\n  return irSchema;\n};\n\nconst parseObject = ({\n  context,\n  irSchema = {},\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'object';\n\n  const schemaProperties: Record<string, IR.SchemaObject> = {};\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    if (typeof property === 'boolean') {\n      // TODO: parser - handle boolean properties\n    } else {\n      schemaProperties[name] = schemaToIrSchema({\n        context,\n        schema: property,\n      });\n    }\n  }\n\n  if (Object.keys(schemaProperties).length) {\n    irSchema.properties = schemaProperties;\n  }\n\n  if (schema.additionalProperties === undefined) {\n    if (!irSchema.properties) {\n      irSchema.additionalProperties = {\n        type: 'unknown',\n      };\n    }\n  } else if (typeof schema.additionalProperties === 'boolean') {\n    irSchema.additionalProperties = {\n      type: schema.additionalProperties ? 'unknown' : 'never',\n    };\n  } else {\n    const irAdditionalPropertiesSchema = schemaToIrSchema({\n      context,\n      schema: schema.additionalProperties,\n    });\n    // no need to add \"any\" additional properties if there are no defined properties\n    if (\n      irSchema.properties ||\n      irAdditionalPropertiesSchema.type !== 'unknown'\n    ) {\n      irSchema.additionalProperties = irAdditionalPropertiesSchema;\n    }\n  }\n\n  if (schema.required) {\n    irSchema.required = schema.required;\n  }\n\n  return irSchema;\n};\n\nconst parseString = ({\n  irSchema = {},\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  irSchema.type = 'string';\n\n  return irSchema;\n};\n\nconst initIrSchema = ({\n  schema,\n}: {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {};\n\n  parseSchemaJsDoc({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nconst parseAllOf = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'allOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.allOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    const irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    if (schema.required) {\n      if (irCompositionSchema.required) {\n        irCompositionSchema.required = [\n          ...irCompositionSchema.required,\n          ...schema.required,\n        ];\n      } else {\n        irCompositionSchema.required = schema.required;\n      }\n    }\n\n    schemaItems.push(irCompositionSchema);\n\n    if (compositionSchema.$ref) {\n      const ref = context.resolveRef<SchemaObject>(compositionSchema.$ref);\n      // `$ref` should be passed from the root `parseSchema()` call\n      if (ref.discriminator && $ref) {\n        const irDiscriminatorSchema: IR.SchemaObject = {\n          properties: {\n            [ref.discriminator.propertyName]: {\n              const: discriminatorValue($ref, ref.discriminator.mapping),\n              type: 'string',\n            },\n          },\n          type: 'object',\n        };\n        if (ref.required?.includes(ref.discriminator.propertyName)) {\n          irDiscriminatorSchema.required = [ref.discriminator.propertyName];\n        }\n        schemaItems.push(irDiscriminatorSchema);\n      }\n    }\n  }\n\n  if (schemaTypes.includes('object')) {\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      for (const requiredProperty of irObjectSchema.required ?? []) {\n        if (!irObjectSchema.properties[requiredProperty]) {\n          for (const compositionSchema of compositionSchemas) {\n            // TODO: parser - this could be probably resolved more accurately\n            const finalCompositionSchema = compositionSchema.$ref\n              ? context.resolveRef<SchemaObject>(compositionSchema.$ref)\n              : compositionSchema;\n\n            if (\n              getSchemaTypes({ schema: finalCompositionSchema }).includes(\n                'object',\n              )\n            ) {\n              const irCompositionSchema = parseOneType({\n                context,\n                schema: {\n                  ...finalCompositionSchema,\n                  type: 'object',\n                },\n              });\n\n              if (irCompositionSchema.properties?.[requiredProperty]) {\n                irObjectSchema.properties[requiredProperty] =\n                  irCompositionSchema.properties[requiredProperty];\n                break;\n              }\n            }\n          }\n        }\n      }\n      schemaItems.push(irObjectSchema);\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    logicalOperator: 'and',\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('null')) {\n    // nest composition to avoid producing an intersection with null\n    const nestedItems: Array<IR.SchemaObject> = [\n      {\n        type: 'null',\n      },\n    ];\n\n    if (schemaItems.length) {\n      nestedItems.unshift(irSchema);\n    }\n\n    irSchema = {\n      items: nestedItems,\n      logicalOperator: 'or',\n    };\n  }\n\n  return irSchema;\n};\n\nconst parseAnyOf = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'anyOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.anyOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]: {\n            const: discriminatorValue(\n              compositionSchema.$ref,\n              schema.discriminator.mapping,\n            ),\n            type: 'string',\n          },\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    schemaItems.push(irCompositionSchema);\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseEnum = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'enum'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  irSchema.type = 'enum';\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  for (const [index, enumValue] of schema.enum.entries()) {\n    const typeOfEnumValue = typeof enumValue;\n    let enumType: SchemaType<SchemaObject> | undefined;\n\n    if (\n      typeOfEnumValue === 'string' ||\n      typeOfEnumValue === 'number' ||\n      typeOfEnumValue === 'boolean'\n    ) {\n      enumType = typeOfEnumValue;\n    } else if (enumValue === null) {\n      // type must contain null\n      if (schemaTypes.includes('null')) {\n        enumType = 'null';\n      }\n    } else {\n      console.warn(\n        '🚨',\n        `unhandled \"${typeOfEnumValue}\" typeof value \"${enumValue}\" for enum`,\n        schema.enum,\n      );\n    }\n\n    if (!enumType) {\n      continue;\n    }\n\n    schemaItems.push(\n      parseOneType({\n        context,\n        schema: {\n          const: enumValue,\n          description: schema['x-enum-descriptions']?.[index],\n          title:\n            schema['x-enum-varnames']?.[index] ??\n            schema['x-enumNames']?.[index],\n          type: enumType,\n        },\n      }),\n    );\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseOneOf = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'oneOf'>;\n}): IR.SchemaObject => {\n  let irSchema = initIrSchema({ schema });\n\n  let schemaItems: Array<IR.SchemaObject> = [];\n  const schemaTypes = getSchemaTypes({ schema });\n\n  const compositionSchemas = schema.oneOf;\n\n  for (const compositionSchema of compositionSchemas) {\n    let irCompositionSchema = schemaToIrSchema({\n      context,\n      schema: compositionSchema,\n    });\n\n    // `$ref` should be defined with discriminators\n    if (schema.discriminator && compositionSchema.$ref) {\n      const irDiscriminatorSchema: IR.SchemaObject = {\n        properties: {\n          [schema.discriminator.propertyName]: {\n            const: discriminatorValue(\n              compositionSchema.$ref,\n              schema.discriminator.mapping,\n            ),\n            type: 'string',\n          },\n        },\n        type: 'object',\n      };\n      irCompositionSchema = {\n        items: [irDiscriminatorSchema, irCompositionSchema],\n        logicalOperator: 'and',\n      };\n    }\n\n    // since we know oneOf will be using \"or\" logical operator, if the parsed\n    // composition schema also has an \"or\" operator, we can bring it up\n    // to avoid unnecessary brackets\n    if (\n      irCompositionSchema.logicalOperator === 'or' &&\n      irCompositionSchema.items\n    ) {\n      schemaItems = schemaItems.concat(irCompositionSchema.items);\n    } else {\n      schemaItems.push(irCompositionSchema);\n    }\n  }\n\n  if (schemaTypes.includes('null')) {\n    schemaItems.push({ type: 'null' });\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    mutateSchemaOneItem: true,\n    schema: irSchema,\n  });\n\n  if (schemaTypes.includes('object')) {\n    // nest composition to avoid producing a union with object properties\n    const irObjectSchema = parseOneType({\n      context,\n      schema: {\n        ...schema,\n        type: 'object',\n      },\n    });\n\n    if (irObjectSchema.properties) {\n      irSchema = {\n        items: [irSchema, irObjectSchema],\n        logicalOperator: 'and',\n      };\n    }\n  }\n\n  return irSchema;\n};\n\nconst parseRef = ({\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, '$ref'>;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  // refs using unicode characters become encoded, didn't investigate why\n  // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n  irSchema.$ref = decodeURI(schema.$ref);\n\n  return irSchema;\n};\n\nconst parseOneType = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: SchemaType<SchemaObject>;\n  };\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n\n    parseSchemaMeta({\n      irSchema,\n      schema,\n    });\n  }\n\n  switch (schema.type) {\n    case 'array':\n      return parseArray({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'boolean':\n      return parseBoolean({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'integer':\n    case 'number':\n      return parseNumber({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'null':\n      return parseNull({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'object':\n      return parseObject({\n        context,\n        irSchema,\n        schema,\n      });\n    case 'string':\n      return parseString({\n        context,\n        irSchema,\n        schema,\n      });\n    default:\n      // gracefully handle invalid type\n      return parseUnknown({\n        context,\n        irSchema,\n        schema,\n      });\n  }\n};\n\nconst parseManyTypes = ({\n  context,\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: Omit<SchemaObject, 'type'> & {\n    type: ReadonlyArray<SchemaType<SchemaObject>>;\n  };\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  const typeIrSchema: IR.SchemaObject = {};\n\n  parseSchemaMeta({\n    irSchema: typeIrSchema,\n    schema,\n  });\n\n  if (schema.type.includes('null') && typeIrSchema.default === null) {\n    // clear to avoid duplicate default inside the non-null schema.\n    // this would produce incorrect validator output\n    delete typeIrSchema.default;\n  }\n\n  const schemaItems: Array<IR.SchemaObject> = [];\n\n  for (const type of schema.type) {\n    if (type === 'null') {\n      schemaItems.push({ type: 'null' });\n    } else {\n      schemaItems.push(\n        parseOneType({\n          context,\n          irSchema: typeIrSchema,\n          schema: {\n            ...schema,\n            type,\n          },\n        }),\n      );\n    }\n  }\n\n  irSchema = addItemsToSchema({\n    items: schemaItems,\n    schema: irSchema,\n  });\n\n  return irSchema;\n};\n\nconst parseType = ({\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaWithRequired<SchemaObject, 'type'>;\n}): IR.SchemaObject => {\n  const irSchema = initIrSchema({ schema });\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  const schemaTypes = getSchemaTypes({ schema });\n\n  if (schemaTypes.length === 1) {\n    return parseOneType({\n      context,\n      irSchema,\n      schema: {\n        ...schema,\n        type: schemaTypes[0]!,\n      },\n    });\n  }\n\n  return parseManyTypes({\n    context,\n    irSchema,\n    schema: {\n      ...schema,\n      type: schemaTypes,\n    },\n  });\n};\n\nconst parseUnknown = ({\n  irSchema,\n  schema,\n}: SchemaContext & {\n  irSchema?: IR.SchemaObject;\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (!irSchema) {\n    irSchema = initIrSchema({ schema });\n  }\n\n  irSchema.type = 'unknown';\n\n  parseSchemaMeta({\n    irSchema,\n    schema,\n  });\n\n  return irSchema;\n};\n\nexport const schemaToIrSchema = ({\n  $ref,\n  context,\n  schema,\n}: SchemaContext & {\n  schema: SchemaObject;\n}): IR.SchemaObject => {\n  if (schema.$ref) {\n    return parseRef({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, '$ref'>,\n    });\n  }\n\n  if (schema.enum) {\n    return parseEnum({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'enum'>,\n    });\n  }\n\n  if (schema.allOf) {\n    return parseAllOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'allOf'>,\n    });\n  }\n\n  if (schema.anyOf) {\n    return parseAnyOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'anyOf'>,\n    });\n  }\n\n  if (schema.oneOf) {\n    return parseOneOf({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'oneOf'>,\n    });\n  }\n\n  // infer object based on the presence of properties\n  if (schema.type || schema.properties) {\n    return parseType({\n      $ref,\n      context,\n      schema: schema as SchemaWithRequired<SchemaObject, 'type'>,\n    });\n  }\n\n  return parseUnknown({\n    $ref,\n    context,\n    schema,\n  });\n};\n\nexport const parseSchema = ({\n  $ref,\n  context,\n  schema,\n}: Required<SchemaContext> & {\n  schema: SchemaObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.schemas) {\n    context.ir.components.schemas = {};\n  }\n\n  context.ir.components.schemas[refToName($ref)] = schemaToIrSchema({\n    $ref,\n    context,\n    schema,\n  });\n};\n","import { paginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaType } from '../../shared/types/schema';\nimport type { ParameterObject, RequestBodyObject } from '../types/spec';\nimport { type SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { getSchemaTypes } from './schema';\n\nconst isPaginationType = (\n  schemaTypes: ReadonlyArray<SchemaType<SchemaObject>>,\n): boolean =>\n  schemaTypes.includes('boolean') ||\n  schemaTypes.includes('integer') ||\n  schemaTypes.includes('number') ||\n  schemaTypes.includes('string');\n\n// We handle only simple values for now, up to 1 nested field\nexport const paginationField = ({\n  context,\n  name,\n  schema,\n}: {\n  context: IR.Context;\n  name: string;\n  schema: SchemaObject;\n}): boolean | string => {\n  paginationKeywordsRegExp.lastIndex = 0;\n  if (paginationKeywordsRegExp.test(name)) {\n    return true;\n  }\n\n  if (schema.$ref) {\n    const ref = context.resolveRef<\n      ParameterObject | RequestBodyObject | SchemaObject\n    >(schema.$ref);\n\n    if ('content' in ref || 'in' in ref) {\n      let refSchema: SchemaObject | undefined;\n\n      if ('in' in ref) {\n        refSchema = ref.schema;\n      }\n\n      if (!refSchema) {\n        // parameter or body\n        const content = mediaTypeObject({ content: ref.content });\n        if (content?.schema) {\n          refSchema = content.schema;\n        }\n      }\n\n      if (!refSchema) {\n        return false;\n      }\n\n      return paginationField({\n        context,\n        name,\n        schema: refSchema,\n      });\n    }\n\n    return paginationField({\n      context,\n      name,\n      schema: ref,\n    });\n  }\n\n  for (const name in schema.properties) {\n    paginationKeywordsRegExp.lastIndex = 0;\n\n    if (paginationKeywordsRegExp.test(name)) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        // TODO: resolve deeper references\n        const schemaTypes = getSchemaTypes({ schema: property });\n\n        if (!schemaTypes.length) {\n          const compositionSchemas = property.anyOf ?? property.oneOf;\n          const nonNullCompositionSchemas = (compositionSchemas ?? []).filter(\n            (schema) => schema.type !== 'null',\n          );\n          if (nonNullCompositionSchemas.length === 1) {\n            const schemaTypes = getSchemaTypes({\n              schema: nonNullCompositionSchemas[0]!,\n            });\n            if (isPaginationType(schemaTypes)) {\n              return name;\n            }\n          }\n        }\n\n        if (isPaginationType(schemaTypes)) {\n          return name;\n        }\n      }\n    }\n  }\n\n  for (const allOf of schema.allOf ?? []) {\n    const pagination = paginationField({\n      context,\n      name,\n      schema: allOf,\n    });\n    if (pagination) {\n      return pagination;\n    }\n  }\n\n  return false;\n};\n","import type { IR } from '../../../ir/types';\nimport {\n  ensureUniqueOperationId,\n  operationToId,\n} from '../../shared/utils/operation';\nimport type {\n  OperationObject,\n  PathItemObject,\n  RequestBodyObject,\n  ResponseObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { contentToSchema, mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\ninterface Operation\n  extends Omit<OperationObject, 'parameters'>,\n    Pick<IR.OperationObject, 'id' | 'parameters'> {}\n\nconst parseOperationJsDoc = ({\n  irOperation,\n  operation,\n}: {\n  irOperation: IR.OperationObject;\n  operation: Operation;\n}) => {\n  if (operation.deprecated !== undefined) {\n    irOperation.deprecated = operation.deprecated;\n  }\n\n  if (operation.description) {\n    irOperation.description = operation.description;\n  }\n\n  if (operation.summary) {\n    irOperation.summary = operation.summary;\n  }\n\n  if (operation.tags?.length) {\n    irOperation.tags = operation.tags;\n  }\n};\n\nconst initIrOperation = ({\n  method,\n  operation,\n  path,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  operation: Operation;\n}): IR.OperationObject => {\n  const irOperation: IR.OperationObject = {\n    id: operation.id,\n    method,\n    path,\n  };\n\n  parseOperationJsDoc({\n    irOperation,\n    operation,\n  });\n\n  return irOperation;\n};\n\nconst operationToIrOperation = ({\n  context,\n  method,\n  operation,\n  path,\n  securitySchemesMap,\n}: Pick<IR.OperationObject, 'method' | 'path'> & {\n  context: IR.Context;\n  operation: Operation;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}): IR.OperationObject => {\n  const irOperation = initIrOperation({ method, operation, path });\n\n  if (operation.parameters) {\n    irOperation.parameters = operation.parameters;\n  }\n\n  if (operation.requestBody) {\n    const requestBody =\n      '$ref' in operation.requestBody\n        ? context.resolveRef<RequestBodyObject>(operation.requestBody.$ref)\n        : operation.requestBody;\n    const content = mediaTypeObject({\n      content: requestBody.content,\n    });\n    if (content) {\n      const pagination = paginationField({\n        context,\n        name: '',\n        schema: {\n          description: requestBody.description,\n          ...content.schema,\n        },\n      });\n\n      irOperation.body = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: requestBody.description,\n            ...('$ref' in operation.requestBody\n              ? operation.requestBody\n              : content.schema),\n          },\n        }),\n      };\n\n      if (pagination) {\n        irOperation.body.pagination = pagination;\n      }\n\n      if (requestBody.required) {\n        irOperation.body.required = requestBody.required;\n      }\n\n      if (content.type) {\n        irOperation.body.type = content.type;\n      }\n    }\n  }\n\n  for (const name in operation.responses) {\n    if (!irOperation.responses) {\n      irOperation.responses = {};\n    }\n\n    const response = operation.responses[name]!;\n    const responseObject =\n      '$ref' in response\n        ? context.resolveRef<ResponseObject>(response.$ref)\n        : response;\n    const content = mediaTypeObject({\n      content: responseObject.content,\n    });\n\n    if (content) {\n      irOperation.responses[name] = {\n        mediaType: content.mediaType,\n        schema: schemaToIrSchema({\n          context,\n          schema: {\n            description: responseObject.description,\n            ...contentToSchema({ content }),\n          },\n        }),\n      };\n    } else {\n      irOperation.responses[name] = {\n        schema: {\n          description: responseObject.description,\n          // TODO: parser - cover all statues with empty response bodies\n          // 1xx, 204, 205, 304\n          type: name === '204' ? 'void' : 'unknown',\n        },\n      };\n    }\n  }\n\n  if (operation.security) {\n    const securitySchemeObjects: Array<IR.SecurityObject> = [];\n\n    for (const securityRequirementObject of operation.security) {\n      for (const name in securityRequirementObject) {\n        const securitySchemeObject = securitySchemesMap.get(name);\n\n        if (!securitySchemeObject) {\n          continue;\n        }\n\n        securitySchemeObjects.push(securitySchemeObject);\n      }\n    }\n\n    if (securitySchemeObjects.length) {\n      irOperation.security = securitySchemeObjects;\n    }\n  }\n\n  // TODO: parser - handle servers\n  // qux: operation.servers\n\n  return irOperation;\n};\n\nexport const parseOperation = ({\n  context,\n  method,\n  operation,\n  operationIds,\n  path,\n  securitySchemesMap,\n}: {\n  context: IR.Context;\n  method: Extract<\n    keyof PathItemObject,\n    'delete' | 'get' | 'head' | 'options' | 'patch' | 'post' | 'put' | 'trace'\n  >;\n  operation: Operation;\n  operationIds: Map<string, string>;\n  path: keyof IR.PathsObject;\n  securitySchemesMap: Map<string, SecuritySchemeObject>;\n}) => {\n  ensureUniqueOperationId({\n    id: operation.operationId,\n    method,\n    operationIds,\n    path,\n  });\n\n  if (!context.ir.paths) {\n    context.ir.paths = {};\n  }\n\n  if (!context.ir.paths[path]) {\n    context.ir.paths[path] = {};\n  }\n\n  operation.id = operationToId({\n    context,\n    id: operation.operationId,\n    method,\n    path,\n  });\n\n  context.ir.paths[path][method] = operationToIrOperation({\n    context,\n    method,\n    operation,\n    path,\n    securitySchemesMap,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type {\n  ParameterObject,\n  ReferenceObject,\n  SchemaObject,\n} from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { paginationField } from './pagination';\nimport { schemaToIrSchema } from './schema';\n\n/**\n * Returns default parameter `allowReserved` based on value of `in`.\n */\nconst defaultAllowReserved = (\n  _in: ParameterObject['in'],\n): boolean | undefined => {\n  switch (_in) {\n    // this keyword only applies to parameters with an `in` value of `query`\n    case 'query':\n      return false;\n    default:\n      return;\n  }\n};\n\n/**\n * Returns default parameter `explode` based on value of `style`.\n */\nconst defaultExplode = (style: Required<ParameterObject>['style']): boolean => {\n  switch (style) {\n    // default value for `deepObject` is `false`, but that behavior is undefined\n    // so we use `true` to make this work with the `client-fetch` package\n    case 'deepObject':\n    case 'form':\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Returns default parameter `style` based on value of `in`.\n */\nconst defaultStyle = (\n  _in: ParameterObject['in'],\n): Required<ParameterObject>['style'] => {\n  switch (_in) {\n    case 'header':\n    case 'path':\n      return 'simple';\n    case 'cookie':\n    case 'query':\n      return 'form';\n  }\n};\n\nexport const parametersArrayToObject = ({\n  context,\n  parameters,\n}: {\n  context: IR.Context;\n  parameters?: ReadonlyArray<ParameterObject | ReferenceObject>;\n}): IR.ParametersObject | undefined => {\n  if (!parameters || !Object.keys(parameters).length) {\n    return;\n  }\n\n  const parametersObject: IR.ParametersObject = {};\n\n  for (const parameterOrReference of parameters) {\n    const parameter =\n      '$ref' in parameterOrReference\n        ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n        : parameterOrReference;\n\n    if (!parametersObject[parameter.in]) {\n      parametersObject[parameter.in] = {};\n    }\n\n    parametersObject[parameter.in]![parameter.name] = parameterToIrParameter({\n      context,\n      parameter,\n    });\n  }\n\n  return parametersObject;\n};\n\nconst parameterToIrParameter = ({\n  context,\n  parameter,\n}: {\n  context: IR.Context;\n  parameter: ParameterObject;\n}): IR.ParameterObject => {\n  // TODO: parser - fix\n  let schema = parameter.schema;\n\n  if (!schema) {\n    const content = mediaTypeObject({\n      content: parameter.content,\n    });\n    if (content) {\n      schema = content.schema;\n    }\n  }\n\n  const finalSchema: SchemaObject = {\n    deprecated: parameter.deprecated,\n    description: parameter.description,\n    ...schema,\n  };\n\n  const pagination = paginationField({\n    context,\n    name: parameter.name,\n    schema: finalSchema,\n  });\n\n  const style = parameter.style || defaultStyle(parameter.in);\n  const explode =\n    parameter.explode !== undefined ? parameter.explode : defaultExplode(style);\n  const allowReserved =\n    parameter.allowReserved !== undefined\n      ? parameter.allowReserved\n      : defaultAllowReserved(parameter.in);\n\n  const irParameter: IR.ParameterObject = {\n    allowReserved,\n    explode,\n    location: parameter.in,\n    name: parameter.name,\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n    }),\n    style,\n  };\n\n  if (parameter.deprecated) {\n    irParameter.deprecated = parameter.deprecated;\n  }\n\n  if (parameter.description) {\n    irParameter.description = parameter.description;\n  }\n\n  if (pagination) {\n    irParameter.pagination = pagination;\n  }\n\n  if (parameter.required) {\n    irParameter.required = parameter.required;\n  }\n\n  return irParameter;\n};\n\nexport const parseParameter = ({\n  $ref,\n  context,\n  parameter,\n}: {\n  $ref: string;\n  context: IR.Context;\n  parameter: ParameterObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.parameters) {\n    context.ir.components.parameters = {};\n  }\n\n  context.ir.components.parameters[refToName($ref)] = parameterToIrParameter({\n    context,\n    parameter,\n  });\n};\n","import type { IR } from '../../../ir/types';\nimport { refToName } from '../../../utils/ref';\nimport type { RequestBodyObject, SchemaObject } from '../types/spec';\nimport { mediaTypeObject } from './mediaType';\nimport { schemaToIrSchema } from './schema';\n\nconst requestBodyToIrRequestBody = ({\n  context,\n  requestBody,\n}: {\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}): IR.RequestBodyObject => {\n  // TODO: parser - fix\n  const content = mediaTypeObject({\n    content: requestBody.content,\n  });\n  const schema = content ? content.schema : undefined;\n\n  const finalSchema: SchemaObject = {\n    description: requestBody.description,\n    ...schema,\n  };\n\n  const irRequestBody: IR.RequestBodyObject = {\n    schema: schemaToIrSchema({\n      context,\n      schema: finalSchema,\n    }),\n  };\n\n  if (requestBody.description) {\n    irRequestBody.description = requestBody.description;\n  }\n\n  if (requestBody.required) {\n    irRequestBody.required = requestBody.required;\n  }\n\n  return irRequestBody;\n};\n\nexport const parseRequestBody = ({\n  $ref,\n  context,\n  requestBody,\n}: {\n  $ref: string;\n  context: IR.Context;\n  requestBody: RequestBodyObject;\n}) => {\n  if (!context.ir.components) {\n    context.ir.components = {};\n  }\n\n  if (!context.ir.components.requestBodies) {\n    context.ir.components.requestBodies = {};\n  }\n\n  context.ir.components.requestBodies[refToName($ref)] =\n    requestBodyToIrRequestBody({\n      context,\n      requestBody,\n    });\n};\n","import type { IR } from '../../../ir/types';\nimport { canProcessRef } from '../../shared/utils/filter';\nimport { mergeParametersObjects } from '../../shared/utils/parameter';\nimport type {\n  OpenApiV3_1_X,\n  ParameterObject,\n  PathItemObject,\n  PathsObject,\n  RequestBodyObject,\n  SecuritySchemeObject,\n} from '../types/spec';\nimport { parseOperation } from './operation';\nimport { parametersArrayToObject, parseParameter } from './parameter';\nimport { parseRequestBody } from './requestBody';\nimport { parseSchema } from './schema';\n\nexport const parseV3_1_X = (context: IR.Context<OpenApiV3_1_X>) => {\n  const operationIds = new Map<string, string>();\n  const securitySchemesMap = new Map<string, SecuritySchemeObject>();\n\n  const excludeRegExp = context.config.input.exclude\n    ? new RegExp(context.config.input.exclude)\n    : undefined;\n  const includeRegExp = context.config.input.include\n    ? new RegExp(context.config.input.include)\n    : undefined;\n\n  const shouldProcessRef = ($ref: string) =>\n    canProcessRef({\n      $ref,\n      excludeRegExp,\n      includeRegExp,\n    });\n\n  // TODO: parser - handle more component types, old parser handles only parameters and schemas\n  if (context.spec.components) {\n    for (const name in context.spec.components.securitySchemes) {\n      const securityOrReference =\n        context.spec.components.securitySchemes[name]!;\n      const securitySchemeObject =\n        '$ref' in securityOrReference\n          ? context.resolveRef<SecuritySchemeObject>(securityOrReference.$ref)\n          : securityOrReference;\n      securitySchemesMap.set(name, securitySchemeObject);\n    }\n\n    for (const name in context.spec.components.parameters) {\n      const $ref = `#/components/parameters/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const parameterOrReference = context.spec.components.parameters[name]!;\n      const parameter =\n        '$ref' in parameterOrReference\n          ? context.resolveRef<ParameterObject>(parameterOrReference.$ref)\n          : parameterOrReference;\n\n      parseParameter({\n        $ref,\n        context,\n        parameter,\n      });\n    }\n\n    for (const name in context.spec.components.requestBodies) {\n      const $ref = `#/components/requestBodies/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const requestBodyOrReference =\n        context.spec.components.requestBodies[name]!;\n      const requestBody =\n        '$ref' in requestBodyOrReference\n          ? context.resolveRef<RequestBodyObject>(requestBodyOrReference.$ref)\n          : requestBodyOrReference;\n\n      parseRequestBody({\n        $ref,\n        context,\n        requestBody,\n      });\n    }\n\n    for (const name in context.spec.components.schemas) {\n      const $ref = `#/components/schemas/${name}`;\n      if (!shouldProcessRef($ref)) {\n        continue;\n      }\n\n      const schema = context.spec.components.schemas[name]!;\n\n      parseSchema({\n        $ref,\n        context,\n        schema,\n      });\n    }\n  }\n\n  for (const path in context.spec.paths) {\n    const pathItem = context.spec.paths[path as keyof PathsObject]!;\n\n    const finalPathItem = pathItem.$ref\n      ? {\n          ...context.resolveRef<PathItemObject>(pathItem.$ref),\n          ...pathItem,\n        }\n      : pathItem;\n\n    const operationArgs: Omit<Parameters<typeof parseOperation>[0], 'method'> =\n      {\n        context,\n        operation: {\n          description: finalPathItem.description,\n          id: '',\n          parameters: parametersArrayToObject({\n            context,\n            parameters: finalPathItem.parameters,\n          }),\n          security: context.spec.security,\n          servers: finalPathItem.servers,\n          summary: finalPathItem.summary,\n        },\n        operationIds,\n        path: path as keyof PathsObject,\n        securitySchemesMap,\n      };\n\n    const $refDelete = `#/paths${path}/delete`;\n    if (finalPathItem.delete && shouldProcessRef($refDelete)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'delete',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.delete,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.delete.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refGet = `#/paths${path}/get`;\n    if (finalPathItem.get && shouldProcessRef($refGet)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'get',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.get,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.get.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refHead = `#/paths${path}/head`;\n    if (finalPathItem.head && shouldProcessRef($refHead)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'head',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.head,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.head.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refOptions = `#/paths${path}/options`;\n    if (finalPathItem.options && shouldProcessRef($refOptions)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'options',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.options,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.options.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPatch = `#/paths${path}/patch`;\n    if (finalPathItem.patch && shouldProcessRef($refPatch)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'patch',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.patch,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.patch.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPost = `#/paths${path}/post`;\n    if (finalPathItem.post && shouldProcessRef($refPost)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'post',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.post,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.post.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refPut = `#/paths${path}/put`;\n    if (finalPathItem.put && shouldProcessRef($refPut)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'put',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.put,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.put.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n\n    const $refTrace = `#/paths${path}/trace`;\n    if (finalPathItem.trace && shouldProcessRef($refTrace)) {\n      parseOperation({\n        ...operationArgs,\n        method: 'trace',\n        operation: {\n          ...operationArgs.operation,\n          ...finalPathItem.trace,\n          parameters: mergeParametersObjects({\n            source: parametersArrayToObject({\n              context,\n              parameters: finalPathItem.trace.parameters,\n            }),\n            target: operationArgs.operation.parameters,\n          }),\n        },\n      });\n    }\n  }\n};\n","export const allowedServiceMethods = [\n  'connect',\n  'delete',\n  'get',\n  'head',\n  'options',\n  'patch',\n  'post',\n  'put',\n  'trace',\n] as const;\n\n/**\n * Convert the service version to 'normal' version.\n * This basically removes any \"v\" prefix from the version string.\n * @param version\n */\nexport function getServiceVersion(version = '1.0'): string {\n  return String(version).replace(/^v/gi, '');\n}\n","export const refParametersPartial = '#/components/parameters/';\n\nexport const refSchemasPartial = '#/components/schemas/';\n","import { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport type { Config } from '../types/config';\nimport { getConfig } from './config';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\n\nexport const transformServiceName = ({\n  config,\n  name,\n}: {\n  config: Config;\n  name: string;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.serviceNameBuilder) {\n    return config.plugins['@hey-api/sdk'].serviceNameBuilder.replace(\n      '{{name}}',\n      name,\n    );\n  }\n\n  return name;\n};\n\nexport const transformTypeName = (name: string) => {\n  const config = getConfig();\n  if (config.plugins['@hey-api/typescript']?.style === 'PascalCase') {\n    return stringCase({\n      case: 'PascalCase',\n      value: name,\n    });\n  }\n  return name;\n};\n\n/**\n * This method is meant to be used to process definition names\n * and return a cleaned up, transformed version that is legal\n * to use in the output code.\n *\n * For example, a definition with name \"400\" would result in \"_400\",\n * \"import\" would result in \"_import\", etc. This also respects the\n * casing configuration for types.\n *\n * @param name Name of the definition in OpenAPI specification.\n * @returns A cleaned up, transformed name usable in output code.\n */\nexport const cleanAndTransformTypeName = (name: string) => {\n  const transformed = transformTypeName(name);\n  const cleaned = ensureValidTypeScriptJavaScriptIdentifier(transformed);\n  const result = cleaned.replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return result;\n};\n","import type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport const inferType = (\n  definition: OpenApiSchema,\n  definitionTypes: string[],\n) => {\n  if (definition.enum && !definitionTypes.includes('boolean')) {\n    return 'enum';\n  }\n  return undefined;\n};\n\nexport const isDefinitionTypeNullable = (\n  definition: Pick<OpenApiSchema, 'type'>,\n) => getDefinitionTypes(definition).includes('null');\n\nexport const isDefinitionNullable = (\n  definition: Pick<OpenApiSchema, 'nullable' | 'type'>,\n) => definition.nullable === true || isDefinitionTypeNullable(definition);\n\nexport const getDefinitionTypes = ({ type }: Pick<OpenApiSchema, 'type'>) => {\n  if (Array.isArray(type)) {\n    return type;\n  }\n  if (type) {\n    return [type];\n  }\n  return [];\n};\n","/**\n * Strip (OpenAPI) namespaces from values.\n * @param value\n */\nexport const stripNamespace = (value: string): string =>\n  value\n    .trim()\n    .replace(/^#\\/definitions\\//, '')\n    .replace(/^#\\/parameters\\//, '')\n    .replace(/^#\\/responses\\//, '')\n    .replace(/^#\\/securityDefinitions\\//, '')\n    .replace(/^#\\/components\\/schemas\\//, '')\n    .replace(/^#\\/components\\/responses\\//, '')\n    .replace(/^#\\/components\\/parameters\\//, '')\n    .replace(/^#\\/components\\/examples\\//, '')\n    .replace(/^#\\/components\\/requestBodies\\//, '')\n    .replace(/^#\\/components\\/headers\\//, '')\n    .replace(/^#\\/components\\/securitySchemes\\//, '')\n    .replace(/^#\\/components\\/links\\//, '')\n    .replace(/^#\\/components\\/callbacks\\//, '');\n","import { refParametersPartial } from '../../../utils/const';\nimport { transformTypeName } from '../../../utils/transform';\nimport { isDefinitionTypeNullable } from '../../v3/parser/inferType';\nimport type { Type } from '../interfaces/Type';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from './sanitize';\nimport { stripNamespace } from './stripNamespace';\n\n/**\n * Get mapped type for given type to basic Typescript/Javascript type.\n */\nexport const getMappedType = (\n  type: string,\n  format?: string,\n): string | undefined => {\n  if (format === 'binary') {\n    return 'binary';\n  }\n  switch (type) {\n    case 'any':\n    case 'object':\n    case 'unknown':\n      return 'unknown';\n    case 'array':\n      return 'unknown[]';\n    case 'boolean':\n      return 'boolean';\n    case 'byte':\n    case 'double':\n    case 'float':\n    case 'int':\n    case 'integer':\n    case 'long':\n    case 'number':\n    case 'short':\n      return 'number';\n    case 'char':\n    case 'date':\n    case 'date-time':\n    case 'password':\n    case 'string':\n      return 'string';\n    case 'file':\n      return 'binary';\n    case 'null':\n      return 'null';\n    case 'void':\n      return 'void';\n  }\n};\n\n/**\n * Matches characters inside square brackets, including the brackets. Does not\n * match if the opening bracket is preceded by \"`1\" which is a syntax for generics\n * from C#.\n *\n * Hello[World] -> matches [World]\n * Hello`1[World] -> no match\n * string[] -> matches []\n */\nexport const hasSquareBracketsRegExp = /(?<!`1)\\[.*\\]$/g;\n\n/**\n * Parse any string value into a type object.\n * @param type String or String[] value like \"integer\", \"Link[Model]\" or [\"string\", \"null\"].\n * @param format String value like \"binary\" or \"date\".\n */\nexport const getType = ({\n  debug,\n  format,\n  type = 'unknown',\n}: {\n  debug?: boolean;\n  format?: string;\n  /**\n   * Type can be the name of a schema component, a ref string, or any definition type.\n   */\n  type?: string | string[];\n}): Type => {\n  const result: Type = {\n    $refs: [],\n    base: 'unknown',\n    imports: [],\n    isNullable: false,\n    template: null,\n    type: 'unknown',\n  };\n\n  // Special case for JSON Schema spec (december 2020, page 17),\n  // that allows type to be an array of primitive types...\n  if (Array.isArray(type)) {\n    const joinedType = type\n      .filter((value) => value !== 'null')\n      .map((value) => getMappedType(value, format))\n      .filter(Boolean)\n      .join(' | ');\n    result.type = joinedType;\n    result.base = joinedType;\n    result.isNullable = isDefinitionTypeNullable({ type });\n    return result;\n  }\n\n  const mapped = getMappedType(type, format);\n  if (mapped) {\n    result.type = mapped;\n    result.base = mapped;\n    return result;\n  }\n\n  const typeWithoutNamespace = decodeURIComponent(stripNamespace(type));\n\n  hasSquareBracketsRegExp.lastIndex = 0;\n  if (hasSquareBracketsRegExp.test(typeWithoutNamespace)) {\n    const matches = typeWithoutNamespace.match(/(.*?)\\[(.*)\\]$/);\n    if (matches?.length) {\n      const match1 = getType({\n        debug,\n        type: ensureValidTypeScriptJavaScriptIdentifier(matches[1]!),\n      });\n      const match2 = getType({\n        debug,\n        type: ensureValidTypeScriptJavaScriptIdentifier(matches[2]!),\n      });\n\n      if (match1.type === 'unknown[]') {\n        result.type = `${match2.type}[]`;\n        result.base = `${match2.type}`;\n        match1.$refs = [];\n        match1.imports = [];\n      } else if (match2.type) {\n        result.type = `${match1.type}<${match2.type}>`;\n        result.base = match1.type;\n        result.template = match2.type;\n      } else {\n        result.type = match1.type;\n        result.base = match1.type;\n        result.template = match1.type;\n      }\n\n      result.$refs = [...result.$refs, ...match1.$refs, ...match2.$refs];\n      result.imports = [\n        ...result.imports,\n        ...match1.imports,\n        ...match2.imports,\n      ];\n      return result;\n    }\n  }\n\n  if (typeWithoutNamespace) {\n    let encodedType = transformTypeName(\n      ensureValidTypeScriptJavaScriptIdentifier(typeWithoutNamespace),\n    );\n    if (type.startsWith(refParametersPartial)) {\n      // prefix parameter names to avoid conflicts, assuming people are mostly\n      // interested in importing schema types and don't care about this naming\n      encodedType = `Parameter${encodedType}`;\n    }\n    result.type = encodedType;\n    result.base = encodedType;\n    if (type.startsWith('#')) {\n      result.$refs = [...result.$refs, decodeURIComponent(type)];\n    }\n    result.imports = [...result.imports, encodedType];\n    return result;\n  }\n\n  return result;\n};\n","export function unique<T>(value: T, index: number, arr: T[]): boolean {\n  return arr.indexOf(value) === index;\n}\n","import { unique } from '../../../utils/unique';\nimport type { Enum } from '../interfaces/client';\nimport type { WithEnumExtension } from '../interfaces/WithEnumExtension';\n\nexport const getEnums = (\n  definition: WithEnumExtension,\n  values?: ReadonlyArray<string | number>,\n): Enum[] => {\n  if (!Array.isArray(values)) {\n    return [];\n  }\n\n  const descriptions = (definition['x-enum-descriptions'] ?? []).filter(\n    (value) => typeof value === 'string',\n  );\n  const names = (\n    definition['x-enum-varnames'] ??\n    definition['x-enumNames'] ??\n    []\n  ).filter((value) => typeof value === 'string');\n\n  return values\n    .filter(unique)\n    .filter((value) => typeof value === 'number' || typeof value === 'string')\n    .map((value, index) => ({\n      customDescription: descriptions[index],\n      customName: names[index],\n      description: undefined,\n      value,\n    }));\n};\n","/**\n * The spec generates a pattern like this '^\\d{3}-\\d{2}-\\d{4}$'\n * However, to use it in HTML or inside new RegExp() we need to\n * escape the pattern to become: '^\\\\d{3}-\\\\d{2}-\\\\d{4}$' in order\n * to make it a valid regexp string.\n *\n * Also, escape single quote characters, because the output uses single quotes for strings\n *\n * @param pattern\n */\nexport const getPattern = (pattern?: string): string | undefined =>\n  pattern?.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\");\n","import type { Client } from '../../../types/client';\nimport { escapeName } from '../../../utils/escape';\nimport type { Model } from '../../common/interfaces/client';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getType } from '../../common/parser/type';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport const getModelProperties = ({\n  definition,\n  getModel,\n  openApi,\n  types,\n}: {\n  definition: OpenApiSchema;\n  getModel: GetModelFn;\n  openApi: OpenApi;\n  types: Client['types'];\n}): Model[] => {\n  const models: Model[] = [];\n\n  Object.entries(definition.properties ?? {}).forEach(\n    ([propertyName, property]) => {\n      const propertyRequired = Boolean(\n        definition.required?.includes(propertyName),\n      );\n      if (property.$ref) {\n        const model = getType({ type: property.$ref });\n        models.push({\n          $refs: [],\n          base: model.base,\n          description: property.description || null,\n          enum: [],\n          enums: [],\n          exclusiveMaximum: property.exclusiveMaximum,\n          exclusiveMinimum: property.exclusiveMinimum,\n          export: 'reference',\n          format: property.format,\n          imports: model.imports,\n          in: '',\n          isDefinition: false,\n          isNullable: property['x-nullable'] === true,\n          isReadOnly: property.readOnly === true,\n          isRequired: propertyRequired,\n          link: null,\n          maxItems: property.maxItems,\n          maxLength: property.maxLength,\n          maxProperties: property.maxProperties,\n          maximum: property.maximum,\n          minItems: property.minItems,\n          minLength: property.minLength,\n          minProperties: property.minProperties,\n          minimum: property.minimum,\n          multipleOf: property.multipleOf,\n          name: escapeName(propertyName),\n          pattern: getPattern(property.pattern),\n          properties: [],\n          template: model.template,\n          type: model.type,\n          uniqueItems: property.uniqueItems,\n        });\n      } else {\n        const model = getModel({ definition: property, openApi, types });\n        models.push({\n          $refs: [],\n          base: model.base,\n          description: property.description || null,\n          enum: model.enum,\n          enums: model.enums,\n          exclusiveMaximum: property.exclusiveMaximum,\n          exclusiveMinimum: property.exclusiveMinimum,\n          export: model.export,\n          format: property.format,\n          imports: model.imports,\n          in: '',\n          isDefinition: false,\n          isNullable: property['x-nullable'] === true,\n          isReadOnly: property.readOnly === true,\n          isRequired: propertyRequired,\n          link: model.link,\n          maxItems: property.maxItems,\n          maxLength: property.maxLength,\n          maxProperties: property.maxProperties,\n          maximum: property.maximum,\n          minItems: property.minItems,\n          minLength: property.minLength,\n          minProperties: property.minProperties,\n          minimum: property.minimum,\n          multipleOf: property.multipleOf,\n          name: escapeName(propertyName),\n          pattern: getPattern(property.pattern),\n          properties: model.properties,\n          template: model.template,\n          type: model.type,\n          uniqueItems: property.uniqueItems,\n        });\n      }\n    },\n  );\n\n  return models;\n};\n","import type { OpenApiReference as OpenApiReferenceV2 } from '../../v2/interfaces/OpenApiReference';\nimport type { OpenApiReference as OpenApiReferenceV3 } from '../../v3/interfaces/OpenApiReference';\nimport type { OpenApi } from '../interfaces/OpenApi';\n\nconst ESCAPED_REF_SLASH = /~1/g;\nconst ESCAPED_REF_TILDE = /~0/g;\n\nexport function getRef<T>(\n  openApi: OpenApi,\n  item: T & (OpenApiReferenceV2 | OpenApiReferenceV3),\n): T {\n  if (item.$ref) {\n    // Fetch the paths to the definitions, this converts:\n    // \"#/components/schemas/Form\" to [\"components\", \"schemas\", \"Form\"]\n    const paths = item.$ref.replace(/^#/g, '').split('/').filter(Boolean);\n\n    // Try to find the reference by walking down the path,\n    // if we cannot find it, then we throw an error.\n    let result = openApi;\n    paths.forEach((path) => {\n      const decodedPath = decodeURIComponent(\n        path.replace(ESCAPED_REF_SLASH, '/').replace(ESCAPED_REF_TILDE, '~'),\n      );\n      if (result.hasOwnProperty(decodedPath)) {\n        // @ts-expect-error\n        result = result[decodedPath];\n      } else {\n        throw new Error(`Could not find reference: \"${item.$ref}\"`);\n      }\n    });\n    return result as T;\n  }\n  return item as T;\n}\n","import type { Client } from '../../../types/client';\nimport type { Model } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport const getRequiredPropertiesFromComposition = ({\n  definitions,\n  getModel,\n  openApi,\n  required,\n  types,\n}: {\n  definitions: OpenApiSchema[];\n  getModel: GetModelFn;\n  openApi: OpenApi;\n  required: string[];\n  types: Client['types'];\n}): Model[] =>\n  definitions\n    .reduce((properties, definition) => {\n      if (definition.$ref) {\n        const schema = getRef<OpenApiSchema>(openApi, definition);\n        return [\n          ...properties,\n          ...getModel({ definition: schema, openApi, types }).properties,\n        ];\n      }\n      return [\n        ...properties,\n        ...getModel({ definition, openApi, types }).properties,\n      ];\n    }, [] as Model[])\n    .filter(\n      (property) => !property.isRequired && required.includes(property.name),\n    )\n    .map((property) => ({\n      ...property,\n      isRequired: true,\n    }));\n","import type { Client } from '../../../types/client';\nimport type { Model, ModelComposition } from '../../common/interfaces/client';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModelProperties } from './getModelProperties';\nimport { getRequiredPropertiesFromComposition } from './getRequiredPropertiesFromComposition';\n\nexport const getModelComposition = ({\n  definition,\n  definitions,\n  getModel,\n  openApi,\n  type,\n  types,\n}: {\n  definition: OpenApiSchema;\n  definitions: OpenApiSchema[];\n  getModel: GetModelFn;\n  openApi: OpenApi;\n  type: 'one-of' | 'any-of' | 'all-of';\n  types: Client['types'];\n}): ModelComposition => {\n  const composition: ModelComposition = {\n    $refs: [],\n    enums: [],\n    export: type,\n    imports: [],\n    properties: [],\n  };\n\n  const properties: Model[] = [];\n\n  definitions\n    .map((definition) => getModel({ definition, openApi, types }))\n    .filter((model) => {\n      const hasProperties = model.properties.length;\n      const hasEnums = model.enums.length;\n      const isObject = model.type === 'unknown';\n      const isEmpty = isObject && !hasProperties && !hasEnums;\n      return !isEmpty;\n    })\n    .forEach((model) => {\n      composition.imports.push(...model.imports);\n      composition.enums.push(...model.enums);\n      composition.properties.push(model);\n    });\n\n  if (definition.required && type === 'all-of') {\n    const requiredProperties = getRequiredPropertiesFromComposition({\n      definitions,\n      getModel,\n      openApi,\n      required: definition.required,\n      types,\n    });\n    requiredProperties.forEach((requiredProperty) => {\n      composition.imports.push(...requiredProperty.imports);\n      composition.enums.push(...requiredProperty.enums);\n    });\n    properties.push(...requiredProperties);\n  }\n\n  if (definition.properties) {\n    const modelProperties = getModelProperties({\n      definition,\n      getModel,\n      openApi,\n      types,\n    });\n    modelProperties.forEach((modelProperty) => {\n      composition.imports.push(...modelProperty.imports);\n      composition.enums.push(...modelProperty.enums);\n      if (modelProperty.export === 'enum') {\n        composition.enums.push(modelProperty);\n      }\n    });\n    properties.push(...modelProperties);\n  }\n\n  if (properties.length) {\n    composition.properties.push({\n      $refs: [],\n      base: 'unknown',\n      description: '',\n      enum: [],\n      enums: [],\n      export: 'interface',\n      imports: [],\n      in: '',\n      isDefinition: false,\n      isNullable: false,\n      isReadOnly: false,\n      isRequired: false,\n      link: null,\n      name: 'properties',\n      properties,\n      template: null,\n      type: 'unknown',\n    });\n  }\n\n  return composition;\n};\n","import type { Client } from '../../../types/client';\nimport type { Model, ModelMeta } from '../../common/interfaces/client';\nimport { getEnums } from '../../common/parser/getEnums';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModelComposition } from './getModelComposition';\nimport { getModelProperties } from './getModelProperties';\n\nexport const getModel = ({\n  definition,\n  isDefinition = false,\n  meta,\n  openApi,\n  types,\n}: Pick<Client, 'types'> & {\n  definition: OpenApiSchema;\n  isDefinition?: boolean;\n  meta?: ModelMeta;\n  openApi: OpenApi;\n}): Model => {\n  const model: Model = {\n    $refs: [],\n    base: 'unknown',\n    description: definition.description || null,\n    enum: [],\n    enums: [],\n    exclusiveMaximum: definition.exclusiveMaximum,\n    exclusiveMinimum: definition.exclusiveMinimum,\n    export: 'interface',\n    format: definition.format,\n    imports: [],\n    in: '',\n    isDefinition,\n    isNullable: definition['x-nullable'] === true,\n    isReadOnly: definition.readOnly === true,\n    isRequired: false,\n    link: null,\n    maxItems: definition.maxItems,\n    maxLength: definition.maxLength,\n    maxProperties: definition.maxProperties,\n    maximum: definition.maximum,\n    meta,\n    minItems: definition.minItems,\n    minLength: definition.minLength,\n    minProperties: definition.minProperties,\n    minimum: definition.minimum,\n    multipleOf: definition.multipleOf,\n    name: meta?.name ?? '',\n    pattern: getPattern(definition.pattern),\n    properties: [],\n    template: null,\n    type: 'unknown',\n    uniqueItems: definition.uniqueItems,\n  };\n\n  if (definition.$ref) {\n    const definitionRef = getType({ type: definition.$ref });\n    model.export = 'reference';\n    model.type = definitionRef.type;\n    model.base = definitionRef.base;\n    model.template = definitionRef.template;\n    model.imports.push(...definitionRef.imports);\n    return model;\n  }\n\n  if (definition.enum && definition.type !== 'boolean') {\n    const enums = getEnums(definition, definition.enum);\n    if (enums.length) {\n      model.base = 'string';\n      model.enum = [...model.enum, ...enums];\n      model.export = 'enum';\n      model.type = 'string';\n      return model;\n    }\n  }\n\n  if (definition.type === 'array' && definition.items) {\n    if (definition.items.$ref) {\n      const arrayItems = getType({ type: definition.items.$ref });\n      model.export = 'array';\n      model.type = arrayItems.type;\n      model.base = arrayItems.base;\n      model.template = arrayItems.template;\n      model.imports.push(...arrayItems.imports);\n      return model;\n    } else {\n      const arrayItems = getModel({\n        definition: definition.items,\n        openApi,\n        types,\n      });\n      model.export = 'array';\n      model.type = arrayItems.type;\n      model.base = arrayItems.base;\n      model.template = arrayItems.template;\n      model.link = arrayItems;\n      model.imports.push(...arrayItems.imports);\n      return model;\n    }\n  }\n\n  if (\n    definition.type === 'object' &&\n    typeof definition.additionalProperties === 'object'\n  ) {\n    if (definition.additionalProperties.$ref) {\n      const additionalProperties = getType({\n        type: definition.additionalProperties.$ref,\n      });\n      model.export = 'dictionary';\n      model.type = additionalProperties.type;\n      model.base = additionalProperties.base;\n      model.template = additionalProperties.template;\n      model.imports.push(...additionalProperties.imports);\n      return model;\n    } else {\n      const additionalProperties = getModel({\n        definition: definition.additionalProperties,\n        openApi,\n        types,\n      });\n      model.export = 'dictionary';\n      model.type = additionalProperties.type;\n      model.base = additionalProperties.base;\n      model.template = additionalProperties.template;\n      model.link = additionalProperties;\n      model.imports.push(...additionalProperties.imports);\n      return model;\n    }\n  }\n\n  if (definition.allOf?.length) {\n    const composition = getModelComposition({\n      definition,\n      definitions: definition.allOf,\n      getModel,\n      openApi,\n      type: 'all-of',\n      types,\n    });\n    model.export = composition.export;\n    model.imports.push(...composition.imports);\n    model.properties.push(...composition.properties);\n    model.enums = [...model.enums, ...composition.enums];\n    return model;\n  }\n\n  if (definition.type === 'object') {\n    model.export = 'interface';\n    model.type = 'unknown';\n    model.base = 'unknown';\n\n    if (definition.properties) {\n      const modelProperties = getModelProperties({\n        definition,\n        getModel,\n        openApi,\n        types,\n      });\n      modelProperties.forEach((modelProperty) => {\n        model.imports.push(...modelProperty.imports);\n        model.enums = [...model.enums, ...modelProperty.enums];\n        model.properties.push(modelProperty);\n        if (modelProperty.export === 'enum') {\n          model.enums = [...model.enums, modelProperty];\n        }\n      });\n    }\n    return model;\n  }\n\n  // If the schema has a type than it can be a basic or generic type.\n  if (definition.type) {\n    const definitionType = getType({\n      format: definition.format,\n      type: definition.type,\n    });\n    model.export = 'generic';\n    model.type = definitionType.type;\n    model.base = definitionType.base;\n    model.template = definitionType.template;\n    model.imports.push(...definitionType.imports);\n    return model;\n  }\n\n  return model;\n};\n","import type { Client } from '../../../types/client';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport { getModel } from './getModel';\n\nexport const getModels = (\n  openApi: OpenApi,\n): Pick<Client, 'models' | 'types'> => {\n  const types: Client['types'] = {};\n  let models: Client['models'] = [];\n\n  Object.entries(openApi.definitions ?? {}).forEach(\n    ([definitionName, definition]) => {\n      const definitionType = getType({ type: definitionName });\n      const name = definitionType.base.replace(\n        reservedJavaScriptKeywordsRegExp,\n        '_$1',\n      );\n      const meta = {\n        $ref: `#/definitions/${definitionName}`,\n        name,\n      };\n      types[name] = meta;\n      const model = getModel({\n        definition,\n        isDefinition: true,\n        meta,\n        openApi,\n        types,\n      });\n      models = [...models, model];\n    },\n  );\n\n  return {\n    models,\n    types,\n  };\n};\n","import type { Enum, Model } from '../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../openApi';\nimport { unescapeName } from './escape';\nimport { sort } from './sort';\nimport { unique } from './unique';\n\n/**\n * Sanitizes names of enums, so they are valid typescript identifiers of a certain form.\n *\n * 1: Replace all characters not legal as part of identifier with '_'\n * 2: Add '_' prefix if first character of enum name has character not legal for start of identifier\n * 3: Add '_' where the string transitions from lowercase to uppercase\n * 4: Transform the whole string to uppercase\n *\n * Javascript identifier regexp pattern retrieved from https://developer.mozilla.org/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers\n */\nexport const enumKey = (value?: string | number, customName?: string) => {\n  if (customName) {\n    return customName;\n  }\n  // prefix numbers with underscore\n  if (typeof value === 'number') {\n    return `'_${value}'`;\n  }\n\n  let key = '';\n  if (typeof value === 'string') {\n    key = value\n      .replace(/[^$\\u200c\\u200d\\p{ID_Continue}]/gu, '_')\n      .replace(/^([^$_\\p{ID_Start}])/u, '_$1')\n      .replace(/(\\p{Lowercase})(\\p{Uppercase}+)/gu, '$1_$2');\n  }\n  key = key.trim();\n  if (!key) {\n    key = 'empty_string';\n  }\n  return key.toUpperCase();\n};\n\nexport const enumUnionType = (enums: Enum[]) =>\n  enums\n    .map((enumerator) => enumValue(enumerator.value, true))\n    .filter(unique)\n    .join(' | ');\n\nexport const enumValue = (value?: string | number, union: boolean = false) => {\n  if (typeof value === 'string') {\n    if (value.includes(\"'\") && union) {\n      return `\"${value}\"`;\n    }\n    return `'${value}'`;\n  }\n  return value;\n};\n\nexport const enumEntry = (enumerator: Enum) => {\n  const key = enumKey(enumerator.value, enumerator.customName);\n  const value = enumValue(enumerator.value);\n  return { key, value };\n};\n\n/**\n * Represent enum in `meta` object for deduplication\n */\nexport const enumMeta = (model: Model): Required<Model>['meta'] => {\n  // serialize enum values in namespace for quick lookup\n  const serialized = model.enum\n    .map((enumerator) => enumEntry(enumerator))\n    .sort((a, b) => sort(a.key, b.key))\n    .map((enumerator) => `${enumerator.key}=${enumerator.value}`)\n    .join('&');\n  return {\n    $ref: `enum/${model.name}/${serialized}`,\n    name: ensureValidTypeScriptJavaScriptIdentifier(unescapeName(model.name)),\n  };\n};\n","import { getType } from '../openApi';\nimport { refParametersPartial, refSchemasPartial } from './const';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { cleanAndTransformTypeName } from './transform';\n\nexport const getParametersMeta = (definitionName: string) => {\n  const definitionType = getType({ type: definitionName });\n  /**\n   * Prefix parameter names to avoid name conflicts with schemas.\n   * Assuming people are mostly interested in importing schema types\n   * and don't care about this name as much. It should be resolved in\n   * a cleaner way, there just isn't a good deduplication strategy\n   * today. This is a workaround in the meantime, hopefully reducing\n   * the chance of conflicts.\n   *\n   * Example where this would break: schema named `ParameterFoo` and\n   * parameter named `Foo` (this would transform to `ParameterFoo`)\n   *\n   * Note: there's a related code to this workaround in `getType()`\n   * method that needs to be cleaned up when this is addressed.\n   */\n  const name = `Parameter${definitionType.base.replace(reservedJavaScriptKeywordsRegExp, '_$1')}`;\n  const meta = {\n    $ref: refParametersPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n\n/**\n * @param definitionName Name of the schema definition in OpenAPI specification.\n * @returns meta object\n */\nexport const getSchemasMeta = (definitionName: string) => {\n  const name = cleanAndTransformTypeName(definitionName);\n  const meta = {\n    $ref: refSchemasPartial + definitionName,\n    name,\n  };\n  return meta;\n};\n","import { compiler, type Property, type TypeNode } from '../compiler';\nimport type { Model } from '../openApi';\nimport { sanitizeOperationParameterName } from '../openApi';\nimport type { Client } from '../types/client';\nimport { getConfig, isLegacyClient } from './config';\nimport { refSchemasPartial } from './const';\nimport { enumValue } from './enum';\nimport { escapeComment, escapeName, unescapeName } from './escape';\nimport { getSchemasMeta } from './meta';\nimport { reservedJavaScriptKeywordsRegExp } from './regexp';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\nexport const isModelDate = (model: Model): boolean =>\n  model.format === 'date' || model.format === 'date-time';\n\nconst base = (model: Model) => {\n  const config = getConfig();\n\n  if (model.base === 'binary') {\n    return compiler.typeUnionNode({\n      types: ['Blob', 'File'],\n    });\n  }\n\n  if (config.plugins['@hey-api/transformers']?.dates && isModelDate(model)) {\n    return compiler.typeNode('Date');\n  }\n\n  return compiler.typeNode(model.base);\n};\n\nconst typeReference = (model: Model) => {\n  // nullable is false when base is null to avoid duplicate null statements\n  const isNullable = model.base === 'null' ? false : model.isNullable;\n  let typeNode = base(model);\n  /**\n   * special handling for single reference. The current approach didn't handle\n   * transformed names, this fixes that. We should add a more robust solution,\n   * but this will work for now.\n   * {@link https://github.com/hey-api/openapi-ts/issues/768}\n   */\n  if (model.export === 'reference' && model.$refs.length === 1) {\n    if (model.$refs[0]!.startsWith(refSchemasPartial)) {\n      const meta = getSchemasMeta(model.base);\n      typeNode = compiler.typeNode(meta.name);\n    }\n  }\n  const unionNode = compiler.typeUnionNode({\n    isNullable,\n    types: [typeNode],\n  });\n  return unionNode;\n};\n\nconst typeArray = (model: Model) => {\n  if (model.link) {\n    // We treat an array of `model.link` as constant size array definition.\n    if (Array.isArray(model.link)) {\n      const types = model.link.map((m) => toType(m));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    // Special case where we use tuple to define constant size array.\n    if (\n      model.export === 'array' &&\n      model.maxItems &&\n      model.minItems &&\n      model.maxItems === model.minItems &&\n      model.maxItems <= 100\n    ) {\n      const types = Array(model.maxItems).fill(toType(model.link));\n      const tuple = compiler.typeTupleNode({\n        isNullable: model.isNullable,\n        types,\n      });\n      return tuple;\n    }\n\n    return compiler.typeArrayNode([toType(model.link)], model.isNullable);\n  }\n\n  return compiler.typeArrayNode([base(model)], model.isNullable);\n};\n\nconst typeEnum = (model: Model) => {\n  const values = model.enum.map((enumerator) => enumValue(enumerator.value));\n  return compiler.typeUnionNode({\n    isNullable: model.isNullable,\n    types: values,\n  });\n};\n\nconst typeDict = (model: Model) => {\n  const type =\n    model.link && !Array.isArray(model.link) ? toType(model.link) : base(model);\n  return compiler.typeRecordNode(['string'], [type], model.isNullable, true);\n};\n\nconst typeUnionOrIntersection = ({\n  model,\n  style,\n}: {\n  model: Model;\n  style: 'intersection' | 'union';\n}) => {\n  const types = model.properties\n    .map((model) => {\n      const str = compiler.nodeToString({\n        node: toType(model),\n        unescape: true,\n      });\n      return str;\n    })\n    .filter(unique);\n\n  const node =\n    style === 'union'\n      ? compiler.typeUnionNode({\n          // avoid printing duplicate null statements\n          isNullable:\n            model.isNullable &&\n            !model.properties.find((property) => property.isNullable),\n          types,\n        })\n      : compiler.typeIntersectionNode({\n          isNullable: model.isNullable,\n          types,\n        });\n\n  // top-level models don't need parentheses around them\n  if (model.meta) {\n    return node;\n  }\n\n  return compiler.typeParenthesizedNode({\n    type: node,\n  });\n};\n\nconst typeInterface = (model: Model) => {\n  if (!model.properties.length) {\n    return compiler.typeNode('unknown');\n  }\n\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  const properties: Property[] = model.properties.map((property) => {\n    let maybeRequired = property.isRequired ? '' : '?';\n    let value = toType(property);\n    let name = !isLegacy\n      ? escapeName(unescapeName(transformTypeKeyName(property.name)))\n      : // special test for 1XX status codes. We need a more robust system\n        // for escaping values depending on context in which they're printed,\n        // but since this works for client packages, it's not worth it right now\n        /^\\dXX$/.test(property.name)\n        ? escapeName(property.name)\n        : property.name;\n    // special case for additional properties type\n    if (property.name === '[key: string]') {\n      name = property.name;\n      if (maybeRequired) {\n        maybeRequired = '';\n        value = compiler.typeUnionNode({\n          types: [value, 'undefined'],\n        });\n      }\n    }\n    return {\n      comment: [\n        property.description && escapeComment(property.description),\n        property.deprecated && '@deprecated',\n      ],\n      isReadOnly: property.isReadOnly,\n      isRequired: maybeRequired === '',\n      name,\n      type: value,\n    };\n  });\n\n  return compiler.typeInterfaceNode({\n    isNullable: model.isNullable,\n    properties,\n    useLegacyResolution: true,\n  });\n};\n\nexport const toType = (model: Model): TypeNode => {\n  switch (model.export) {\n    case 'all-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'intersection',\n      });\n    case 'any-of':\n    case 'one-of':\n      return typeUnionOrIntersection({\n        model,\n        style: 'union',\n      });\n    case 'array':\n      return typeArray(model);\n    case 'dictionary':\n      return typeDict(model);\n    case 'enum':\n      return typeEnum(model);\n    case 'interface':\n      return typeInterface(model);\n    case 'const':\n    case 'generic':\n    case 'reference':\n    default:\n      return typeReference(model);\n  }\n};\n\nexport interface SetUniqueTypeNameResult {\n  /**\n   * Did this function add a new property to the `client.types` object?\n   */\n  created: boolean;\n  /**\n   * Unique name for the exported type.\n   */\n  name: string;\n}\n\n/**\n * Generates a unique name for the exported type for given model meta.\n * @param args.client Internal client instance\n * @param args.count Unique key for deduplication\n * @param args.create If a name record does not exist, should it be created?\n * @param args.meta Meta property from the model\n * @param args.nameTransformer Function for transforming name into the final\n * value. In different contexts, a different strategy might be used. For\n * example, slashes `/` are invalid in TypeScript identifiers, but okay in\n * a JavaScript object key name.\n * @returns {SetUniqueTypeNameResult}\n */\nexport const setUniqueTypeName = ({\n  client,\n  count = 1,\n  create = false,\n  meta,\n  nameTransformer,\n}: Pick<Required<Model>, 'meta'> & {\n  client: Client;\n  count?: number;\n  create?: boolean;\n  nameTransformer?: (value: string) => string;\n}): SetUniqueTypeNameResult => {\n  let result: SetUniqueTypeNameResult = {\n    created: false,\n    name: '',\n  };\n  let name = meta.name;\n  if (nameTransformer) {\n    name = nameTransformer(name);\n  }\n  if (count > 1) {\n    name = `${name}${count}`;\n  }\n  const type = client.types[name];\n  if (!type) {\n    if (create) {\n      client.types[name] = meta;\n      result = {\n        created: true,\n        name,\n      };\n    }\n  } else if (type.$ref === meta.$ref) {\n    result = {\n      created: false,\n      name,\n    };\n  } else {\n    result = setUniqueTypeName({\n      client,\n      count: count + 1,\n      create,\n      meta,\n      nameTransformer,\n    });\n  }\n  return result;\n};\n\nexport interface UnsetUniqueTypeNameResult {\n  /**\n   * Did this function delete a property from the `client.types` object?\n   */\n  deleted: boolean;\n  /**\n   * Unique name removed from the `client.types` object.\n   */\n  name: string;\n}\n\nexport const unsetUniqueTypeName = ({\n  client,\n  name,\n}: {\n  client: Client;\n  name: string;\n}): UnsetUniqueTypeNameResult => {\n  let result: UnsetUniqueTypeNameResult = {\n    deleted: false,\n    name: '',\n  };\n  if (!client.types[name]) {\n    return result;\n  }\n  delete client.types[name];\n  result = {\n    deleted: true,\n    name,\n  };\n  return result;\n};\n\n/**\n * Replaces any invalid characters from a parameter name.\n * For example: 'filter.someProperty' becomes 'filterSomeProperty'.\n */\nexport const transformTypeKeyName = (value: string): string => {\n  const config = getConfig();\n\n  // transform only for legacy clients\n  if (!isLegacyClient(config)) {\n    return value;\n  }\n\n  const name = stringCase({\n    case: 'camelCase',\n    value: sanitizeOperationParameterName(value),\n  }).replace(reservedJavaScriptKeywordsRegExp, '_$1');\n  return name;\n};\n","import type { Config } from '../../../types/config';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformTypeKeyName } from '../../../utils/type';\nimport type {\n  OperationParameter,\n  OperationResponse,\n} from '../interfaces/client';\nimport { sanitizeNamespaceIdentifier } from './sanitize';\n\nexport const getOperationKey = (operation: {\n  method: string;\n  path: string;\n}) => {\n  const operationKey = `${operation.method.toUpperCase()} ${operation.path}`;\n  return operationKey;\n};\n\nexport const getOperationResponseHeader = (\n  operationResponses: OperationResponse[],\n): string | null => {\n  const header = operationResponses.find(\n    (operationResponses) => operationResponses.in === 'header',\n  );\n  if (header) {\n    return header.name;\n  }\n  return null;\n};\n\n/**\n * Does this operation have at least one required parameter?\n * @returns boolean\n */\nexport const isOperationParameterRequired = (\n  parameters: OperationParameter[],\n) => {\n  const isRequired = parameters.some((parameter) => parameter.isRequired);\n  return isRequired;\n};\n\n/**\n * Attempts to parse response status code from string into number.\n * @param value string status code from OpenAPI definition\n * @returns Parsed status code or null if invalid value\n */\nexport const parseResponseStatusCode = (\n  value: string,\n): OperationResponse['code'] | null => {\n  if (value === 'default') {\n    return 'default';\n  }\n\n  if (value === '1XX') {\n    return '1XX';\n  }\n\n  if (value === '2XX') {\n    return '2XX';\n  }\n\n  if (value === '3XX') {\n    return '3XX';\n  }\n\n  if (value === '4XX') {\n    return '4XX';\n  }\n\n  if (value === '5XX') {\n    return '5XX';\n  }\n\n  if (/\\d{3}/g.test(value)) {\n    const code = Number.parseInt(value, 10);\n    if (code >= 100 && code < 600) {\n      return code;\n    }\n  }\n\n  return null;\n};\n\nexport const sorterByResponseStatusCode = (\n  a: OperationResponse,\n  b: OperationResponse,\n) => {\n  if (a.code > b.code) {\n    return 1;\n  }\n\n  if (a.code < b.code) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst isErrorStatusCode = (code: OperationResponse['code']) =>\n  code === '3XX' ||\n  code === '4XX' ||\n  code === '5XX' ||\n  (typeof code === 'number' && code >= 300);\n\nconst isSuccessStatusCode = (code: OperationResponse['code']) =>\n  code === '2XX' || (typeof code === 'number' && code >= 200 && code < 300);\n\n/**\n * Detects whether default response is meant to be used\n * for error or success response.\n */\nconst inferDefaultResponseTypes = (\n  response: OperationResponse,\n  responses: OperationResponse[],\n) => {\n  let types: Array<'error' | 'success'> = [];\n\n  const addResponseType = (type: (typeof types)[number]) => {\n    if (!types.includes(type)) {\n      types = [...types, type];\n    }\n  };\n\n  const hasSuccessResponse = responses.some(({ code }) =>\n    isSuccessStatusCode(code),\n  );\n  if (!hasSuccessResponse) {\n    addResponseType('success');\n  }\n\n  const description = (response.description ?? '').toLocaleLowerCase();\n  const $refs = response.$refs.join('|').toLocaleLowerCase();\n\n  // must be in lowercase\n  const errorKeywords = ['error', 'problem'];\n  const successKeywords = ['success'];\n\n  if (\n    successKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('success');\n  }\n\n  if (\n    errorKeywords.some(\n      (keyword) => description.includes(keyword) || $refs.includes(keyword),\n    )\n  ) {\n    addResponseType('error');\n  }\n\n  if (!types.length) {\n    addResponseType('error');\n  }\n\n  return types;\n};\n\nexport const operationFilterFn = ({\n  config,\n  operationKey,\n}: {\n  config: Config;\n  operationKey: string;\n}): boolean => {\n  const regexp = config.plugins['@hey-api/sdk']?.filter\n    ? new RegExp(config.plugins['@hey-api/sdk']?.filter)\n    : undefined;\n  return !regexp || regexp.test(operationKey);\n};\n\n/**\n * Convert the input value to a correct operation (method) class name.\n * This will use the operation ID - if available - and otherwise fallback\n * on a generated name from the URL\n */\nexport const operationNameFn = ({\n  config,\n  method,\n  operationId,\n  path,\n}: {\n  config: Config;\n  method: string;\n  operationId: string | undefined;\n  path: string;\n}): string => {\n  if (config.plugins['@hey-api/sdk']?.operationId && operationId) {\n    return stringCase({\n      case: 'camelCase',\n      value: sanitizeNamespaceIdentifier(operationId),\n    });\n  }\n\n  let urlWithoutPlaceholders = path;\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  if (isLegacyClient(config)) {\n    urlWithoutPlaceholders = urlWithoutPlaceholders.replace(\n      /[^/]*?{api-version}.*?\\//g,\n      '',\n    );\n  }\n\n  urlWithoutPlaceholders = urlWithoutPlaceholders\n    .replace(/{(.*?)}/g, 'by-$1')\n    // replace slashes with hyphens for camelcase method at the end\n    .replace(/[/:]/g, '-');\n\n  return stringCase({\n    case: 'camelCase',\n    value: `${method}-${urlWithoutPlaceholders}`,\n  });\n};\n\nexport const operationParameterFilterFn = (\n  parameter: OperationParameter,\n): boolean => {\n  const config = getConfig();\n\n  // legacy clients ignore the \"api-version\" param since we do not want to\n  // add it as the first/default parameter for each of the service calls\n  return !isLegacyClient(config) || parameter.prop !== 'api-version';\n};\n\nexport const operationParameterNameFn = (\n  parameter: Omit<OperationParameter, 'name'>,\n): string => {\n  const config = getConfig();\n\n  return !isLegacyClient(config)\n    ? parameter.prop\n    : transformTypeKeyName(parameter.prop);\n};\n\nexport const tagResponseTypes = (responses: OperationResponse[]) =>\n  responses.map((response) => {\n    const { code } = response;\n    if (code === 'default') {\n      response.responseTypes = inferDefaultResponseTypes(response, responses);\n    } else if (isSuccessStatusCode(code)) {\n      response.responseTypes = ['success'];\n    } else if (isErrorStatusCode(code)) {\n      response.responseTypes = ['error'];\n    }\n    return response;\n  });\n","import type { Model } from '../../common/interfaces/client';\nimport type { OpenApiParameter } from '../../v2/interfaces/OpenApiParameter';\nimport type { OpenApiSchema } from '../../v3/interfaces/OpenApiSchema';\nimport { getDefinitionTypes } from '../../v3/parser/inferType';\nimport type { OperationParameter } from '../interfaces/client';\n\nexport const getDefault = (\n  definition: OpenApiSchema | OpenApiParameter,\n  model?: Model | OperationParameter,\n): unknown | undefined => {\n  if (definition.default === undefined || definition.default === null) {\n    return definition.default;\n  }\n\n  const definitionTypes = getDefinitionTypes(definition);\n\n  const type =\n    definitionTypes.find((type) => type !== 'null') ||\n    typeof definition.default;\n\n  switch (type) {\n    case 'int':\n    case 'integer':\n    case 'number':\n      if (\n        model?.export === 'enum' &&\n        model.enum?.[definition.default as number]\n      ) {\n        const { value } = model.enum[definition.default as number]!;\n        return value;\n      }\n      return definition.default;\n    case 'array':\n    case 'boolean':\n    case 'object':\n    case 'string':\n      return definition.default;\n    default:\n      return undefined;\n  }\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationParameter } from '../../common/interfaces/client';\nimport { getDefault } from '../../common/parser/getDefault';\nimport { getEnums } from '../../common/parser/getEnums';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getRef } from '../../common/parser/getRef';\nimport { operationParameterNameFn } from '../../common/parser/operation';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiParameter } from '../interfaces/OpenApiParameter';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModel } from './getModel';\n\nexport const getOperationParameter = ({\n  openApi,\n  parameter,\n  types,\n}: {\n  openApi: OpenApi;\n  parameter: OpenApiParameter;\n  types: Client['types'];\n}): OperationParameter => {\n  const operationParameterWithoutName: Omit<OperationParameter, 'name'> = {\n    $refs: [],\n    base: 'unknown',\n    description: parameter.description || null,\n    enum: [],\n    enums: [],\n    exclusiveMaximum: parameter.exclusiveMaximum,\n    exclusiveMinimum: parameter.exclusiveMinimum,\n    export: 'interface',\n    format: parameter.format,\n    imports: [],\n    in: parameter.in,\n    isDefinition: false,\n    isNullable: parameter['x-nullable'] === true,\n    isReadOnly: false,\n    isRequired: parameter.required === true,\n    link: null,\n    maxItems: parameter.maxItems,\n    maxLength: parameter.maxLength,\n    maximum: parameter.maximum,\n    mediaType: null,\n    minItems: parameter.minItems,\n    minLength: parameter.minLength,\n    minimum: parameter.minimum,\n    multipleOf: parameter.multipleOf,\n    pattern: getPattern(parameter.pattern),\n    prop: parameter.name,\n    properties: [],\n    template: null,\n    type: 'unknown',\n    uniqueItems: parameter.uniqueItems,\n  };\n  let operationParameter = {\n    ...operationParameterWithoutName,\n    name: operationParameterNameFn(operationParameterWithoutName),\n  };\n\n  if (parameter.$ref) {\n    const model = getType({ type: parameter.$ref });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      export: 'reference',\n      imports: [...operationParameter.imports, ...model.imports],\n      template: model.template,\n      type: model.type,\n    };\n    operationParameter.default = getDefault(parameter, operationParameter);\n    return operationParameter;\n  }\n\n  if (parameter.enum) {\n    const model = getEnums(parameter, parameter.enum);\n    if (model.length) {\n      operationParameter = {\n        ...operationParameter,\n        base: 'string',\n        enum: [...operationParameter.enum, ...model],\n        export: 'enum',\n        type: 'string',\n      };\n      operationParameter.default = getDefault(parameter, operationParameter);\n      return operationParameter;\n    }\n  }\n\n  if (parameter.type === 'array' && parameter.items) {\n    const model = getType({\n      format: parameter.items.format,\n      type: parameter.items.type,\n    });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      export: 'array',\n      imports: [...operationParameter.imports, ...model.imports],\n      template: model.template,\n      type: model.type,\n    };\n    operationParameter.default = getDefault(parameter, operationParameter);\n    return operationParameter;\n  }\n\n  if (parameter.type === 'object' && parameter.items) {\n    const model = getType({\n      format: parameter.items.format,\n      type: parameter.items.type,\n    });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      export: 'dictionary',\n      imports: [...operationParameter.imports, ...model.imports],\n      template: model.template,\n      type: model.type,\n    };\n    operationParameter.default = getDefault(parameter, operationParameter);\n    return operationParameter;\n  }\n\n  let schema = parameter.schema;\n  if (schema) {\n    if (schema.$ref?.startsWith('#/parameters/')) {\n      schema = getRef<OpenApiSchema>(openApi, schema);\n    }\n\n    if (schema.$ref) {\n      const model = getType({ type: schema.$ref });\n      operationParameter = {\n        ...operationParameter,\n        $refs: [...operationParameter.$refs, ...model.$refs],\n        base: model.base,\n        export: 'reference',\n        imports: [...operationParameter.imports, ...model.imports],\n        template: model.template,\n        type: model.type,\n      };\n      operationParameter.default = getDefault(parameter, operationParameter);\n      return operationParameter;\n    }\n\n    const model = getModel({ definition: schema, openApi, types });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      enum: [...operationParameter.enum, ...model.enum],\n      enums: [...operationParameter.enums, ...model.enums],\n      export: model.export,\n      imports: [...operationParameter.imports, ...model.imports],\n      link: model.link,\n      properties: [...operationParameter.properties, ...model.properties],\n      template: model.template,\n      type: model.type,\n    };\n    operationParameter.default = getDefault(parameter, operationParameter);\n    return operationParameter;\n  }\n\n  // If the parameter has a type than it can be a basic or generic type.\n  if (parameter.type) {\n    const model = getType({\n      format: parameter.format,\n      type: parameter.type,\n    });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      export: 'generic',\n      imports: [...operationParameter.imports, ...model.imports],\n      template: model.template,\n      type: model.type,\n    };\n    operationParameter.default = getDefault(parameter, operationParameter);\n    return operationParameter;\n  }\n\n  return operationParameter;\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationParameters } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport { operationParameterFilterFn } from '../../common/parser/operation';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiParameter } from '../interfaces/OpenApiParameter';\nimport { getOperationParameter } from './getOperationParameter';\n\nconst allowedIn = ['body', 'formData', 'header', 'path', 'query'] as const;\n\nexport const getOperationParameters = ({\n  openApi,\n  parameters,\n  types,\n}: {\n  openApi: OpenApi;\n  parameters: OpenApiParameter[];\n  types: Client['types'];\n}): OperationParameters => {\n  const operationParameters: OperationParameters = {\n    $refs: [],\n    imports: [],\n    parameters: [],\n    parametersBody: null,\n    parametersCookie: [], // not used in v2\n    parametersForm: [],\n    parametersHeader: [],\n    parametersPath: [],\n    parametersQuery: [],\n  };\n\n  parameters.forEach((parameterOrReference) => {\n    const parameterDef = getRef<OpenApiParameter>(\n      openApi,\n      parameterOrReference,\n    );\n    const parameter = getOperationParameter({\n      openApi,\n      parameter: parameterDef,\n      types,\n    });\n\n    const skip = !operationParameterFilterFn(parameter);\n    if (!allowedIn.includes(parameterDef.in) || skip) {\n      return;\n    }\n\n    switch (parameterDef.in) {\n      case 'body':\n        operationParameters.parametersBody = parameter;\n        break;\n      case 'formData':\n        operationParameters.parametersForm = [\n          ...operationParameters.parametersForm,\n          parameter,\n        ];\n        break;\n      case 'header':\n        operationParameters.parametersHeader = [\n          ...operationParameters.parametersHeader,\n          parameter,\n        ];\n        break;\n      case 'path':\n        operationParameters.parametersPath = [\n          ...operationParameters.parametersPath,\n          parameter,\n        ];\n        break;\n      case 'query':\n        operationParameters.parametersQuery = [\n          ...operationParameters.parametersQuery,\n          parameter,\n        ];\n        break;\n    }\n\n    operationParameters.$refs = [\n      ...operationParameters.$refs,\n      ...parameter.$refs,\n    ];\n    operationParameters.imports = [\n      ...operationParameters.imports,\n      ...parameter.imports,\n    ];\n    operationParameters.parameters = [\n      ...operationParameters.parameters,\n      parameter,\n    ];\n  });\n\n  return operationParameters;\n};\n","/**\n * Sort list of values and ensure that required parameters are first so that we do not generate\n * invalid types. Optional parameters cannot be positioned after required ones.\n */\nexport function toSortedByRequired<\n  T extends { default?: unknown; isRequired: boolean },\n>(values: T[]): T[] {\n  return values.sort((a, b) => {\n    const aNeedsValue = a.isRequired && a.default === undefined;\n    const bNeedsValue = b.isRequired && b.default === undefined;\n    if (aNeedsValue && !bNeedsValue) return -1;\n    if (bNeedsValue && !aNeedsValue) return 1;\n    return 0;\n  });\n}\n","import type { Client } from '../../../types/client';\nimport type { OperationResponse } from '../../common/interfaces/client';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getRef } from '../../common/parser/getRef';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiResponse } from '../interfaces/OpenApiResponse';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModel } from './getModel';\n\nexport const getOperationResponse = ({\n  code,\n  openApi,\n  response,\n  types,\n}: {\n  code: OperationResponse['code'];\n  openApi: OpenApi;\n  response: OpenApiResponse;\n  types: Client['types'];\n}): OperationResponse => {\n  const operationResponse: OperationResponse = {\n    $refs: [],\n    base: code !== 204 ? 'unknown' : 'void',\n    code,\n    description: response.description || null,\n    enum: [],\n    enums: [],\n    export: 'generic',\n    imports: [],\n    in: 'response',\n    isDefinition: false,\n    isNullable: false,\n    isReadOnly: false,\n    isRequired: false,\n    link: null,\n    name: '',\n    properties: [],\n    responseTypes: [],\n    template: null,\n    type: code !== 204 ? 'unknown' : 'void',\n  };\n\n  let schema = response.schema;\n  if (schema) {\n    if (schema.$ref?.startsWith('#/responses/')) {\n      schema = getRef<OpenApiSchema>(openApi, schema);\n    }\n\n    if (schema.$ref) {\n      const model = getType({ type: schema.$ref });\n      operationResponse.export = 'reference';\n      operationResponse.type = model.type;\n      operationResponse.base = model.base;\n      operationResponse.template = model.template;\n      operationResponse.imports = [\n        ...operationResponse.imports,\n        ...model.imports,\n      ];\n      return operationResponse;\n    }\n\n    const model = getModel({ definition: schema, openApi, types });\n    operationResponse.export = model.export;\n    operationResponse.type = model.type;\n    operationResponse.base = model.base;\n    operationResponse.template = model.template;\n    operationResponse.link = model.link;\n    operationResponse.isReadOnly = model.isReadOnly;\n    operationResponse.isRequired = model.isRequired;\n    operationResponse.isNullable = model.isNullable;\n    operationResponse.format = model.format;\n    operationResponse.maximum = model.maximum;\n    operationResponse.exclusiveMaximum = model.exclusiveMaximum;\n    operationResponse.minimum = model.minimum;\n    operationResponse.exclusiveMinimum = model.exclusiveMinimum;\n    operationResponse.multipleOf = model.multipleOf;\n    operationResponse.maxLength = model.maxLength;\n    operationResponse.minLength = model.minLength;\n    operationResponse.maxItems = model.maxItems;\n    operationResponse.minItems = model.minItems;\n    operationResponse.uniqueItems = model.uniqueItems;\n    operationResponse.maxProperties = model.maxProperties;\n    operationResponse.minProperties = model.minProperties;\n    operationResponse.pattern = getPattern(model.pattern);\n    operationResponse.imports = [\n      ...operationResponse.imports,\n      ...model.imports,\n    ];\n    operationResponse.enum = [...operationResponse.enum, ...model.enum];\n    operationResponse.enums = [...operationResponse.enums, ...model.enums];\n    operationResponse.properties = [\n      ...operationResponse.properties,\n      ...model.properties,\n    ];\n    return operationResponse;\n  }\n\n  // We support basic properties from response headers, since both\n  // fetch and XHR client just support string types.\n  if (response.headers) {\n    for (const name in response.headers) {\n      operationResponse.in = 'header';\n      operationResponse.name = name;\n      operationResponse.type = 'string';\n      operationResponse.base = 'string';\n      return operationResponse;\n    }\n  }\n\n  return operationResponse;\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationResponse } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport {\n  parseResponseStatusCode,\n  sorterByResponseStatusCode,\n  tagResponseTypes,\n} from '../../common/parser/operation';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiResponse } from '../interfaces/OpenApiResponse';\nimport type { OpenApiResponses } from '../interfaces/OpenApiResponses';\nimport { getOperationResponse } from './getOperationResponse';\n\nexport const getOperationResponses = ({\n  openApi,\n  responses,\n  types,\n}: {\n  openApi: OpenApi;\n  responses: OpenApiResponses;\n  types: Client['types'];\n}): OperationResponse[] => {\n  let operationResponses: OperationResponse[] = [];\n\n  Object.entries(responses).forEach(([responseCode, responseOrReference]) => {\n    const code = parseResponseStatusCode(responseCode);\n    if (!code) {\n      return;\n    }\n\n    const response = getRef<OpenApiResponse>(openApi, responseOrReference);\n    const operationResponse = getOperationResponse({\n      code,\n      openApi,\n      response,\n      types,\n    });\n    operationResponses = [...operationResponses, operationResponse];\n  });\n\n  operationResponses = tagResponseTypes(operationResponses);\n\n  return operationResponses.sort(sorterByResponseStatusCode);\n};\n","import type { Client } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport type {\n  Operation,\n  OperationParameters,\n} from '../../common/interfaces/client';\nimport {\n  getOperationResponseHeader,\n  operationNameFn,\n} from '../../common/parser/operation';\nimport { toSortedByRequired } from '../../common/parser/sort';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiOperation } from '../interfaces/OpenApiOperation';\nimport { getOperationParameters } from './getOperationParameters';\nimport { getOperationResponses } from './getOperationResponses';\n\nexport const getOperation = ({\n  method,\n  op,\n  openApi,\n  pathParams,\n  types,\n  url,\n}: {\n  method: Lowercase<Operation['method']>;\n  op: OpenApiOperation;\n  openApi: OpenApi;\n  pathParams: OperationParameters;\n  types: Client['types'];\n  url: string;\n}): Operation => {\n  const operationWithoutName: Omit<Operation, 'name'> = {\n    $refs: [],\n    deprecated: op.deprecated === true,\n    description: op.description || null,\n    id: op.operationId || null,\n    imports: [],\n    method: method.toUpperCase() as Operation['method'],\n    parameters: [...pathParams.parameters],\n    parametersBody: pathParams.parametersBody,\n    parametersCookie: [...pathParams.parametersCookie],\n    parametersForm: [...pathParams.parametersForm],\n    parametersHeader: [...pathParams.parametersHeader],\n    parametersPath: [...pathParams.parametersPath],\n    parametersQuery: [...pathParams.parametersQuery],\n    path: url,\n    responseHeader: null,\n    responses: [],\n    summary: op.summary || null,\n    tags: op.tags || null,\n  };\n  const operation = {\n    ...operationWithoutName,\n    name: operationNameFn({\n      config: getConfig(),\n      method: operationWithoutName.method,\n      operationId: op.operationId,\n      path: operationWithoutName.path,\n    }),\n  };\n\n  if (op.parameters) {\n    const parameters = getOperationParameters({\n      openApi,\n      parameters: op.parameters,\n      types,\n    });\n    operation.$refs = [...operation.$refs, ...parameters.$refs];\n    operation.imports = [...operation.imports, ...parameters.imports];\n    operation.parameters = [...operation.parameters, ...parameters.parameters];\n    operation.parametersBody = parameters.parametersBody;\n    operation.parametersCookie = [\n      ...operation.parametersCookie,\n      ...parameters.parametersCookie,\n    ];\n    operation.parametersForm = [\n      ...operation.parametersForm,\n      ...parameters.parametersForm,\n    ];\n    operation.parametersHeader = [\n      ...operation.parametersHeader,\n      ...parameters.parametersHeader,\n    ];\n    operation.parametersPath = [\n      ...operation.parametersPath,\n      ...parameters.parametersPath,\n    ];\n    operation.parametersQuery = [\n      ...operation.parametersQuery,\n      ...parameters.parametersQuery,\n    ];\n  }\n\n  if (op.responses) {\n    operation.responses = getOperationResponses({\n      openApi,\n      responses: op.responses,\n      types,\n    });\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n\n    operation.responseHeader = getOperationResponseHeader(successResponses);\n\n    successResponses.forEach((response) => {\n      operation.$refs = [...operation.$refs, ...response.$refs];\n      operation.imports = [...operation.imports, ...response.imports];\n    });\n  }\n\n  operation.parameters = toSortedByRequired(operation.parameters);\n\n  return operation;\n};\n","import { getConfig } from '../../../utils/config';\nimport type { Client, Operation } from '../../common/interfaces/client';\nimport {\n  getOperationKey,\n  operationFilterFn,\n} from '../../common/parser/operation';\nimport { allowedServiceMethods } from '../../common/parser/service';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport { getOperationParameters } from './getOperationParameters';\nimport { getOperation } from './operation';\n\nexport const getOperations = ({\n  openApi,\n  types,\n}: {\n  openApi: OpenApi;\n  types: Client['types'];\n}): Operation[] => {\n  const operationIds = new Map<string, string>();\n  const operations: Operation[] = [];\n\n  for (const path in openApi.paths) {\n    const pathItem = openApi.paths[path]!;\n    const pathParameters = getOperationParameters({\n      openApi,\n      parameters: pathItem.parameters ?? [],\n      types,\n    });\n\n    for (const name in pathItem) {\n      const method = name as Lowercase<Operation['method']>;\n\n      const operationKey = getOperationKey({\n        method,\n        path,\n      });\n\n      if (allowedServiceMethods.includes(method)) {\n        const op = pathItem[method]!;\n\n        if (op.operationId) {\n          if (operationIds.has(op.operationId)) {\n            console.warn(\n              `❗️ Duplicate operationId: ${op.operationId} in ${operationKey}. Please ensure your operation IDs are unique. This behavior is not supported and will likely lead to unexpected results.`,\n            );\n          } else {\n            operationIds.set(op.operationId, operationKey);\n          }\n        }\n\n        if (\n          operationFilterFn({\n            config: getConfig(),\n            operationKey,\n          })\n        ) {\n          const operation = getOperation({\n            method,\n            op,\n            openApi,\n            pathParams: pathParameters,\n            types,\n            url: path,\n          });\n          operations.push(operation);\n        }\n      }\n    }\n  }\n\n  return operations;\n};\n","import type { OpenApi } from '../interfaces/OpenApi';\n\n/**\n * Get the base server url.\n * @param openApi\n */\nexport const getServer = (openApi: OpenApi): string => {\n  const scheme = openApi.schemes?.[0] || 'http';\n  const host = openApi.host;\n  const basePath = openApi.basePath || '';\n  const url = host ? `${scheme}://${host}${basePath}` : basePath;\n  return url.replace(/\\/$/g, '');\n};\n","import type { Client } from '../common/interfaces/client';\nimport { getServiceVersion } from '../common/parser/service';\nimport type { OpenApi } from './interfaces/OpenApi';\nimport { getModels } from './parser/getModels';\nimport { getOperations } from './parser/getOperations';\nimport { getServer } from './parser/getServer';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, operations and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport const parse = (openApi: OpenApi): Omit<Client, 'config'> => {\n  const version = getServiceVersion(openApi.info.version);\n  const server = getServer(openApi);\n  const { models, types } = getModels(openApi);\n  const operations = getOperations({ openApi, types });\n\n  return {\n    models,\n    operations,\n    server,\n    types,\n    version,\n  };\n};\n","import type { Model } from '../../common/interfaces/client';\nimport type { Dictionary } from '../../common/interfaces/Dictionary';\nimport { stripNamespace } from '../../common/parser/stripNamespace';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiDiscriminator } from '../interfaces/OpenApiDiscriminator';\n\nconst inverseDictionary = (map: Dictionary<string>): Dictionary<string> => {\n  const m2: Dictionary<string> = {};\n  for (const name in map) {\n    m2[map[name]!] = name;\n  }\n  return m2;\n};\n\nexport const findOneOfParentDiscriminator = (\n  openApi: OpenApi,\n  parent?: Model,\n): OpenApiDiscriminator | undefined => {\n  if (openApi.components && parent) {\n    for (const definitionName in openApi.components.schemas) {\n      if (openApi.components.schemas.hasOwnProperty(definitionName)) {\n        const schema = openApi.components.schemas[definitionName]!;\n        if (\n          schema.discriminator &&\n          schema.oneOf?.length &&\n          schema.oneOf.some(\n            (definition) =>\n              definition.$ref && stripNamespace(definition.$ref) == parent.name,\n          )\n        ) {\n          return schema.discriminator;\n        }\n      }\n    }\n  }\n  return undefined;\n};\n\nexport const mapPropertyValue = (\n  discriminator: OpenApiDiscriminator,\n  parent: Model,\n): string => {\n  if (discriminator.mapping) {\n    const mapping = inverseDictionary(discriminator.mapping);\n    const key = Object.keys(mapping).find(\n      (item) => stripNamespace(item) == parent.name,\n    );\n    if (key && mapping[key]) {\n      return mapping[key];\n    }\n  }\n  return parent.name;\n};\n","import type { Client } from '../../../types/client';\nimport { escapeName } from '../../../utils/escape';\nimport { unique } from '../../../utils/unique';\nimport type { Model } from '../../common/interfaces/client';\nimport { getDefault } from '../../common/parser/getDefault';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getType } from '../../common/parser/type';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport {\n  findOneOfParentDiscriminator,\n  mapPropertyValue,\n} from './discriminator';\nimport { isDefinitionNullable } from './inferType';\n\nexport const getAdditionalPropertiesModel = ({\n  debug,\n  definition,\n  getModel,\n  model,\n  openApi,\n  types,\n}: {\n  debug?: boolean;\n  definition: OpenApiSchema;\n  getModel: GetModelFn;\n  model: Model;\n  openApi: OpenApi;\n  types: Client['types'];\n}): Model => {\n  const ap =\n    typeof definition.additionalProperties === 'object'\n      ? definition.additionalProperties\n      : {};\n  const apModel = getModel({\n    debug,\n    definition: ap,\n    openApi,\n    parentDefinition: definition,\n    types,\n  });\n\n  if (ap.$ref) {\n    const apType = getType({ type: ap.$ref });\n    model.base = apType.base;\n    model.default = getDefault(definition, model);\n    model.export = 'dictionary';\n    model.imports.push(...apType.imports);\n    model.template = apType.template;\n    model.type = apType.type;\n    return model;\n  }\n\n  if (\n    definition.additionalProperties &&\n    definition.properties &&\n    Object.keys(definition.properties).length > 0\n  ) {\n    const additionalPropertiesType =\n      typeof definition.additionalProperties === 'object' &&\n      definition.additionalProperties.type &&\n      !Array.isArray(definition.additionalProperties.type)\n        ? definition.additionalProperties.type\n        : apModel.base;\n    const additionalProperties = [\n      getType({ type: additionalPropertiesType }).base,\n      ...model.properties.map((property) => property.base),\n    ];\n    apModel.base = additionalProperties.filter(unique).join(' | ');\n    apModel.default = getDefault(definition, model);\n    apModel.export = 'generic';\n    apModel.isRequired = definition.additionalProperties === true;\n    apModel.name = '[key: string]';\n    return apModel;\n  }\n\n  model.base = apModel.base;\n  model.default = getDefault(definition, model);\n  model.export = 'dictionary';\n  model.imports.push(...apModel.imports);\n  model.link = apModel;\n  model.template = apModel.template;\n  model.type = apModel.type;\n  return model;\n};\n\nexport const getModelProperties = ({\n  debug,\n  definition,\n  getModel,\n  openApi,\n  parent,\n  types,\n}: {\n  debug?: boolean;\n  definition: OpenApiSchema;\n  getModel: GetModelFn;\n  openApi: OpenApi;\n  parent?: Model;\n  types: Client['types'];\n}): Model[] => {\n  let models: Model[] = [];\n  const discriminator = findOneOfParentDiscriminator(openApi, parent);\n\n  Object.entries(definition.properties ?? {}).forEach(\n    ([propertyName, property]) => {\n      const propertyRequired = Boolean(\n        definition.required?.includes(propertyName),\n      );\n\n      const propertyValues: Omit<\n        Model,\n        | '$refs'\n        | 'base'\n        | 'enum'\n        | 'enums'\n        | 'export'\n        | 'imports'\n        | 'isNullable'\n        | 'link'\n        | 'properties'\n        | 'template'\n        | 'type'\n      > = {\n        default: property.default,\n        deprecated: property.deprecated === true,\n        description: property.description || null,\n        exclusiveMaximum: property.exclusiveMaximum,\n        exclusiveMinimum: property.exclusiveMinimum,\n        format:\n          property.type === 'array'\n            ? property.items?.format ?? property.format\n            : property.format,\n        in: '',\n        isDefinition: false,\n        isReadOnly: property.readOnly === true,\n        isRequired: propertyRequired,\n        maxItems: property.maxItems,\n        maxLength: property.maxLength,\n        maxProperties: property.maxProperties,\n        maximum: property.maximum,\n        minItems: property.minItems,\n        minLength: property.minLength,\n        minProperties: property.minProperties,\n        minimum: property.minimum,\n        multipleOf: property.multipleOf,\n        name: escapeName(propertyName),\n        pattern: getPattern(property.pattern),\n        uniqueItems: property.uniqueItems,\n      };\n\n      if (parent && discriminator?.propertyName == propertyName) {\n        models = [\n          ...models,\n          {\n            ...propertyValues,\n            $refs: [],\n            base: `'${mapPropertyValue(discriminator, parent)}'`,\n            enum: [],\n            enums: [],\n            export: 'reference',\n            imports: [],\n            isNullable: isDefinitionNullable(property),\n            link: null,\n            properties: [],\n            template: null,\n            type: 'string',\n          },\n        ];\n        return;\n      }\n\n      if (property.$ref) {\n        const model = getType({ type: property.$ref });\n        models = [\n          ...models,\n          {\n            ...propertyValues,\n            $refs: model.$refs,\n            base: model.base,\n            enum: [],\n            enums: [],\n            export: 'reference',\n            imports: model.imports,\n            isNullable: model.isNullable || isDefinitionNullable(property),\n            link: null,\n            properties: [],\n            template: model.template,\n            type: model.type,\n          },\n        ];\n        return;\n      }\n\n      const model = getModel({\n        debug,\n        definition: property,\n        initialValues: propertyValues,\n        openApi,\n        parentDefinition: definition,\n        types,\n      });\n      model.isNullable = model.isNullable || isDefinitionNullable(property);\n      models = [...models, model];\n    },\n  );\n\n  return models;\n};\n","import type { Client } from '../../../types/client';\nimport type { Model } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport { getType } from '../../common/parser/type';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport const getRequiredPropertiesFromComposition = ({\n  debug,\n  definitions,\n  getModel,\n  openApi,\n  required,\n  types,\n}: {\n  debug?: boolean;\n  definitions: OpenApiSchema[];\n  getModel: GetModelFn;\n  openApi: OpenApi;\n  required: string[];\n  types: Client['types'];\n}): Model[] => {\n  const requiredProperties = definitions\n    .reduce((properties, definition) => {\n      if (definition.$ref) {\n        const type = getType({ type: definition.$ref });\n        // avoid circular references if two refs reference each other\n        // if (types[type.base] && types[type.base].$ref === definition.$ref) {\n        //   const schema = getRef<OpenApiSchema>(openApi, definition);\n        //   return [...properties]\n        // }\n\n        const meta = {\n          $ref: definition.$ref,\n          name: type.base,\n        };\n        types[type.base] = meta;\n        const schema = getRef<OpenApiSchema>(openApi, definition);\n        return [\n          ...properties,\n          ...getModel({\n            debug,\n            definition: schema,\n            meta,\n            openApi,\n            types,\n          }).properties,\n        ];\n      }\n\n      return [\n        ...properties,\n        ...getModel({\n          debug,\n          definition,\n          openApi,\n          parentDefinition: definition,\n          types,\n        }).properties,\n      ];\n    }, [] as Model[])\n    .filter(\n      (property) => !property.isRequired && required.includes(property.name),\n    )\n    .map((property) => ({\n      ...property,\n      isRequired: true,\n    }));\n\n  return requiredProperties;\n};\n","import type { Client } from '../../../types/client';\nimport type { Model, ModelComposition } from '../../common/interfaces/client';\nimport type { GetModelFn } from '../interfaces/Model';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModelProperties } from './getModelProperties';\nimport { getRequiredPropertiesFromComposition } from './getRequiredPropertiesFromComposition';\n\ntype Composition = {\n  definitions: OpenApiSchema[];\n  type: ModelComposition['export'];\n};\n\nexport const findModelComposition = (\n  definition: OpenApiSchema,\n): Composition | undefined => {\n  const compositions: ReadonlyArray<{\n    definitions: Composition['definitions'] | undefined;\n    type: Composition['type'];\n  }> = [\n    {\n      definitions: definition.allOf,\n      type: 'all-of',\n    },\n    {\n      definitions: definition.anyOf,\n      type: 'any-of',\n    },\n    {\n      definitions: definition.oneOf,\n      type: 'one-of',\n    },\n  ];\n  return compositions.find(\n    (composition) => composition.definitions?.length,\n  ) as ReturnType<typeof findModelComposition>;\n};\n\nexport const getModelComposition = ({\n  debug,\n  definition,\n  definitions,\n  getModel,\n  model,\n  openApi,\n  type,\n  types,\n}: Composition &\n  Pick<Client, 'types'> & {\n    debug?: boolean;\n    definition: OpenApiSchema;\n    getModel: GetModelFn;\n    model: Model;\n    openApi: OpenApi;\n  }): ModelComposition => {\n  const composition: ModelComposition = {\n    $refs: model.$refs,\n    enums: model.enums,\n    export: type,\n    imports: model.imports,\n    properties: model.properties,\n  };\n\n  let properties: Model[] = [];\n\n  definitions\n    .map((def) => {\n      const modelFromDef = getModel({\n        debug,\n        definition: def,\n        openApi,\n        parentDefinition: definition,\n        types,\n      });\n      return modelFromDef;\n    })\n    .forEach((model) => {\n      composition.$refs = [...composition.$refs, ...model.$refs];\n      composition.imports = [...composition.imports, ...model.imports];\n      composition.enums = [...composition.enums, ...model.enums];\n      composition.properties = [...composition.properties, model];\n    });\n\n  if (definition.required && type === 'all-of') {\n    const requiredProperties = getRequiredPropertiesFromComposition({\n      debug,\n      definitions,\n      getModel,\n      openApi,\n      required: definition.required,\n      types,\n    });\n    requiredProperties.forEach((requiredProperty) => {\n      composition.$refs = [...composition.$refs, ...requiredProperty.$refs];\n      composition.imports = [\n        ...composition.imports,\n        ...requiredProperty.imports,\n      ];\n      composition.enums = [...composition.enums, ...requiredProperty.enums];\n    });\n    properties = [...properties, ...requiredProperties];\n  }\n\n  if (definition.properties) {\n    const modelProperties = getModelProperties({\n      definition,\n      getModel,\n      openApi,\n      types,\n    });\n    modelProperties.forEach((modelProperty) => {\n      composition.$refs = [...composition.$refs, ...modelProperty.$refs];\n      composition.imports = [...composition.imports, ...modelProperty.imports];\n      composition.enums = [...composition.enums, ...modelProperty.enums];\n      if (modelProperty.export === 'enum') {\n        composition.enums = [...composition.enums, modelProperty];\n      }\n    });\n    properties = [...properties, ...modelProperties];\n  }\n\n  if (properties.length) {\n    const foundComposition = findModelComposition(definition);\n    if (foundComposition) {\n      const propertiesProperty: Model = {\n        $refs: [],\n        base: 'unknown',\n        description: '',\n        enum: [],\n        enums: [],\n        export: 'interface',\n        imports: [],\n        in: '',\n        isDefinition: false,\n        isNullable: false,\n        isReadOnly: false,\n        isRequired: false,\n        link: null,\n        name: 'properties',\n        properties,\n        template: null,\n        type: 'unknown',\n      };\n\n      if (foundComposition.type === 'one-of') {\n        composition.properties = [\n          {\n            ...composition,\n            base: '',\n            description: null,\n            enum: [],\n            in: '',\n            isDefinition: false,\n            isNullable: false,\n            isReadOnly: false,\n            isRequired: true,\n            link: null,\n            name: '',\n            template: null,\n            type: '',\n          },\n          propertiesProperty,\n        ];\n        composition.export = 'all-of';\n      } else {\n        composition.properties = [\n          ...composition.properties,\n          propertiesProperty,\n        ];\n      }\n    }\n  }\n\n  return composition;\n};\n","import type { Client } from '../../../types/client';\nimport { enumMeta } from '../../../utils/enum';\nimport type { Model, ModelMeta } from '../../common/interfaces/client';\nimport { getDefault } from '../../common/parser/getDefault';\nimport { getEnums } from '../../common/parser/getEnums';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport {\n  findModelComposition,\n  getModelComposition,\n} from './getModelComposition';\nimport {\n  getAdditionalPropertiesModel,\n  getModelProperties,\n} from './getModelProperties';\nimport {\n  getDefinitionTypes,\n  inferType,\n  isDefinitionNullable,\n} from './inferType';\n\nexport const getModel = ({\n  debug,\n  definition,\n  initialValues = {},\n  isDefinition = false,\n  meta,\n  openApi,\n  parentDefinition = null,\n  types,\n}: Pick<Client, 'types'> & {\n  debug?: boolean;\n  definition: OpenApiSchema;\n  /**\n   * Pass through initial model values\n   */\n  initialValues?: Partial<Model>;\n  isDefinition?: boolean;\n  meta?: ModelMeta;\n  openApi: OpenApi;\n  parentDefinition?: OpenApiSchema | null;\n}): Model => {\n  const definitionTypes = getDefinitionTypes(definition);\n  const inferredType = inferType(definition, definitionTypes);\n\n  const model: Model = {\n    $refs: [],\n    base: 'unknown',\n    deprecated: Boolean(definition.deprecated),\n    description: definition.description || null,\n    enum: [],\n    enums: [],\n    exclusiveMaximum: definition.exclusiveMaximum,\n    exclusiveMinimum: definition.exclusiveMinimum,\n    export: 'interface',\n    format: definition.format,\n    imports: [],\n    in: '',\n    isDefinition,\n    isNullable: isDefinitionNullable(definition),\n    isReadOnly: definition.readOnly === true,\n    isRequired: false,\n    link: null,\n    maxItems: definition.maxItems,\n    maxLength: definition.maxLength,\n    maxProperties: definition.maxProperties,\n    maximum: definition.maximum,\n    meta,\n    minItems: definition.minItems,\n    minLength: definition.minLength,\n    minProperties: definition.minProperties,\n    minimum: definition.minimum,\n    multipleOf: definition.multipleOf,\n    name: meta?.name ?? '',\n    pattern: getPattern(definition.pattern),\n    properties: [],\n    template: null,\n    type: 'unknown',\n    uniqueItems: definition.uniqueItems,\n    ...initialValues,\n  };\n\n  if (definition.$ref) {\n    const definitionRef = getType({\n      debug,\n      type: definition.$ref,\n    });\n    model.$refs = [...model.$refs, decodeURIComponent(definition.$ref)];\n    model.base = definitionRef.base;\n    model.export = 'reference';\n    model.imports = [...model.imports, ...definitionRef.imports];\n    model.template = definitionRef.template;\n    model.type = definitionRef.type;\n    model.default = getDefault(definition, model);\n    return model;\n  }\n\n  if (inferredType === 'enum') {\n    const enums = getEnums(definition, definition.enum);\n    if (enums.length) {\n      model.base = 'string';\n      model.enum = [...model.enum, ...enums];\n      model.export = 'enum';\n      model.type = 'string';\n      model.default = getDefault(definition, model);\n      if (!model.meta) {\n        model.meta = enumMeta(model);\n      }\n      return model;\n    }\n  }\n\n  if (\n    definitionTypes.includes('array') &&\n    (definition.items || definition.prefixItems)\n  ) {\n    if (definition.prefixItems) {\n      const arrayItems = definition.prefixItems.map((item) =>\n        getModel({\n          definition: item,\n          openApi,\n          parentDefinition: definition,\n          types,\n        }),\n      );\n\n      model.export = 'array';\n      model.$refs = [\n        ...model.$refs,\n        ...arrayItems.reduce(\n          (acc, m) => [...acc, ...m.$refs],\n          [] as Model['$refs'],\n        ),\n      ];\n      model.imports = [\n        ...model.imports,\n        ...arrayItems.reduce(\n          (acc, m) => [...acc, ...m.imports],\n          [] as Model['imports'],\n        ),\n      ];\n      model.link = arrayItems;\n      model.default = getDefault(definition, model);\n      return model;\n    }\n\n    if (!definition.items) {\n      return model;\n    }\n\n    if (definition.items.$ref) {\n      const arrayItems = getType({ type: definition.items.$ref });\n      model.$refs = [...model.$refs, decodeURIComponent(definition.items.$ref)];\n      model.base = arrayItems.base;\n      model.export = 'array';\n      model.imports = [...model.imports, ...arrayItems.imports];\n      model.template = arrayItems.template;\n      model.type = arrayItems.type;\n      model.default = getDefault(definition, model);\n      return model;\n    }\n\n    if (definition.items.anyOf && parentDefinition && parentDefinition.type) {\n      const foundComposition = findModelComposition(parentDefinition);\n      if (\n        foundComposition &&\n        foundComposition.definitions.some(\n          (definition) => !getDefinitionTypes(definition).includes('array'),\n        )\n      ) {\n        return getModel({\n          definition: definition.items,\n          openApi,\n          parentDefinition: definition,\n          types,\n        });\n      }\n    }\n\n    /**\n     * if items are a plain array, infer any-of composition\n     * {@link} https://github.com/ferdikoomen/openapi-typescript-codegen/issues/2062\n     */\n    const arrayItemsDefinition: OpenApiSchema = Array.isArray(definition.items)\n      ? {\n          anyOf: definition.items,\n        }\n      : definition.items;\n    const arrayItems = getModel({\n      definition: arrayItemsDefinition,\n      openApi,\n      parentDefinition: definition,\n      types,\n    });\n    model.base = arrayItems.base;\n    model.export = 'array';\n    model.$refs = [...model.$refs, ...arrayItems.$refs];\n    model.imports = [...model.imports, ...arrayItems.imports];\n    model.link = arrayItems;\n    model.template = arrayItems.template;\n    model.type = arrayItems.type;\n    model.default = getDefault(definition, model);\n    return model;\n  }\n\n  const foundComposition = findModelComposition(definition);\n  if (foundComposition) {\n    const composition = getModelComposition({\n      ...foundComposition,\n      debug,\n      definition,\n      getModel,\n      model,\n      openApi,\n      types,\n    });\n    const result = { ...model, ...composition };\n    return result;\n  }\n\n  if (\n    definitionTypes.includes('object') ||\n    definition.properties ||\n    definition.additionalProperties\n  ) {\n    if (\n      definition.properties &&\n      (Object.keys(definition.properties).length > 0 ||\n        !definition.additionalProperties)\n    ) {\n      model.base = 'unknown';\n      model.export = 'interface';\n      model.type = 'unknown';\n      model.default = getDefault(definition, model);\n\n      const modelProperties = getModelProperties({\n        debug,\n        definition,\n        getModel,\n        openApi,\n        parent: model,\n        types,\n      });\n      modelProperties.forEach((modelProperty) => {\n        model.$refs = [...model.$refs, ...modelProperty.$refs];\n        model.enums = [...model.enums, ...modelProperty.enums];\n        model.imports = [...model.imports, ...modelProperty.imports];\n        model.properties = [...model.properties, modelProperty];\n        if (modelProperty.export === 'enum') {\n          model.enums = [...model.enums, modelProperty];\n        }\n      });\n\n      if (definition.additionalProperties) {\n        const modelProperty = getAdditionalPropertiesModel({\n          debug,\n          definition,\n          getModel,\n          model,\n          openApi,\n          types,\n        });\n        model.properties = [...model.properties, modelProperty];\n      }\n\n      // objects with no explicit properties accept any key/value pair\n      if (\n        !model.properties.length &&\n        model.base === 'unknown' &&\n        model.type === 'unknown'\n      ) {\n        model.export = 'dictionary';\n        if (!model.name) {\n          model.name = '[key: string]';\n        }\n      }\n\n      return model;\n    }\n\n    const result = getAdditionalPropertiesModel({\n      debug,\n      definition,\n      getModel,\n      model,\n      openApi,\n      types,\n    });\n    return result;\n  }\n\n  if (definition.const !== undefined) {\n    const definitionConst = definition.const;\n    const modelConst =\n      typeof definitionConst === 'string'\n        ? `\"${definitionConst}\"`\n        : `${definitionConst}`;\n    model.base = modelConst;\n    model.export = 'const';\n    model.type = modelConst;\n    return model;\n  }\n\n  // If the schema has a type than it can be a basic or generic type.\n  if (definitionTypes.length) {\n    const definitionType = getType({\n      format: definition.format,\n      type: definition.type,\n    });\n    model.base = definitionType.base;\n    model.export = 'generic';\n    model.$refs = [...model.$refs, ...definitionType.$refs];\n    model.imports = [...model.imports, ...definitionType.imports];\n    model.isNullable = definitionType.isNullable || model.isNullable;\n    model.template = definitionType.template;\n    model.type = definitionType.type;\n    model.default = getDefault(definition, model);\n    return model;\n  }\n\n  return model;\n};\n","import type { OpenApiParameter } from '../interfaces/OpenApiParameter';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport const getParameterSchema = (\n  definition: OpenApiParameter,\n): OpenApiSchema | undefined => {\n  if (definition.schema) {\n    return definition.schema;\n  }\n\n  if (definition.content) {\n    // treat every media type the same for now, types should be modified to\n    // preserve this data so client knows which headers to use and how to\n    // parse response bodies\n    const contents = Object.entries(definition.content);\n    for (const [key, mediaTypeObject] of contents) {\n      if (mediaTypeObject.schema) {\n        const mediaType = key as keyof Required<OpenApiParameter>['content'];\n        return definition.content[mediaType].schema;\n      }\n    }\n  }\n};\n","import type { Client } from '../../../types/client';\nimport { getParametersMeta, getSchemasMeta } from '../../../utils/meta';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport { getModel } from './getModel';\nimport { getParameterSchema } from './parameter';\n\nexport const getModels = (\n  openApi: OpenApi,\n): Pick<Client, 'models' | 'types'> => {\n  const types: Client['types'] = {};\n  let models: Client['models'] = [];\n\n  if (!openApi.components) {\n    return {\n      models,\n      types,\n    };\n  }\n\n  Object.entries(openApi.components.schemas ?? {}).forEach(\n    ([definitionName, definition]) => {\n      const meta = getSchemasMeta(definitionName);\n      types[meta.name] = meta;\n      const model = getModel({\n        definition,\n        isDefinition: true,\n        meta,\n        openApi,\n        types,\n      });\n      models = [...models, model];\n    },\n  );\n\n  Object.entries(openApi.components.parameters ?? {}).forEach(\n    ([definitionName, definition]) => {\n      const schema = getParameterSchema(definition);\n      if (!schema) {\n        return;\n      }\n\n      const meta = getParametersMeta(definitionName);\n      types[meta.name] = meta;\n      const model = getModel({\n        definition: schema,\n        isDefinition: true,\n        meta,\n        openApi,\n        types,\n      });\n      model.deprecated = definition.deprecated;\n      model.description = definition.description || null;\n      models = [...models, model];\n    },\n  );\n\n  return {\n    models,\n    types,\n  };\n};\n","import type { Client } from '../../../types/client';\nimport { refParametersPartial } from '../../../utils/const';\nimport { enumMeta } from '../../../utils/enum';\nimport type { OperationParameter } from '../../common/interfaces/client';\nimport { getDefault } from '../../common/parser/getDefault';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getRef } from '../../common/parser/getRef';\nimport { operationParameterNameFn } from '../../common/parser/operation';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiParameter } from '../interfaces/OpenApiParameter';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getModel } from './getModel';\nimport { isDefinitionNullable } from './inferType';\nimport { getParameterSchema } from './parameter';\n\nexport const getOperationParameter = ({\n  openApi,\n  parameter,\n  types,\n}: {\n  openApi: OpenApi;\n  parameter: OpenApiParameter;\n  types: Client['types'];\n}): OperationParameter => {\n  const operationParameterWithoutName: Omit<OperationParameter, 'name'> = {\n    $refs: [],\n    base: 'unknown',\n    deprecated: parameter.deprecated === true,\n    description: parameter.description || null,\n    enum: [],\n    enums: [],\n    export: 'interface',\n    imports: [],\n    in: parameter.in,\n    isDefinition: false,\n    isNullable: isDefinitionNullable(parameter),\n    isReadOnly: false,\n    isRequired: parameter.required === true,\n    link: null,\n    mediaType: null,\n    prop: parameter.name,\n    properties: [],\n    template: null,\n    type: 'unknown',\n  };\n  let operationParameter = {\n    ...operationParameterWithoutName,\n    name: operationParameterNameFn(operationParameterWithoutName),\n  };\n\n  if (parameter.$ref) {\n    const model = getType({ type: parameter.$ref });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      export: 'reference',\n      imports: [...operationParameter.imports, ...model.imports],\n      template: model.template,\n      type: model.type,\n    };\n    return operationParameter;\n  }\n\n  let schema = getParameterSchema(parameter);\n  if (schema) {\n    if (schema.$ref?.startsWith(refParametersPartial)) {\n      schema = getRef<OpenApiSchema>(openApi, schema);\n    }\n\n    if (schema.$ref) {\n      const model = getType({ type: schema.$ref });\n      operationParameter = {\n        ...operationParameter,\n        $refs: [...operationParameter.$refs, ...model.$refs],\n        base: model.base,\n        export: 'reference',\n        imports: [...operationParameter.imports, ...model.imports],\n        template: model.template,\n        type: model.type,\n      };\n      operationParameter.default = getDefault(schema);\n      return operationParameter;\n    }\n\n    const model = getModel({ definition: schema, openApi, types });\n    operationParameter = {\n      ...operationParameter,\n      $refs: [...operationParameter.$refs, ...model.$refs],\n      base: model.base,\n      enum: [...operationParameter.enum, ...model.enum],\n      enums: [...operationParameter.enums, ...model.enums],\n      exclusiveMaximum: model.exclusiveMaximum,\n      exclusiveMinimum: model.exclusiveMinimum,\n      export: model.export,\n      format: model.format,\n      imports: [...operationParameter.imports, ...model.imports],\n      isNullable: operationParameter.isNullable || model.isNullable,\n      isReadOnly: model.isReadOnly,\n      isRequired: operationParameter.isRequired || model.isRequired,\n      link: model.link,\n      maxItems: model.maxItems,\n      maxLength: model.maxLength,\n      maxProperties: model.maxProperties,\n      maximum: model.maximum,\n      minItems: model.minItems,\n      minLength: model.minLength,\n      minProperties: model.minProperties,\n      minimum: model.minimum,\n      multipleOf: model.multipleOf,\n      pattern: getPattern(model.pattern),\n      properties: [...operationParameter.properties, ...model.properties],\n      template: model.template,\n      type: model.type,\n      uniqueItems: model.uniqueItems,\n    };\n    if (\n      (operationParameter.enum.length || operationParameter.enums.length) &&\n      !operationParameter.meta\n    ) {\n      operationParameter.meta = enumMeta(operationParameter);\n    }\n    operationParameter.default = model.default;\n    return operationParameter;\n  }\n\n  return operationParameter;\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationParameters } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport { operationParameterFilterFn } from '../../common/parser/operation';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiParameter } from '../interfaces/OpenApiParameter';\nimport { getOperationParameter } from './getOperationParameter';\n\nconst allowedIn = ['cookie', 'formData', 'header', 'path', 'query'] as const;\n\nexport const getOperationParameters = ({\n  openApi,\n  parameters,\n  types,\n}: {\n  openApi: OpenApi;\n  parameters: OpenApiParameter[];\n  types: Client['types'];\n}): OperationParameters => {\n  const operationParameters: OperationParameters = {\n    $refs: [],\n    imports: [],\n    parameters: [],\n    parametersBody: null,\n    parametersCookie: [],\n    parametersForm: [],\n    parametersHeader: [],\n    parametersPath: [],\n    parametersQuery: [], // not used in v3 -> @see requestBody\n  };\n\n  parameters.forEach((parameterOrReference) => {\n    const parameterDef = getRef<OpenApiParameter>(\n      openApi,\n      parameterOrReference,\n    );\n    const parameter = getOperationParameter({\n      openApi,\n      parameter: parameterDef,\n      types,\n    });\n\n    const skip = !operationParameterFilterFn(parameter);\n    if (!allowedIn.includes(parameterDef.in) || skip) {\n      return;\n    }\n\n    switch (parameterDef.in) {\n      case 'cookie':\n        operationParameters.parametersCookie = [\n          ...operationParameters.parametersCookie,\n          parameter,\n        ];\n        break;\n      case 'formData':\n        operationParameters.parametersForm = [\n          ...operationParameters.parametersForm,\n          parameter,\n        ];\n        break;\n      case 'header':\n        operationParameters.parametersHeader = [\n          ...operationParameters.parametersHeader,\n          parameter,\n        ];\n        break;\n      case 'path':\n        operationParameters.parametersPath = [\n          ...operationParameters.parametersPath,\n          parameter,\n        ];\n        break;\n      case 'query':\n        operationParameters.parametersQuery = [\n          ...operationParameters.parametersQuery,\n          parameter,\n        ];\n        break;\n    }\n\n    operationParameters.$refs = [\n      ...operationParameters.$refs,\n      ...parameter.$refs,\n    ];\n    operationParameters.imports = [\n      ...operationParameters.imports,\n      ...parameter.imports,\n    ];\n    operationParameters.parameters = [\n      ...operationParameters.parameters,\n      parameter,\n    ];\n  });\n\n  return operationParameters;\n};\n","import type { Dictionary } from '../../common/interfaces/Dictionary';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiMediaType } from '../interfaces/OpenApiMediaType';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\n\nexport interface Content {\n  mediaType: string;\n  schema: OpenApiSchema;\n}\n\nconst BASIC_MEDIA_TYPES = [\n  'application/json-patch+json',\n  'application/json',\n  'application/ld+json',\n  'application/x-www-form-urlencoded',\n  'multipart/batch',\n  'multipart/form-data',\n  'multipart/mixed',\n  'multipart/related',\n  'text/json',\n  'text/plain',\n];\n\nexport const getContent = (\n  openApi: OpenApi,\n  content: Dictionary<OpenApiMediaType>,\n): Content | undefined => {\n  const basicMediaTypeWithSchema = Object.keys(content)\n    .filter((mediaType) => {\n      const cleanMediaType = mediaType.split(';')[0]!.trim();\n      return BASIC_MEDIA_TYPES.includes(cleanMediaType);\n    })\n    .find((mediaType) => Boolean(content[mediaType]?.schema));\n\n  if (basicMediaTypeWithSchema) {\n    return {\n      mediaType: basicMediaTypeWithSchema,\n      schema: content[basicMediaTypeWithSchema]!.schema as OpenApiSchema,\n    };\n  }\n\n  const firstMediaTypeWithSchema = Object.keys(content).find((mediaType) =>\n    Boolean(content[mediaType]?.schema),\n  );\n\n  if (firstMediaTypeWithSchema) {\n    return {\n      mediaType: firstMediaTypeWithSchema,\n      schema: content[firstMediaTypeWithSchema]!.schema as OpenApiSchema,\n    };\n  }\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationParameter } from '../../common/interfaces/client';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiRequestBody } from '../interfaces/OpenApiRequestBody';\nimport { getContent } from './getContent';\nimport { getModel } from './getModel';\n\nexport const getOperationRequestBody = ({\n  body,\n  debug,\n  openApi,\n  types,\n}: {\n  body: OpenApiRequestBody;\n  debug?: boolean;\n  openApi: OpenApi;\n  types: Client['types'];\n}): OperationParameter => {\n  const name = body['x-body-name'] ?? 'requestBody';\n\n  const requestBody: OperationParameter = {\n    $refs: [],\n    base: 'unknown',\n    default: undefined,\n    description: body.description || null,\n    enum: [],\n    enums: [],\n    export: 'interface',\n    imports: [],\n    in: 'body',\n    isDefinition: false,\n    isNullable: body.nullable === true,\n    isReadOnly: false,\n    isRequired: body.required === true,\n    link: null,\n    mediaType: null,\n    name,\n    prop: name,\n    properties: [],\n    template: null,\n    type: 'unknown',\n  };\n\n  if (!body.content) {\n    return requestBody;\n  }\n\n  const content = getContent(openApi, body.content);\n  if (!content) {\n    return requestBody;\n  }\n\n  requestBody.mediaType = content.mediaType;\n\n  switch (requestBody.mediaType) {\n    case 'application/x-www-form-urlencoded':\n    case 'multipart/form-data':\n      requestBody.in = 'formData';\n      requestBody.name = 'formData';\n      requestBody.prop = 'formData';\n      break;\n  }\n\n  if (content.schema.$ref) {\n    const model = getType({ type: content.schema.$ref });\n    requestBody.export = 'reference';\n    requestBody.type = model.type;\n    requestBody.base = model.base;\n    requestBody.template = model.template;\n    requestBody.$refs = [...requestBody.$refs, ...model.$refs];\n    requestBody.imports = [...requestBody.imports, ...model.imports];\n    return requestBody;\n  }\n\n  const model = getModel({\n    debug,\n    definition: content.schema,\n    openApi,\n    types,\n  });\n  requestBody.$refs = [...requestBody.$refs, ...model.$refs];\n  requestBody.base = model.base;\n  requestBody.enum = [...requestBody.enum, ...model.enum];\n  requestBody.enums = [...requestBody.enums, ...model.enums];\n  requestBody.exclusiveMaximum = model.exclusiveMaximum;\n  requestBody.exclusiveMinimum = model.exclusiveMinimum;\n  requestBody.export = model.export;\n  requestBody.format = model.format;\n  requestBody.imports = [...requestBody.imports, ...model.imports];\n  requestBody.isNullable = requestBody.isNullable || model.isNullable;\n  requestBody.isReadOnly = model.isReadOnly;\n  requestBody.isRequired = requestBody.isRequired || model.isRequired;\n  requestBody.link = model.link;\n  requestBody.maximum = model.maximum;\n  requestBody.maxItems = model.maxItems;\n  requestBody.maxLength = model.maxLength;\n  requestBody.maxProperties = model.maxProperties;\n  requestBody.minimum = model.minimum;\n  requestBody.minItems = model.minItems;\n  requestBody.minLength = model.minLength;\n  requestBody.minProperties = model.minProperties;\n  requestBody.multipleOf = model.multipleOf;\n  requestBody.pattern = getPattern(model.pattern);\n  requestBody.properties = [...requestBody.properties, ...model.properties];\n  requestBody.template = model.template;\n  requestBody.type = model.type;\n  requestBody.uniqueItems = model.uniqueItems;\n  return requestBody;\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationResponse } from '../../common/interfaces/client';\nimport { getPattern } from '../../common/parser/getPattern';\nimport { getRef } from '../../common/parser/getRef';\nimport { getType } from '../../common/parser/type';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiResponse } from '../interfaces/OpenApiResponse';\nimport type { OpenApiSchema } from '../interfaces/OpenApiSchema';\nimport { getContent } from './getContent';\nimport { getModel } from './getModel';\n\nexport const getOperationResponse = ({\n  code,\n  openApi,\n  response,\n  types,\n}: {\n  code: OperationResponse['code'];\n  openApi: OpenApi;\n  response: OpenApiResponse;\n  types: Client['types'];\n}): OperationResponse => {\n  const operationResponse: OperationResponse = {\n    $refs: [],\n    base: code !== 204 ? 'unknown' : 'void',\n    code,\n    description: response.description || null,\n    enum: [],\n    enums: [],\n    export: 'generic',\n    imports: [],\n    in: 'response',\n    isDefinition: false,\n    isNullable: false,\n    isReadOnly: false,\n    isRequired: false,\n    link: null,\n    name: '',\n    properties: [],\n    responseTypes: [],\n    template: null,\n    type: code !== 204 ? 'unknown' : 'void',\n  };\n\n  if (response.content) {\n    const content = getContent(openApi, response.content);\n    if (content) {\n      if (content.schema.$ref?.startsWith('#/components/responses/')) {\n        content.schema = getRef<OpenApiSchema>(openApi, content.schema);\n      }\n\n      if (content.schema.$ref) {\n        const model = getType({ type: content.schema.$ref });\n        operationResponse.base = model.base;\n        operationResponse.export = 'reference';\n        operationResponse.$refs = [...operationResponse.$refs, ...model.$refs];\n        operationResponse.imports = [\n          ...operationResponse.imports,\n          ...model.imports,\n        ];\n        operationResponse.template = model.template;\n        operationResponse.type = model.type;\n        return operationResponse;\n      }\n\n      const model = getModel({ definition: content.schema, openApi, types });\n      operationResponse.export = model.export;\n      operationResponse.type = model.type;\n      operationResponse.base = model.base;\n      operationResponse.template = model.template;\n      operationResponse.link = model.link;\n      operationResponse.isReadOnly = model.isReadOnly;\n      operationResponse.isRequired = model.isRequired;\n      operationResponse.isNullable = model.isNullable;\n      operationResponse.format = model.format;\n      operationResponse.maximum = model.maximum;\n      operationResponse.exclusiveMaximum = model.exclusiveMaximum;\n      operationResponse.minimum = model.minimum;\n      operationResponse.exclusiveMinimum = model.exclusiveMinimum;\n      operationResponse.multipleOf = model.multipleOf;\n      operationResponse.maxLength = model.maxLength;\n      operationResponse.minLength = model.minLength;\n      operationResponse.maxItems = model.maxItems;\n      operationResponse.minItems = model.minItems;\n      operationResponse.uniqueItems = model.uniqueItems;\n      operationResponse.maxProperties = model.maxProperties;\n      operationResponse.minProperties = model.minProperties;\n      operationResponse.pattern = getPattern(model.pattern);\n      operationResponse.$refs = [...operationResponse.$refs, ...model.$refs];\n      operationResponse.imports = [\n        ...operationResponse.imports,\n        ...model.imports,\n      ];\n      operationResponse.enum = [...operationResponse.enum, ...model.enum];\n      operationResponse.enums = [...operationResponse.enums, ...model.enums];\n      operationResponse.properties = [\n        ...operationResponse.properties,\n        ...model.properties,\n      ];\n      return operationResponse;\n    }\n  }\n\n  // We support basic properties from response headers, since both\n  // fetch and XHR client just support string types.\n  if (response.headers) {\n    for (const name in response.headers) {\n      operationResponse.in = 'header';\n      operationResponse.name = name;\n      operationResponse.type = 'string';\n      operationResponse.base = 'string';\n      return operationResponse;\n    }\n  }\n\n  return operationResponse;\n};\n","import type { Client } from '../../../types/client';\nimport type { OperationResponse } from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport {\n  parseResponseStatusCode,\n  sorterByResponseStatusCode,\n  tagResponseTypes,\n} from '../../common/parser/operation';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiResponse } from '../interfaces/OpenApiResponse';\nimport type { OpenApiResponses } from '../interfaces/OpenApiResponses';\nimport { getOperationResponse } from './getOperationResponse';\n\nexport const getOperationResponses = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  debug,\n  openApi,\n  responses,\n  types,\n}: {\n  debug?: boolean;\n  openApi: OpenApi;\n  responses: OpenApiResponses;\n  types: Client['types'];\n}): OperationResponse[] => {\n  let operationResponses: OperationResponse[] = [];\n\n  Object.entries(responses).forEach(([responseCode, responseOrReference]) => {\n    const code = parseResponseStatusCode(responseCode);\n    if (!code) {\n      return;\n    }\n\n    const response = getRef<OpenApiResponse>(openApi, responseOrReference);\n    const operationResponse = getOperationResponse({\n      code,\n      openApi,\n      response,\n      types,\n    });\n    operationResponses = [...operationResponses, operationResponse];\n  });\n\n  operationResponses = tagResponseTypes(operationResponses);\n\n  return operationResponses.sort(sorterByResponseStatusCode);\n};\n","import type { Client } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport type {\n  Operation,\n  OperationParameter,\n  OperationParameters,\n} from '../../common/interfaces/client';\nimport { getRef } from '../../common/parser/getRef';\nimport {\n  getOperationResponseHeader,\n  operationNameFn,\n} from '../../common/parser/operation';\nimport { toSortedByRequired } from '../../common/parser/sort';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport type { OpenApiOperation } from '../interfaces/OpenApiOperation';\nimport type { OpenApiRequestBody } from '../interfaces/OpenApiRequestBody';\nimport { getOperationParameters } from './getOperationParameters';\nimport { getOperationRequestBody } from './getOperationRequestBody';\nimport { getOperationResponses } from './getOperationResponses';\n\n// add global path parameters, skip duplicate names\nconst mergeParameters = (\n  opParams: OperationParameter[],\n  globalParams: OperationParameter[],\n): OperationParameter[] => {\n  let mergedParameters = [...opParams];\n  let pendingParameters = [...globalParams];\n  while (pendingParameters.length > 0) {\n    const pendingParam = pendingParameters[0]!;\n    pendingParameters = pendingParameters.slice(1);\n    const canMerge = mergedParameters.every(\n      (param) =>\n        param.in !== pendingParam.in || param.name !== pendingParam.name,\n    );\n    if (canMerge) {\n      mergedParameters = [...mergedParameters, pendingParam];\n    }\n  }\n  return mergedParameters;\n};\n\nexport const getOperation = ({\n  debug,\n  method,\n  op,\n  openApi,\n  pathParams,\n  types,\n  url,\n}: {\n  debug?: boolean;\n  method: Lowercase<Operation['method']>;\n  op: OpenApiOperation;\n  openApi: OpenApi;\n  pathParams: OperationParameters;\n  types: Client['types'];\n  url: string;\n}): Operation => {\n  const operationWithoutName: Omit<Operation, 'name'> = {\n    $refs: [],\n    deprecated: Boolean(op.deprecated),\n    description: op.description || null,\n    id: op.operationId || null,\n    imports: [],\n    method: method.toUpperCase() as Operation['method'],\n    parameters: [],\n    parametersBody: pathParams.parametersBody,\n    parametersCookie: [],\n    parametersForm: [],\n    parametersHeader: [],\n    parametersPath: [],\n    parametersQuery: [],\n    path: url,\n    responseHeader: null,\n    responses: [],\n    summary: op.summary || null,\n    tags: op.tags || null,\n  };\n  const operation = {\n    ...operationWithoutName,\n    name: operationNameFn({\n      config: getConfig(),\n      method: operationWithoutName.method,\n      operationId: op.operationId,\n      path: operationWithoutName.path,\n    }),\n  };\n\n  if (op.parameters) {\n    const parameters = getOperationParameters({\n      openApi,\n      parameters: op.parameters,\n      types,\n    });\n    operation.$refs = [...operation.$refs, ...parameters.$refs];\n    operation.imports = [...operation.imports, ...parameters.imports];\n    operation.parameters = [...operation.parameters, ...parameters.parameters];\n    operation.parametersBody = parameters.parametersBody;\n    operation.parametersCookie = [\n      ...operation.parametersCookie,\n      ...parameters.parametersCookie,\n    ];\n    operation.parametersForm = [\n      ...operation.parametersForm,\n      ...parameters.parametersForm,\n    ];\n    operation.parametersHeader = [\n      ...operation.parametersHeader,\n      ...parameters.parametersHeader,\n    ];\n    operation.parametersPath = [\n      ...operation.parametersPath,\n      ...parameters.parametersPath,\n    ];\n    operation.parametersQuery = [\n      ...operation.parametersQuery,\n      ...parameters.parametersQuery,\n    ];\n  }\n\n  if (op.requestBody) {\n    const requestBodyDef = getRef<OpenApiRequestBody>(openApi, op.requestBody);\n    const requestBody = getOperationRequestBody({\n      body: requestBodyDef,\n      debug,\n      openApi,\n      types,\n    });\n    operation.$refs = [...operation.$refs, ...requestBody.$refs];\n    operation.imports = [...operation.imports, ...requestBody.imports];\n    operation.parameters = [...operation.parameters, requestBody];\n    operation.parametersBody = requestBody;\n  }\n\n  if (op.responses) {\n    operation.responses = getOperationResponses({\n      openApi,\n      responses: op.responses,\n      types,\n    });\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n\n    operation.responseHeader = getOperationResponseHeader(successResponses);\n\n    successResponses.forEach((response) => {\n      operation.$refs = [...operation.$refs, ...response.$refs];\n      operation.imports = [...operation.imports, ...response.imports];\n    });\n  }\n\n  operation.parameters = mergeParameters(\n    operation.parameters,\n    pathParams.parameters,\n  );\n  operation.parametersCookie = mergeParameters(\n    operation.parametersCookie,\n    pathParams.parametersCookie,\n  );\n  operation.parametersForm = mergeParameters(\n    operation.parametersForm,\n    pathParams.parametersForm,\n  );\n  operation.parametersHeader = mergeParameters(\n    operation.parametersHeader,\n    pathParams.parametersHeader,\n  );\n  operation.parametersPath = mergeParameters(\n    operation.parametersPath,\n    pathParams.parametersPath,\n  );\n  operation.parametersQuery = mergeParameters(\n    operation.parametersQuery,\n    pathParams.parametersQuery,\n  );\n\n  operation.parameters = toSortedByRequired(operation.parameters);\n\n  return operation;\n};\n","import { getConfig } from '../../../utils/config';\nimport type { Client, Operation } from '../../common/interfaces/client';\nimport {\n  getOperationKey,\n  operationFilterFn,\n} from '../../common/parser/operation';\nimport { allowedServiceMethods } from '../../common/parser/service';\nimport type { OpenApi } from '../interfaces/OpenApi';\nimport { getOperationParameters } from './getOperationParameters';\nimport { getOperation } from './operation';\n\nexport const getOperations = ({\n  openApi,\n  types,\n}: {\n  openApi: OpenApi;\n  types: Client['types'];\n}): Operation[] => {\n  const operationIds = new Map<string, string>();\n  const operations: Operation[] = [];\n\n  for (const path in openApi.paths) {\n    const pathItem = openApi.paths[path]!;\n    const pathParameters = getOperationParameters({\n      openApi,\n      parameters: pathItem.parameters ?? [],\n      types,\n    });\n\n    for (const name in pathItem) {\n      const method = name as Lowercase<Operation['method']>;\n\n      const operationKey = getOperationKey({\n        method,\n        path,\n      });\n\n      if (allowedServiceMethods.includes(method)) {\n        const op = pathItem[method]!;\n\n        if (op.operationId) {\n          if (operationIds.has(op.operationId)) {\n            console.warn(\n              `❗️ Duplicate operationId: ${op.operationId} in ${operationKey}. Please ensure your operation IDs are unique. This behavior is not supported and will likely lead to unexpected results.`,\n            );\n          } else {\n            operationIds.set(op.operationId, operationKey);\n          }\n        }\n\n        if (\n          operationFilterFn({\n            config: getConfig(),\n            operationKey,\n          })\n        ) {\n          const operation = getOperation({\n            method,\n            op,\n            openApi,\n            pathParams: pathParameters,\n            types,\n            url: path,\n          });\n          operations.push(operation);\n        }\n      }\n    }\n  }\n\n  return operations;\n};\n","import type { OpenApi } from '../interfaces/OpenApi';\n\nexport const getServer = (openApi: OpenApi): string => {\n  const server = openApi.servers?.[0];\n  const variables = server?.variables || {};\n  let url = server?.url || '';\n  Object.entries(variables).forEach(([name, variable]) => {\n    url = url.replace(`{${name}}`, variable.default);\n  });\n  return url.replace(/\\/$/g, '');\n};\n","import type { Client } from '../common/interfaces/client';\nimport { getServiceVersion } from '../common/parser/service';\nimport type { OpenApi } from './interfaces/OpenApi';\nimport { getModels } from './parser/getModels';\nimport { getOperations } from './parser/getOperations';\nimport { getServer } from './parser/getServer';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, operations and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport const parse = (openApi: OpenApi): Omit<Client, 'config'> => {\n  const version = getServiceVersion(openApi.info.version);\n  const server = getServer(openApi);\n  const { models, types } = getModels(openApi);\n  const operations = getOperations({ openApi, types });\n\n  return {\n    models,\n    operations,\n    server,\n    types,\n    version,\n  };\n};\n","import { IRContext } from '../ir/context';\nimport type { IR } from '../ir/types';\nimport type { Config } from '../types/config';\nimport { parseV2_0_X } from './2.0.x';\nimport { parseV3_0_X } from './3.0.x';\nimport { parseV3_1_X } from './3.1.x';\nimport type { Client } from './common/interfaces/client';\nimport type { OpenApi as LegacyOpenApi } from './common/interfaces/OpenApi';\nimport type { OpenApi } from './types';\nimport { parse as parseV2 } from './v2';\nimport { parse as parseV3 } from './v3';\n\nexport type {\n  Client,\n  Enum,\n  Method,\n  Model,\n  ModelMeta,\n  Operation,\n  OperationParameter,\n  OperationResponse,\n} from './common/interfaces/client';\nexport type { OpenApi } from './common/interfaces/OpenApi';\nexport { isOperationParameterRequired } from './common/parser/operation';\nexport {\n  ensureValidTypeScriptJavaScriptIdentifier,\n  sanitizeNamespaceIdentifier,\n  sanitizeOperationParameterName,\n} from './common/parser/sanitize';\nexport { getType } from './common/parser/type';\nexport type { OpenApiSchema as OpenApiV2Schema } from './v2/interfaces/OpenApiSchema';\nexport type { OpenApiSchema as OpenApiV3Schema } from './v3/interfaces/OpenApiSchema';\n\n/**\n * Parse the OpenAPI specification to a Client model that contains\n * all the models, services and schema's we should output.\n * @param openApi The OpenAPI spec that we have loaded from disk.\n */\nexport function parseLegacy({\n  openApi,\n}: {\n  openApi: unknown;\n}): Omit<Client, 'config'> {\n  const spec = openApi as LegacyOpenApi;\n\n  if ('openapi' in spec) {\n    return parseV3(spec);\n  }\n\n  if ('swagger' in spec) {\n    return parseV2(spec);\n  }\n\n  throw new Error(\n    `Unsupported OpenAPI specification: ${JSON.stringify(spec, null, 2)}`,\n  );\n}\n\n/**\n * Parse the resolved OpenAPI specification. This will populate and return\n * `context` with intermediate representation obtained from the parsed spec.\n */\nexport const parseOpenApiSpec = ({\n  config,\n  spec,\n}: {\n  config: Config;\n  spec: unknown;\n}): IR.Context | undefined => {\n  const context = new IRContext({\n    config,\n    spec: spec as OpenApi.V2_0_X | OpenApi.V3_0_X | OpenApi.V3_1_X,\n  });\n\n  if ('swagger' in context.spec) {\n    parseV2_0_X(context as IR.Context<OpenApi.V2_0_X>);\n    return context;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      parseV3_0_X(context as IR.Context<OpenApi.V3_0_X>);\n      return context;\n    case '3.1.0':\n    case '3.1.1':\n      parseV3_1_X(context as IR.Context<OpenApi.V3_1_X>);\n      return context;\n    default:\n      break;\n  }\n\n  throw new Error('Unsupported OpenAPI specification');\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport type { SchemaObject as OpenApiV2_0_XSchemaObject } from '../../../openApi/2.0.x/types/spec';\nimport type {\n  ReferenceObject as OpenApiV3_0_XReferenceObject,\n  SchemaObject as OpenApiV3_0_XSchemaObject,\n} from '../../../openApi/3.0.x/types/spec';\nimport type { SchemaObject as OpenApiV3_1_XSchemaObject } from '../../../openApi/3.1.x/types/spec';\nimport { ensureValidIdentifier } from '../../../openApi/shared/utils/identifier';\nimport type { OpenApi } from '../../../openApi/types';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst schemasId = 'schemas';\n\nconst stripSchema = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XSchemaObject\n    | OpenApiV3_0_XSchemaObject\n    | OpenApiV3_1_XSchemaObject;\n}) => {\n  if (plugin.type === 'form') {\n    if (schema.description) {\n      delete schema.description;\n    }\n\n    if (schema['x-enum-descriptions']) {\n      delete schema['x-enum-descriptions'];\n    }\n\n    if (schema['x-enum-varnames']) {\n      delete schema['x-enum-varnames'];\n    }\n\n    if (schema['x-enumNames']) {\n      delete schema['x-enumNames'];\n    }\n\n    if (schema.title) {\n      delete schema.title;\n    }\n  }\n};\n\nconst schemaToJsonSchemaDraft_04 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV2_0_XSchemaObject;\n}): OpenApiV2_0_XSchemaObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as unknown as OpenApiV2_0_XSchemaObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_04({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema: schema.items as OpenApiV2_0_XSchemaObject,\n    });\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_04({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchemaDraft_05 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject;\n}): OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_0_XSchemaObject | OpenApiV3_0_XReferenceObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  if ('$ref' in schema) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n    return schema;\n  }\n\n  stripSchema({ plugin, schema });\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchemaDraft_05({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchemaDraft_05({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaToJsonSchema2020_12 = ({\n  context,\n  plugin,\n  schema: _schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: OpenApiV3_1_XSchemaObject;\n}): OpenApiV3_1_XSchemaObject => {\n  if (Array.isArray(_schema)) {\n    return _schema.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    ) as OpenApiV3_1_XSchemaObject;\n  }\n\n  const schema = structuredClone(_schema);\n\n  stripSchema({ plugin, schema });\n\n  if (schema.$ref) {\n    // refs using unicode characters become encoded, didn't investigate why\n    // but the suspicion is this comes from `@hey-api/json-schema-ref-parser`\n    schema.$ref = decodeURI(schema.$ref);\n  }\n\n  if (\n    schema.additionalProperties &&\n    typeof schema.additionalProperties !== 'boolean'\n  ) {\n    schema.additionalProperties = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.additionalProperties,\n    });\n  }\n\n  if (schema.allOf) {\n    schema.allOf = schema.allOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.anyOf) {\n    schema.anyOf = schema.anyOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.items) {\n    schema.items = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema: schema.items,\n    });\n  }\n\n  if (schema.oneOf) {\n    schema.oneOf = schema.oneOf.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.prefixItems) {\n    schema.prefixItems = schema.prefixItems.map((item) =>\n      schemaToJsonSchema2020_12({\n        context,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  if (schema.properties) {\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n\n      if (typeof property !== 'boolean') {\n        schema.properties[name] = schemaToJsonSchema2020_12({\n          context,\n          plugin,\n          schema: property,\n        });\n      }\n    }\n  }\n\n  return schema;\n};\n\nconst schemaName = ({\n  name,\n  plugin,\n  schema,\n}: {\n  name: string;\n  plugin: Plugin.Instance<Config>;\n  schema:\n    | OpenApiV2_0_XSchemaObject\n    | OpenApiV3_0_XReferenceObject\n    | OpenApiV3_0_XSchemaObject\n    | OpenApiV3_1_XSchemaObject;\n}): string => {\n  const customName = plugin.nameBuilder?.(name, schema) ?? `${name}Schema`;\n  return ensureValidIdentifier(customName);\n};\n\nconst schemasV2_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V2_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.definitions) {\n    return;\n  }\n\n  for (const name in context.spec.definitions) {\n    const schema = context.spec.definitions[name]!;\n    const obj = schemaToJsonSchemaDraft_04({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_0_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_0_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchemaDraft_05({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nconst schemasV3_1_X = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context<OpenApi.V3_1_X>;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  if (!context.spec.components) {\n    return;\n  }\n\n  for (const name in context.spec.components.schemas) {\n    const schema = context.spec.components.schemas[name]!;\n    const obj = schemaToJsonSchema2020_12({\n      context,\n      plugin,\n      schema,\n    });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression: compiler.objectExpression({ obj }),\n      name: schemaName({ name, plugin, schema }),\n    });\n    context.file({ id: schemasId })!.add(statement);\n  }\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: schemasId,\n    path: plugin.output,\n  });\n\n  if ('swagger' in context.spec) {\n    schemasV2_0_X({\n      context: context as IR.Context<OpenApi.V2_0_X>,\n      plugin,\n    });\n    return;\n  }\n\n  switch (context.spec.openapi) {\n    case '3.0.0':\n    case '3.0.1':\n    case '3.0.2':\n    case '3.0.3':\n    case '3.0.4':\n      schemasV3_0_X({\n        context: context as IR.Context<OpenApi.V3_0_X>,\n        plugin,\n      });\n      break;\n    case '3.1.0':\n    case '3.1.1':\n      schemasV3_1_X({\n        context: context as IR.Context<OpenApi.V3_1_X>,\n        plugin,\n      });\n      break;\n    default:\n      break;\n  }\n};\n","import { compiler } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { OpenApiV2Schema, OpenApiV3Schema } from '../../../openApi';\nimport { ensureValidTypeScriptJavaScriptIdentifier } from '../../../openApi';\nimport { getConfig } from '../../../utils/config';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\nconst ensureValidSchemaOutput = (\n  schema: unknown,\n  parentKey?: string,\n): object => {\n  const config = getConfig();\n\n  if (Array.isArray(schema)) {\n    return schema.map((item) => ensureValidSchemaOutput(item));\n  }\n\n  if (typeof schema !== 'object' || schema === null) {\n    return schema as object;\n  }\n\n  const result = { ...schema };\n  Object.entries(result).forEach(([key, value]) => {\n    if (config.plugins['@hey-api/schemas']?.type === 'form') {\n      if (\n        [\n          'description',\n          'x-enum-descriptions',\n          'x-enum-varnames',\n          'x-enumNames',\n          'title',\n        ].includes(key) &&\n        parentKey !== 'properties'\n      ) {\n        // @ts-expect-error\n        delete result[key];\n        return;\n      }\n    }\n\n    // refs are encoded probably by json-schema-ref-parser, didn't investigate\n    // further\n    if (key === '$ref' && typeof value === 'string') {\n      // @ts-expect-error\n      result[key] = decodeURIComponent(value);\n    }\n\n    if (value && typeof value === 'object') {\n      // @ts-expect-error\n      result[key] = ensureValidSchemaOutput(value, key);\n    }\n  });\n  return result;\n};\n\nconst toSchemaName = (\n  name: string,\n  schema: OpenApiV2Schema | OpenApiV3Schema,\n): string => {\n  const config = getConfig();\n\n  const validName = ensureValidTypeScriptJavaScriptIdentifier(name);\n\n  if (config.plugins['@hey-api/schemas']?.nameBuilder) {\n    return config.plugins['@hey-api/schemas'].nameBuilder(validName, schema);\n  }\n\n  return `${validName}Schema`;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  files,\n  openApi,\n}) => {\n  const config = getConfig();\n\n  files.schemas = new TypeScriptFile({\n    dir: config.output.path,\n    name: 'schemas.ts',\n  });\n\n  const addSchema = (\n    name: string,\n    schema: OpenApiV2Schema | OpenApiV3Schema,\n  ) => {\n    const obj = ensureValidSchemaOutput(schema);\n    const expression = compiler.objectExpression({ obj });\n    const statement = compiler.constVariable({\n      assertion: 'const',\n      exportConst: true,\n      expression,\n      name: toSchemaName(name, schema),\n    });\n    files.schemas!.add(statement);\n  };\n\n  // OpenAPI 2.0\n  if ('swagger' in openApi) {\n    Object.entries(openApi.definitions ?? {}).forEach(([name, definition]) => {\n      addSchema(name, definition);\n    });\n  }\n\n  // OpenAPI 3.x\n  if ('openapi' in openApi) {\n    Object.entries(openApi.components?.schemas ?? {}).forEach(\n      ([name, schema]) => {\n        addSchema(name, schema);\n      },\n    );\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  name: '@hey-api/schemas',\n  nameBuilder: (name) => `${name}Schema`,\n  output: 'schemas',\n  type: 'json',\n};\n\n/**\n * Type helper for `@hey-api/schemas` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Pagination } from './pagination';\nimport type { IR } from './types';\n\nexport const hasParameterGroupObjectRequired = (\n  parameterGroup?: Record<string, IR.ParameterObject>,\n): boolean => {\n  for (const name in parameterGroup) {\n    if (parameterGroup[name]!.required) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const hasParametersObjectRequired = (\n  parameters: IR.ParametersObject | undefined,\n): boolean => {\n  if (!parameters) {\n    return false;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.cookie)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.header)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.path)) {\n    return true;\n  }\n\n  if (hasParameterGroupObjectRequired(parameters.query)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const parameterWithPagination = (\n  parameters: IR.ParametersObject | undefined,\n): Pagination | undefined => {\n  if (!parameters) {\n    return;\n  }\n\n  for (const name in parameters.cookie) {\n    const parameter = parameters.cookie[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.header) {\n    const parameter = parameters.header[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.path) {\n    const parameter = parameters.path[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n\n  for (const name in parameters.query) {\n    const parameter = parameters.query[name]!;\n    if (parameter.pagination) {\n      return {\n        in: parameter.location,\n        name:\n          parameter.pagination === true\n            ? name\n            : `${name}.${parameter.pagination}`,\n        schema:\n          parameter.pagination === true\n            ? parameter.schema\n            : parameter.schema.properties![parameter.pagination]!,\n      };\n    }\n  }\n};\n","import type { IR } from './types';\n\n/**\n * Ensure we don't produce redundant types, e.g. string | string.\n */\nexport const deduplicateSchema = <T extends IR.SchemaObject>({\n  schema,\n}: {\n  schema: T;\n}): T => {\n  if (!schema.items) {\n    return schema;\n  }\n\n  const uniqueItems: Array<IR.SchemaObject> = [];\n  const typeIds: Array<string> = [];\n\n  for (const item of schema.items) {\n    // skip nested schemas for now, handle if necessary\n    if (!item.type && item.items) {\n      uniqueItems.push(item);\n      continue;\n    }\n\n    if (\n      // no `type` might still include `$ref` or `const`\n      !item.type ||\n      item.type === 'boolean' ||\n      item.type === 'integer' ||\n      item.type === 'null' ||\n      item.type === 'number' ||\n      item.type === 'string' ||\n      item.type === 'unknown' ||\n      item.type === 'void'\n    ) {\n      // const needs namespace to handle empty string values, otherwise\n      // fallback would equal an actual value and we would skip an item\n      const typeId = `${item.$ref ?? ''}${item.type ?? ''}${item.const !== undefined ? `const-${item.const}` : ''}`;\n      if (!typeIds.includes(typeId)) {\n        typeIds.push(typeId);\n        uniqueItems.push(item);\n      }\n      continue;\n    }\n\n    uniqueItems.push(item);\n  }\n\n  schema.items = uniqueItems;\n\n  if (\n    schema.items.length <= 1 &&\n    schema.type !== 'array' &&\n    schema.type !== 'enum' &&\n    schema.type !== 'tuple'\n  ) {\n    // bring the only item up to clean up the schema\n    const liftedSchema = schema.items[0];\n    delete schema.logicalOperator;\n    delete schema.items;\n    schema = {\n      ...schema,\n      ...liftedSchema,\n    };\n  }\n\n  // exclude unknown if it's the only type left\n  if (schema.type === 'unknown') {\n    return {} as T;\n  }\n\n  return schema;\n};\n","import type { Pagination } from './pagination';\nimport {\n  hasParametersObjectRequired,\n  parameterWithPagination,\n} from './parameter';\nimport { deduplicateSchema } from './schema';\nimport type { IR } from './types';\nimport { addItemsToSchema } from './utils';\n\nexport const hasOperationDataRequired = (\n  operation: IR.OperationObject,\n): boolean => {\n  if (hasParametersObjectRequired(operation.parameters)) {\n    return true;\n  }\n\n  if (operation.body?.required) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const operationPagination = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Pagination | undefined => {\n  if (operation.body?.pagination) {\n    if (typeof operation.body.pagination === 'boolean') {\n      return {\n        in: 'body',\n        name: 'body',\n        schema: operation.body.schema,\n      };\n    }\n\n    const schema = operation.body.schema.$ref\n      ? context.resolveIrRef<IR.RequestBodyObject | IR.SchemaObject>(\n          operation.body.schema.$ref,\n        )\n      : operation.body.schema;\n    const finalSchema = 'schema' in schema ? schema.schema : schema;\n    return {\n      in: 'body',\n      name: operation.body.pagination,\n      schema: finalSchema.properties![operation.body.pagination]!,\n    };\n  }\n\n  return parameterWithPagination(operation.parameters);\n};\n\ntype StatusGroup = '1XX' | '2XX' | '3XX' | '4XX' | '5XX' | 'default';\n\nexport const statusCodeToGroup = ({\n  statusCode,\n}: {\n  statusCode: string;\n}): StatusGroup => {\n  switch (statusCode) {\n    case '1XX':\n      return '1XX';\n    case '2XX':\n      return '2XX';\n    case '3XX':\n      return '3XX';\n    case '4XX':\n      return '4XX';\n    case '5XX':\n      return '5XX';\n    case 'default':\n      return 'default';\n    default:\n      return `${statusCode[0]}XX` as StatusGroup;\n  }\n};\n\ninterface OperationResponsesMap {\n  /**\n   * A deduplicated union of all error types. Unknown types are omitted.\n   */\n  error?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each error type.\n   */\n  errors?: IR.SchemaObject;\n  /**\n   * A deduplicated union of all response types. Unknown types are omitted.\n   */\n  response?: IR.SchemaObject;\n  /**\n   * An object containing a map of status codes for each response type.\n   */\n  responses?: IR.SchemaObject;\n}\n\nexport const operationResponsesMap = (\n  operation: IR.OperationObject,\n): OperationResponsesMap => {\n  const result: OperationResponsesMap = {};\n\n  if (!operation.responses) {\n    return result;\n  }\n\n  const errors: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  const responses: Omit<IR.SchemaObject, 'properties'> &\n    Pick<Required<IR.SchemaObject>, 'properties'> = {\n    properties: {},\n    type: 'object',\n  };\n\n  // store default response to be evaluated last\n  let defaultResponse: IR.ResponseObject | undefined;\n\n  for (const name in operation.responses) {\n    const response = operation.responses[name]!;\n\n    switch (statusCodeToGroup({ statusCode: name })) {\n      case '1XX':\n      case '3XX':\n        // TODO: parser - handle informational and redirection status codes\n        break;\n      case '2XX':\n        responses.properties[name] = response.schema;\n        break;\n      case '4XX':\n      case '5XX':\n        errors.properties[name] = response.schema;\n        break;\n      case 'default':\n        defaultResponse = response;\n        break;\n    }\n  }\n\n  // infer default response type\n  if (defaultResponse) {\n    let inferred = false;\n\n    // assume default is intended for success if none exists yet\n    if (!Object.keys(responses.properties).length) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    const description = (\n      defaultResponse.schema.description ?? ''\n    ).toLocaleLowerCase();\n    const $ref = (defaultResponse.schema.$ref ?? '').toLocaleLowerCase();\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const successKeywords = ['success'];\n    if (\n      successKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      responses.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // TODO: parser - this could be rewritten using regular expressions\n    const errorKeywords = ['error', 'problem'];\n    if (\n      errorKeywords.some(\n        (keyword) => description.includes(keyword) || $ref.includes(keyword),\n      )\n    ) {\n      errors.properties.default = defaultResponse.schema;\n      inferred = true;\n    }\n\n    // if no keyword match, assume default schema is intended for error\n    if (!inferred) {\n      errors.properties.default = defaultResponse.schema;\n    }\n  }\n\n  const errorKeys = Object.keys(errors.properties);\n  if (errorKeys.length) {\n    errors.required = errorKeys;\n    result.errors = errors;\n\n    let errorUnion = addItemsToSchema({\n      items: Object.values(errors.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    errorUnion = deduplicateSchema({ schema: errorUnion });\n    if (Object.keys(errorUnion).length && errorUnion.type !== 'unknown') {\n      result.error = errorUnion;\n    }\n  }\n\n  const responseKeys = Object.keys(responses.properties);\n  if (responseKeys.length) {\n    responses.required = responseKeys;\n    result.responses = responses;\n\n    let responseUnion = addItemsToSchema({\n      items: Object.values(responses.properties),\n      mutateSchemaOneItem: true,\n      schema: {},\n    });\n    responseUnion = deduplicateSchema({ schema: responseUnion });\n    if (Object.keys(responseUnion).length && responseUnion.type !== 'unknown') {\n      result.response = responseUnion;\n    }\n  }\n\n  return result;\n};\n","import type { Client as ParserClient, Model } from '../openApi';\nimport { sanitizeNamespaceIdentifier } from '../openApi';\nimport type { Client, Operation, Service } from '../types/client';\nimport type { Config } from '../types/config';\nimport { getConfig, legacyNameFromConfig } from './config';\nimport { sort } from './sort';\nimport { stringCase } from './stringCase';\nimport { unique } from './unique';\n\n/**\n * Post process client\n * @param client Client object with all the models, services, etc.\n */\nexport function postProcessClient(\n  client: Omit<ParserClient, 'config'>,\n  config: Config,\n): Client {\n  return {\n    ...client,\n    config,\n    models: client.models.map((model) => postProcessModel(model)),\n    services: postProcessOperations(client.operations).map(postProcessService),\n    types: {},\n  };\n}\n\nconst postProcessModel = (model: Model): Model => ({\n  ...model,\n  $refs: model.$refs.filter((value, index, arr) => unique(value, index, arr)),\n  enum: model.enum.filter(\n    (value, index, arr) =>\n      arr.findIndex((item) => item.value === value.value) === index,\n  ),\n  enums: model.enums.filter(\n    (value, index, arr) =>\n      arr.findIndex((item) => item.name === value.name) === index,\n  ),\n  imports: model.imports\n    .filter(\n      (value, index, arr) => unique(value, index, arr) && value !== model.name,\n    )\n    .sort(sort),\n});\n\nconst postProcessOperations = (\n  operations: ParserClient['operations'],\n): Client['services'] => {\n  const config = getConfig();\n\n  const services = new Map<string, Service>();\n\n  operations.forEach((parserOperation) => {\n    const tags =\n      parserOperation.tags?.length &&\n      (config.plugins['@hey-api/sdk']?.asClass || legacyNameFromConfig(config))\n        ? parserOperation.tags.filter(unique)\n        : ['Default'];\n    tags.forEach((tag) => {\n      const operation: Operation = {\n        ...parserOperation,\n        service: getServiceName(tag),\n      };\n      const service =\n        services.get(operation.service) || getNewService(operation);\n      service.$refs = [...service.$refs, ...operation.$refs];\n      service.imports = [...service.imports, ...operation.imports];\n      service.operations = [...service.operations, operation];\n      services.set(operation.service, service);\n    });\n  });\n\n  return Array.from(services.values());\n};\n\nconst postProcessService = (service: Service): Service => {\n  const clone = { ...service };\n  clone.operations = postProcessServiceOperations(clone);\n  clone.operations.forEach((operation) => {\n    clone.imports.push(...operation.imports);\n  });\n  clone.imports = clone.imports.filter(unique).sort(sort);\n  return clone;\n};\n\nconst postProcessServiceOperations = (service: Service): Operation[] => {\n  const names = new Map<string, number>();\n\n  return service.operations.map((operation) => {\n    const clone = { ...operation };\n\n    // Parse the service parameters and successes, very similar to how we parse\n    // properties of models. These methods will extend the type if needed.\n    clone.imports.push(\n      ...clone.parameters.flatMap((parameter) => parameter.imports),\n    );\n    const successResponses = clone.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    clone.imports.push(...successResponses.flatMap((result) => result.imports));\n\n    // Check if the operation name is unique, if not then prefix this with a number\n    const name = clone.name;\n    const index = names.get(name) || 0;\n    if (index > 0) {\n      clone.name = `${name}${index}`;\n    }\n    names.set(name, index + 1);\n\n    return clone;\n  });\n};\n\nexport const getNewService = (operation: Operation): Service => ({\n  $refs: [],\n  imports: [],\n  name: operation.service,\n  operations: [],\n});\n\n/**\n * Convert the input value to a correct service name. This converts\n * the input string to PascalCase.\n */\nexport const getServiceName = (value: string): string =>\n  stringCase({\n    case: 'PascalCase',\n    value: sanitizeNamespaceIdentifier(value),\n  });\n","import type { StringCase } from '../../../types/config';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nexport const operationIrRef = ({\n  case: _case = 'PascalCase',\n  id,\n  type,\n}: OperationIRRef & {\n  readonly case?: StringCase;\n  type: 'data' | 'error' | 'errors' | 'response' | 'responses';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'Data';\n      break;\n    case 'error':\n      // error union\n      affix = 'Error';\n      break;\n    case 'errors':\n      // errors map\n      affix = 'Errors';\n      break;\n    case 'response':\n      // response union\n      affix = 'Response';\n      break;\n    case 'responses':\n      // responses map\n      affix = 'Responses';\n      break;\n  }\n  return `${irRef}${stringCase({\n    case: _case,\n    value: id,\n  })}-${affix}`;\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { deduplicateSchema } from '../../ir/schema';\nimport type { IR } from '../../ir/types';\nimport { numberRegExp } from '../../utils/regexp';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\ninterface Result {\n  circularReferenceTracker: Set<string>;\n  hasCircularReference: boolean;\n}\n\nexport const zodId = 'zod';\n\n// frequently used identifiers\nconst defaultIdentifier = compiler.identifier({ text: 'default' });\nconst intersectionIdentifier = compiler.identifier({ text: 'intersection' });\nconst lazyIdentifier = compiler.identifier({ text: 'lazy' });\nconst lengthIdentifier = compiler.identifier({ text: 'length' });\nconst literalIdentifier = compiler.identifier({ text: 'literal' });\nconst maxIdentifier = compiler.identifier({ text: 'max' });\nconst mergeIdentifier = compiler.identifier({ text: 'merge' });\nconst minIdentifier = compiler.identifier({ text: 'min' });\nconst optionalIdentifier = compiler.identifier({ text: 'optional' });\nconst readonlyIdentifier = compiler.identifier({ text: 'readonly' });\nconst regexIdentifier = compiler.identifier({ text: 'regex' });\nconst unionIdentifier = compiler.identifier({ text: 'union' });\nconst zIdentifier = compiler.identifier({ text: 'z' });\n\nconst nameTransformer = (name: string) => `z-${name}`;\n\nconst arrayTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: SchemaWithType<'array'>;\n}): ts.CallExpression => {\n  const functionName = compiler.propertyAccessExpression({\n    expression: zIdentifier,\n    name: compiler.identifier({ text: schema.type }),\n  });\n\n  let arrayExpression: ts.CallExpression | undefined;\n\n  if (!schema.items) {\n    arrayExpression = compiler.callExpression({\n      functionName,\n      parameters: [\n        unknownTypeToZodSchema({\n          context,\n          schema: {\n            type: 'unknown',\n          },\n        }),\n      ],\n    });\n  } else {\n    schema = deduplicateSchema({ schema });\n\n    // at least one item is guaranteed\n    const itemExpressions = schema.items!.map((item) =>\n      schemaToZodSchema({\n        context,\n        result,\n        schema: item,\n      }),\n    );\n\n    if (itemExpressions.length === 1) {\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: itemExpressions,\n      });\n    } else {\n      if (schema.logicalOperator === 'and') {\n        // TODO: parser - handle intersection\n        // return compiler.typeArrayNode(\n        //   compiler.typeIntersectionNode({ types: itemExpressions }),\n        // );\n      }\n\n      // TODO: parser - handle union\n      // return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemExpressions }));\n\n      arrayExpression = compiler.callExpression({\n        functionName,\n        parameters: [\n          unknownTypeToZodSchema({\n            context,\n            schema: {\n              type: 'unknown',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  if (schema.minItems === schema.maxItems && schema.minItems !== undefined) {\n    arrayExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: arrayExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minItems })],\n    });\n  } else {\n    if (schema.minItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minItems })],\n      });\n    }\n\n    if (schema.maxItems !== undefined) {\n      arrayExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: arrayExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxItems })],\n      });\n    }\n  }\n\n  return arrayExpression;\n};\n\nconst booleanTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (typeof schema.const === 'boolean') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.boolean(schema.const)],\n    });\n    return expression;\n  }\n\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst enumTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'enum'>;\n}): ts.CallExpression => {\n  const enumMembers: Array<ts.LiteralExpression> = [];\n\n  for (const item of schema.items ?? []) {\n    // Zod supports only string enums\n    if (item.type === 'string' && typeof item.const === 'string') {\n      enumMembers.push(\n        compiler.stringLiteral({\n          text: item.const,\n        }),\n      );\n    }\n  }\n\n  if (!enumMembers.length) {\n    return unknownTypeToZodSchema({\n      context,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  const enumExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n    parameters: [\n      compiler.arrayLiteralExpression({\n        elements: enumMembers,\n        multiLine: false,\n      }),\n    ],\n  });\n\n  return enumExpression;\n};\n\nconst neverTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'never'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst nullTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'null'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst numberTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  const isBigInt = schema.type === 'integer' && schema.format === 'int64';\n\n  if (typeof schema.const === 'number') {\n    // TODO: parser - handle bigint constants\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.number(schema.const)],\n    });\n    return expression;\n  }\n\n  let numberExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: isBigInt\n        ? compiler.identifier({ text: 'bigint' })\n        : compiler.identifier({ text: 'number' }),\n    }),\n  });\n\n  if (!isBigInt && schema.type === 'integer') {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'int' }),\n      }),\n    });\n  }\n\n  if (schema.exclusiveMinimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gt' }),\n      }),\n      parameters: [\n        compiler.valueToExpression({ value: schema.exclusiveMinimum }),\n      ],\n    });\n  } else if (schema.minimum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'gte' }),\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minimum })],\n    });\n  }\n\n  if (schema.exclusiveMaximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lt' }),\n      }),\n      parameters: [\n        compiler.valueToExpression({ value: schema.exclusiveMaximum }),\n      ],\n    });\n  } else if (schema.maximum !== undefined) {\n    numberExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: numberExpression,\n        name: compiler.identifier({ text: 'lte' }),\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.maximum })],\n    });\n  }\n\n  return numberExpression;\n};\n\nconst objectTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: SchemaWithType<'object'>;\n}) => {\n  // TODO: parser - handle constants\n  const properties: Array<ts.PropertyAssignment> = [];\n\n  // let indexProperty: Property | undefined;\n  // const schemaProperties: Array<Property> = [];\n  // let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  // let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n\n    const propertyExpression = schemaToZodSchema({\n      context,\n      optional: !isRequired,\n      result,\n      schema: property,\n    });\n\n    numberRegExp.lastIndex = 0;\n    let propertyName = numberRegExp.test(name)\n      ? ts.factory.createNumericLiteral(name)\n      : name;\n    // TODO: parser - abstract safe property name logic\n    if (\n      ((name.match(/^[0-9]/) && name.match(/\\D+/g)) || name.match(/\\W/g)) &&\n      !name.startsWith(\"'\") &&\n      !name.endsWith(\"'\")\n    ) {\n      propertyName = `'${name}'`;\n    }\n    properties.push(\n      compiler.propertyAssignment({\n        initializer: propertyExpression,\n        name: propertyName,\n      }),\n    );\n\n    // indexPropertyItems.push(property);\n    // if (!isRequired) {\n    //   hasOptionalProperties = true;\n    // }\n  }\n\n  // if (\n  //   schema.additionalProperties &&\n  //   (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  // ) {\n  //   if (schema.additionalProperties.type === 'never') {\n  //     indexPropertyItems = [schema.additionalProperties];\n  //   } else {\n  //     indexPropertyItems.unshift(schema.additionalProperties);\n  //   }\n\n  //   if (hasOptionalProperties) {\n  //     indexPropertyItems.push({\n  //       type: 'undefined',\n  //     });\n  //   }\n\n  //   indexProperty = {\n  //     isRequired: true,\n  //     name: 'key',\n  //     type: schemaToZodSchema({\n  //       context,\n  //       schema:\n  //         indexPropertyItems.length === 1\n  //           ? indexPropertyItems[0]\n  //           : {\n  //               items: indexPropertyItems,\n  //               logicalOperator: 'or',\n  //             },\n  //     }),\n  //   };\n  // }\n\n  // return compiler.typeInterfaceNode({\n  //   indexProperty,\n  //   properties: schemaProperties,\n  //   useLegacyResolution: false,\n  // });\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n    parameters: [ts.factory.createObjectLiteralExpression(properties, true)],\n  });\n  return expression;\n};\n\nconst stringTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (typeof schema.const === 'string') {\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: literalIdentifier,\n      }),\n      parameters: [compiler.ots.string(schema.const)],\n    });\n    return expression;\n  }\n\n  let stringExpression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n\n  if (schema.format) {\n    switch (schema.format) {\n      case 'date-time':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'datetime' }),\n          }),\n        });\n        break;\n      case 'ipv4':\n      case 'ipv6':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'ip' }),\n          }),\n        });\n        break;\n      case 'uri':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: 'url' }),\n          }),\n        });\n        break;\n      case 'date':\n      case 'email':\n      case 'time':\n      case 'uuid':\n        stringExpression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: stringExpression,\n            name: compiler.identifier({ text: schema.format }),\n          }),\n        });\n        break;\n    }\n  }\n\n  if (schema.minLength === schema.maxLength && schema.minLength !== undefined) {\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: lengthIdentifier,\n      }),\n      parameters: [compiler.valueToExpression({ value: schema.minLength })],\n    });\n  } else {\n    if (schema.minLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: minIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.minLength })],\n      });\n    }\n\n    if (schema.maxLength !== undefined) {\n      stringExpression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: stringExpression,\n          name: maxIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value: schema.maxLength })],\n      });\n    }\n  }\n\n  if (schema.pattern) {\n    const text = schema.pattern\n      .replace(/\\\\/g, '\\\\\\\\') // backslashes\n      .replace(/\\n/g, '\\\\n') // newlines\n      .replace(/\\r/g, '\\\\r') // carriage returns\n      .replace(/\\t/g, '\\\\t') // tabs\n      .replace(/\\f/g, '\\\\f') // form feeds\n      .replace(/\\v/g, '\\\\v') // vertical tabs\n      .replace(/'/g, \"\\\\'\") // single quotes\n      .replace(/\"/g, '\\\\\"'); // double quotes\n    stringExpression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: stringExpression,\n        name: regexIdentifier,\n      }),\n      parameters: [compiler.regularExpressionLiteral({ text })],\n    });\n  }\n\n  return stringExpression;\n};\n\nconst tupleTypeToZodSchema = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'tuple'>;\n}) => {\n  if (schema.const && Array.isArray(schema.const)) {\n    const tupleElements = schema.const.map((value) =>\n      compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression: zIdentifier,\n          name: literalIdentifier,\n        }),\n        parameters: [compiler.valueToExpression({ value })],\n      }),\n    );\n    const expression = compiler.callExpression({\n      functionName: compiler.propertyAccessExpression({\n        expression: zIdentifier,\n        name: compiler.identifier({ text: 'tuple' }),\n      }),\n      parameters: [\n        compiler.arrayLiteralExpression({\n          elements: tupleElements,\n        }),\n      ],\n    });\n    return expression;\n  }\n\n  // TODO: parser - handle tuple items\n  // const itemTypes: Array<ts.TypeNode> = [];\n\n  // for (const item of schema.items ?? []) {\n  //   itemTypes.push(\n  //     schemaToType({\n  //       context,\n  //       namespace,\n  //       plugin,\n  //       schema: item,\n  //     }),\n  //   );\n  // }\n\n  // return compiler.typeTupleNode({\n  //   types: itemTypes,\n  // });\n\n  return unknownTypeToZodSchema({\n    context,\n    schema: {\n      type: 'unknown',\n    },\n  });\n};\n\nconst undefinedTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'undefined'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst unknownTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'unknown'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst voidTypeToZodSchema = ({\n  schema,\n}: {\n  context: IR.Context;\n  schema: SchemaWithType<'void'>;\n}) => {\n  const expression = compiler.callExpression({\n    functionName: compiler.propertyAccessExpression({\n      expression: zIdentifier,\n      name: compiler.identifier({ text: schema.type }),\n    }),\n  });\n  return expression;\n};\n\nconst schemaTypeToZodSchema = ({\n  context,\n  result,\n  schema,\n}: {\n  context: IR.Context;\n  result: Result;\n  schema: IR.SchemaObject;\n}): ts.Expression => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return arrayTypeToZodSchema({\n        context,\n        result,\n        schema: schema as SchemaWithType<'array'>,\n      });\n    case 'boolean':\n      return booleanTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'boolean'>,\n      });\n    case 'enum':\n      return enumTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'enum'>,\n      });\n    case 'integer':\n    case 'number':\n      return numberTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'integer' | 'number'>,\n      });\n    case 'never':\n      return neverTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'never'>,\n      });\n    case 'null':\n      return nullTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'null'>,\n      });\n    case 'object':\n      return objectTypeToZodSchema({\n        context,\n        result,\n        schema: schema as SchemaWithType<'object'>,\n      });\n    case 'string':\n      return stringTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'string'>,\n      });\n    case 'tuple':\n      return tupleTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'tuple'>,\n      });\n    case 'undefined':\n      return undefinedTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'undefined'>,\n      });\n    case 'unknown':\n      return unknownTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'unknown'>,\n      });\n    case 'void':\n      return voidTypeToZodSchema({\n        context,\n        schema: schema as SchemaWithType<'void'>,\n      });\n  }\n};\n\nconst operationToZodSchema = ({\n  context,\n  operation,\n  result,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  result: Result;\n}) => {\n  if (operation.responses) {\n    const { response } = operationResponsesMap(operation);\n\n    if (response) {\n      schemaToZodSchema({\n        $ref: operationIrRef({\n          case: 'camelCase',\n          id: operation.id,\n          type: 'response',\n        }),\n        context,\n        result,\n        schema: response,\n      });\n    }\n  }\n};\n\nconst schemaToZodSchema = ({\n  $ref,\n  context,\n  optional,\n  result,\n  schema,\n}: {\n  /**\n   * When $ref is supplied, a node will be emitted to the file.\n   */\n  $ref?: string;\n  context: IR.Context;\n  /**\n   * Accept `optional` to handle optional object properties. We can't handle\n   * this inside the object function because `.optional()` must come before\n   * `.default()` which is handled in this function.\n   */\n  optional?: boolean;\n  result: Result;\n  schema: IR.SchemaObject;\n}): ts.Expression => {\n  const file = context.file({ id: zodId })!;\n\n  let expression: ts.Expression | undefined;\n  let identifier: ReturnType<typeof file.identifier> | undefined;\n\n  if ($ref) {\n    result.circularReferenceTracker.add($ref);\n\n    identifier = file.identifier({\n      $ref,\n      create: true,\n      nameTransformer,\n      namespace: 'value',\n    });\n  }\n\n  if (schema.$ref) {\n    const isCircularReference = result.circularReferenceTracker.has(\n      schema.$ref,\n    );\n\n    // if $ref hasn't been processed yet, inline it to avoid the\n    // \"Block-scoped variable used before its declaration.\" error\n    // this could be (maybe?) fixed by reshuffling the generation order\n    let identifierRef = file.identifier({\n      $ref: schema.$ref,\n      nameTransformer,\n      namespace: 'value',\n    });\n\n    if (!identifierRef.name) {\n      const ref = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      expression = schemaToZodSchema({\n        context,\n        result,\n        schema: ref,\n      });\n\n      identifierRef = file.identifier({\n        $ref: schema.$ref,\n        nameTransformer,\n        namespace: 'value',\n      });\n    }\n\n    // if `identifierRef.name` is falsy, we already set expression above\n    if (identifierRef.name) {\n      const refIdentifier = compiler.identifier({ text: identifierRef.name });\n      if (isCircularReference) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: lazyIdentifier,\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              statements: [\n                compiler.returnStatement({\n                  expression: refIdentifier,\n                }),\n              ],\n            }),\n          ],\n        });\n        result.hasCircularReference = true;\n      } else {\n        expression = refIdentifier;\n      }\n    }\n  } else if (schema.type) {\n    expression = schemaTypeToZodSchema({\n      context,\n      result,\n      schema,\n    });\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) =>\n        schemaToZodSchema({\n          context,\n          result,\n          schema: item,\n        }),\n      );\n\n      if (schema.logicalOperator === 'and') {\n        const firstSchema = schema.items[0]!;\n        // we want to add an intersection, but not every schema can use the same API.\n        // if the first item contains another array or not an object, we cannot use\n        // `.merge()` as that does not exist on `.union()` and non-object schemas.\n        if (\n          firstSchema.logicalOperator === 'or' ||\n          (firstSchema.type && firstSchema.type !== 'object')\n        ) {\n          expression = compiler.callExpression({\n            functionName: compiler.propertyAccessExpression({\n              expression: zIdentifier,\n              name: intersectionIdentifier,\n            }),\n            parameters: itemTypes,\n          });\n        } else {\n          expression = itemTypes[0];\n          itemTypes.slice(1).forEach((item) => {\n            expression = compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: expression!,\n                name: mergeIdentifier,\n              }),\n              parameters: [item],\n            });\n          });\n        }\n      } else {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: unionIdentifier,\n          }),\n          parameters: [\n            compiler.arrayLiteralExpression({\n              elements: itemTypes,\n            }),\n          ],\n        });\n      }\n    } else {\n      expression = schemaToZodSchema({\n        context,\n        result,\n        schema,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    expression = schemaTypeToZodSchema({\n      context,\n      result,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  if ($ref) {\n    result.circularReferenceTracker.delete($ref);\n  }\n\n  if (expression) {\n    if (schema.accessScope === 'read') {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: readonlyIdentifier,\n        }),\n      });\n    }\n\n    if (optional) {\n      expression = compiler.callExpression({\n        functionName: compiler.propertyAccessExpression({\n          expression,\n          name: optionalIdentifier,\n        }),\n      });\n    }\n\n    if (schema.default !== undefined) {\n      const callParameter = compiler.valueToExpression({\n        value: schema.default,\n      });\n      if (callParameter) {\n        expression = compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression,\n            name: defaultIdentifier,\n          }),\n          parameters: [callParameter],\n        });\n      }\n    }\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if (identifier?.name) {\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: expression!,\n      name: identifier.name,\n      typeName: result.hasCircularReference\n        ? (compiler.propertyAccessExpression({\n            expression: zIdentifier,\n            name: 'ZodTypeAny',\n          }) as unknown as ts.TypeNode)\n        : undefined,\n    });\n    file.add(statement);\n  }\n\n  return expression!;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: zodId,\n    identifierCase: 'camelCase',\n    path: plugin.output,\n  });\n\n  file.import({\n    module: 'zod',\n    name: 'z',\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    operationToZodSchema({\n      context,\n      operation,\n      result,\n    });\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    const result: Result = {\n      circularReferenceTracker: new Set(),\n      hasCircularReference: false,\n    };\n\n    schemaToZodSchema({\n      $ref,\n      context,\n      result,\n      schema,\n    });\n  });\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { irRef } from '../../../utils/ref';\nimport { stringCase } from '../../../utils/stringCase';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\ninterface OperationIRRef {\n  /**\n   * Operation ID\n   */\n  id: string;\n}\n\nconst bigIntExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const bigIntCallExpression =\n    dataExpression !== undefined\n      ? compiler.callExpression({\n          functionName: 'BigInt',\n          parameters: [\n            compiler.callExpression({\n              functionName: compiler.propertyAccessExpression({\n                expression: dataExpression,\n                name: 'toString',\n              }),\n            }),\n          ],\n        })\n      : undefined;\n\n  if (bigIntCallExpression) {\n    if (typeof dataExpression === 'string') {\n      return [bigIntCallExpression];\n    }\n\n    if (dataExpression) {\n      return [\n        compiler.assignment({\n          left: dataExpression,\n          right: bigIntCallExpression,\n        }),\n      ];\n    }\n  }\n\n  return [];\n};\n\nconst dateExpressions = ({\n  dataExpression,\n}: {\n  dataExpression?: ts.Expression | string;\n}): Array<ts.Expression> => {\n  const identifierDate = compiler.identifier({ text: 'Date' });\n\n  if (typeof dataExpression === 'string') {\n    return [\n      compiler.newExpression({\n        argumentsArray: [compiler.identifier({ text: dataExpression })],\n        expression: identifierDate,\n      }),\n    ];\n  }\n\n  if (dataExpression) {\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.newExpression({\n          argumentsArray: [dataExpression],\n          expression: identifierDate,\n        }),\n      }),\n    ];\n  }\n\n  return [];\n};\n\nexport const operationTransformerIrRef = ({\n  id,\n  type,\n}: OperationIRRef & {\n  type: 'data' | 'error' | 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'data':\n      affix = 'DataResponseTransformer';\n      break;\n    case 'error':\n      affix = 'ErrorResponseTransformer';\n      break;\n    case 'response':\n      affix = 'ResponseTransformer';\n      break;\n  }\n  return `${irRef}${stringCase({\n    // TODO: parser - do not pascalcase for functions, only for types\n    case: 'camelCase',\n    value: id,\n  })}${affix}`;\n};\n\nconst schemaIrRef = ({\n  $ref,\n  type,\n}: {\n  $ref: string;\n  type: 'response';\n}): string => {\n  let affix = '';\n  switch (type) {\n    case 'response':\n      affix = 'SchemaResponseTransformer';\n      break;\n  }\n  const parts = $ref.split('/');\n  return `${parts.slice(0, parts.length - 1).join('/')}/${stringCase({\n    case: 'camelCase',\n    value: parts[parts.length - 1]!,\n  })}${affix}`;\n};\n\nexport const schemaResponseTransformerRef = ({\n  $ref,\n}: {\n  $ref: string;\n}): string => schemaIrRef({ $ref, type: 'response' });\n\nexport const transformersId = 'transformers';\nconst dataVariableName = 'data';\n\nconst ensureStatements = (\n  nodes: Array<ts.Expression | ts.Statement>,\n): Array<ts.Statement> =>\n  nodes.map((node) =>\n    ts.isStatement(node)\n      ? node\n      : compiler.expressionToStatement({ expression: node }),\n  );\n\nconst isNodeReturnStatement = ({\n  node,\n}: {\n  node: ts.Expression | ts.Statement;\n}) => node.kind === ts.SyntaxKind.ReturnStatement;\n\nconst schemaResponseTransformerNodes = ({\n  context,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const identifierData = compiler.identifier({ text: dataVariableName });\n  const nodes = processSchemaType({\n    context,\n    dataExpression: identifierData,\n    plugin,\n    schema,\n  });\n  // append return statement if one does not already exist\n  if (\n    nodes.length &&\n    !isNodeReturnStatement({ node: nodes[nodes.length - 1]! })\n  ) {\n    nodes.push(compiler.returnStatement({ expression: identifierData }));\n  }\n  return nodes;\n};\n\nconst processSchemaType = ({\n  context,\n  dataExpression,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  dataExpression?: ts.Expression | string;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): Array<ts.Expression | ts.Statement> => {\n  const file = context.file({ id: transformersId })!;\n\n  if (schema.$ref) {\n    let identifier = file.identifier({\n      $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n      create: true,\n      namespace: 'value',\n    });\n\n    if (identifier.created && identifier.name) {\n      // create each schema response transformer only once\n      const refSchema = context.resolveIrRef<IR.SchemaObject>(schema.$ref);\n      const nodes = schemaResponseTransformerNodes({\n        context,\n        plugin,\n        schema: refSchema,\n      });\n      if (nodes.length) {\n        const node = compiler.constVariable({\n          expression: compiler.arrowFunction({\n            async: false,\n            multiLine: true,\n            parameters: [\n              {\n                name: dataVariableName,\n                // TODO: parser - add types, generate types without transforms\n                type: compiler.keywordTypeNode({ keyword: 'any' }),\n              },\n            ],\n            statements: ensureStatements(nodes),\n          }),\n          name: identifier.name,\n        });\n        file.add(node);\n      } else {\n        // the created schema response transformer was empty, do not generate\n        // it and prevent any future attempts\n        identifier = file.blockIdentifier({\n          $ref: schemaResponseTransformerRef({ $ref: schema.$ref }),\n          namespace: 'value',\n        });\n      }\n    }\n\n    if (identifier.name) {\n      const callExpression = compiler.callExpression({\n        functionName: identifier.name,\n        parameters: [dataExpression],\n      });\n\n      if (dataExpression) {\n        return [\n          typeof dataExpression === 'string'\n            ? callExpression\n            : compiler.assignment({\n                left: dataExpression,\n                right: callExpression,\n              }),\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (schema.type === 'array') {\n    if (!dataExpression || typeof dataExpression === 'string') {\n      return [];\n    }\n\n    // TODO: parser - handle tuples and complex arrays\n    const nodes = !schema.items\n      ? []\n      : processSchemaType({\n          context,\n          plugin,\n          schema: {\n            ...schema,\n            type: undefined,\n          },\n        });\n\n    if (!nodes.length) {\n      return [];\n    }\n\n    return [\n      compiler.assignment({\n        left: dataExpression,\n        right: compiler.callExpression({\n          functionName: compiler.propertyAccessExpression({\n            expression: dataExpression,\n            name: 'map',\n          }),\n          parameters: [\n            compiler.arrowFunction({\n              multiLine: true,\n              parameters: [\n                {\n                  name: 'item',\n                  type: 'any',\n                },\n              ],\n              statements:\n                nodes.length === 1\n                  ? ts.isStatement(nodes[0]!)\n                    ? []\n                    : [\n                        compiler.returnStatement({\n                          expression: nodes[0],\n                        }),\n                      ]\n                  : ensureStatements(nodes),\n            }),\n          ],\n        }),\n      }),\n    ];\n  }\n\n  if (schema.type === 'object') {\n    let nodes: Array<ts.Expression | ts.Statement> = [];\n    const required = schema.required ?? [];\n\n    for (const name in schema.properties) {\n      const property = schema.properties[name]!;\n      const propertyAccessExpression = compiler.propertyAccessExpression({\n        expression: dataExpression || dataVariableName,\n        name,\n      });\n      const propertyNodes = processSchemaType({\n        context,\n        dataExpression: propertyAccessExpression,\n        plugin,\n        schema: property,\n      });\n      if (propertyNodes.length) {\n        if (required.includes(name)) {\n          nodes = nodes.concat(propertyNodes);\n        } else {\n          nodes.push(\n            compiler.ifStatement({\n              expression: propertyAccessExpression,\n              thenStatement: compiler.block({\n                statements: ensureStatements(propertyNodes),\n              }),\n            }),\n          );\n        }\n      }\n    }\n\n    if (nodes.length) {\n      nodes.push(\n        compiler.returnStatement({\n          expression:\n            typeof dataExpression === 'string'\n              ? compiler.identifier({ text: dataExpression })\n              : dataExpression,\n        }),\n      );\n    }\n\n    return nodes;\n  }\n\n  if (\n    plugin.dates &&\n    schema.type === 'string' &&\n    (schema.format === 'date' || schema.format === 'date-time')\n  ) {\n    return dateExpressions({ dataExpression });\n  }\n\n  if (plugin.bigInt && schema.type === 'integer' && schema.format === 'int64') {\n    return bigIntExpressions({ dataExpression });\n  }\n\n  if (schema.items) {\n    if (schema.items.length === 1) {\n      return processSchemaType({\n        context,\n        dataExpression: 'item',\n        plugin,\n        schema: schema.items[0]!,\n      });\n    }\n\n    let arrayNodes: Array<ts.Expression | ts.Statement> = [];\n    // process 2 items if one of them is null\n    if (\n      schema.logicalOperator === 'and' ||\n      (schema.items.length === 2 &&\n        schema.items.find(\n          (item) => item.type === 'null' || item.type === 'void',\n        ))\n    ) {\n      for (const item of schema.items) {\n        const nodes = processSchemaType({\n          context,\n          dataExpression: dataExpression || 'item',\n          plugin,\n          schema: item,\n        });\n        if (nodes.length) {\n          if (dataExpression) {\n            arrayNodes = arrayNodes.concat(nodes);\n          } else {\n            const identifierItem = compiler.identifier({ text: 'item' });\n            // processed means the item was transformed\n            arrayNodes.push(\n              compiler.ifStatement({\n                expression: identifierItem,\n                thenStatement: compiler.block({\n                  statements:\n                    nodes.length === 1\n                      ? ts.isStatement(nodes[0]!)\n                        ? []\n                        : [\n                            compiler.returnStatement({\n                              expression: nodes[0],\n                            }),\n                          ]\n                      : ensureStatements(nodes),\n                }),\n              }),\n              compiler.returnStatement({ expression: identifierItem }),\n            );\n          }\n        }\n      }\n      return arrayNodes;\n    }\n\n    // assume enums do not contain transformable values\n    if (schema.type !== 'enum') {\n      console.warn(\n        `❗️ Transformers warning: schema ${JSON.stringify(schema)} is too complex and won't be currently processed. This will likely produce an incomplete transformer which is not what you want. Please open an issue if you'd like this improved https://github.com/hey-api/openapi-ts/issues`,\n      );\n    }\n  }\n\n  return [];\n};\n\n// handles only response transformers for now\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: transformersId,\n    path: plugin.output,\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    const { response } = operationResponsesMap(operation);\n\n    if (!response) {\n      return;\n    }\n\n    if (response.items && response.items.length > 1) {\n      if (context.config.logs.level === 'debug') {\n        console.warn(\n          `❗️ Transformers warning: route ${`${operation.method.toUpperCase()} ${operation.path}`} has ${response.items.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n        );\n      }\n      return;\n    }\n\n    const identifierResponse = context.file({ id: 'types' })!.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'response' }),\n      namespace: 'type',\n    });\n    if (!identifierResponse.name) {\n      return;\n    }\n\n    let identifierResponseTransformer = file.identifier({\n      $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n      create: true,\n      namespace: 'value',\n    });\n    if (!identifierResponseTransformer.name) {\n      return;\n    }\n\n    // TODO: parser - consider handling simple string response which is also a date\n    const nodes = schemaResponseTransformerNodes({\n      context,\n      plugin,\n      schema: response,\n    });\n    if (nodes.length) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: 'types' }),\n        name: identifierResponse.name,\n      });\n      const responseTransformerNode = compiler.constVariable({\n        exportConst: true,\n        expression: compiler.arrowFunction({\n          async: true,\n          multiLine: true,\n          parameters: [\n            {\n              name: dataVariableName,\n              // TODO: parser - add types, generate types without transforms\n              type: compiler.keywordTypeNode({ keyword: 'any' }),\n            },\n          ],\n          returnType: compiler.typeReferenceNode({\n            typeArguments: [\n              compiler.typeReferenceNode({\n                typeName: identifierResponse.name,\n              }),\n            ],\n            typeName: 'Promise',\n          }),\n          statements: ensureStatements(nodes),\n        }),\n        name: identifierResponseTransformer.name,\n      });\n      file.add(responseTransformerNode);\n    } else {\n      // the created schema response transformer was empty, do not generate\n      // it and prevent any future attempts\n      identifierResponseTransformer = file.blockIdentifier({\n        $ref: operationTransformerIrRef({\n          id: operation.id,\n          type: 'response',\n        }),\n        namespace: 'value',\n      });\n    }\n  });\n};\n","import type { Identifier, TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { operationIrRef } from '../../shared/utils/ref';\n\nexport const typesId = 'types';\n\nfunction refIdentifier<T extends Identifier>(\n  identifier: T,\n  onGet?: (identifier: T) => void,\n): T {\n  return {\n    ...identifier,\n    get name() {\n      onGet?.(identifier);\n      return identifier.name;\n    },\n  };\n}\n\nexport const importIdentifierData = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierData = context.file({ id: 'types' })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierData, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: 'types' }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n\nexport const importIdentifierError = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierError = context.file({ id: 'types' })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'error' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierError, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: 'types' }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n\nexport const importIdentifierResponse = ({\n  context,\n  file,\n  operation,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n}): Identifier => {\n  const identifierResponse = context.file({ id: 'types' })!.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'response' }),\n    namespace: 'type',\n  });\n  return refIdentifier(identifierResponse, (identifier) => {\n    if (identifier.name) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: 'types' }),\n        name: identifier.name,\n      });\n    }\n  });\n};\n","import type {\n  ClassElement,\n  Comments,\n  FunctionParameter,\n  Node,\n} from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport type {\n  FunctionTypeParameter,\n  ObjectValue,\n} from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { TypeScriptFile } from '../../../generate/files';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Model,\n  Operation,\n  OperationParameter,\n  Service,\n} from '../../../types/client';\nimport type { Config as ClientConfig } from '../../../types/config';\nimport {\n  getConfig,\n  isLegacyClient,\n  legacyNameFromConfig,\n} from '../../../utils/config';\nimport { escapeComment, escapeName } from '../../../utils/escape';\nimport { reservedJavaScriptKeywordsRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { transformServiceName } from '../../../utils/transform';\nimport { setUniqueTypeName } from '../../../utils/type';\nimport { unique } from '../../../utils/unique';\nimport type { Plugin } from '../../types';\nimport type { Config } from './types';\n\ntype OnNode = (node: Node) => void;\ntype OnImport = (name: string) => void;\n\nexport const generateImport = ({\n  meta,\n  onImport,\n  ...setUniqueTypeNameArgs\n}: Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> & {\n    onImport: OnImport;\n  }) => {\n  // generate imports only for top-level models\n  if (!meta) {\n    // TODO: this used to return undefined. We could refactor this function to\n    // return undefined again, but we will need to improve types so we can safely\n    // do `const { name } = generateImport({ meta: ... })` (note when meta is defined\n    // we guarantee the response to be an object). For now, nothing relies on this\n    // response shape except for plugins, so it was acceptable to patch it that way\n    return { created: false, name: '' };\n  }\n\n  const { created, name } = setUniqueTypeName({\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (name) {\n    onImport(name);\n  }\n  return { created, name };\n};\n\nexport const modelResponseTransformerTypeName = (name: string) =>\n  `${name}ModelResponseTransformer`;\n\nexport const operationDataTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Data`;\n\nexport const operationErrorTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Error`;\n\n// operation response type ends with \"Response\", it's enough to append \"Transformer\"\nexport const operationResponseTransformerTypeName = (name: string) =>\n  `${name}Transformer`;\n\nexport const operationResponseTypeName = (name: string) =>\n  `${stringCase({\n    case: 'PascalCase',\n    value: name,\n  })}Response`;\n\n/**\n * @param importedType unique type name returned from `setUniqueTypeName()`\n * @returns options type\n */\nexport const operationOptionsLegacyParserType = ({\n  importedType,\n  throwOnError,\n}: {\n  importedType?: string | false;\n  throwOnError?: string;\n}) => {\n  const optionsName = clientApi.OptionsLegacyParser.name;\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${importedType || 'unknown'}, ${throwOnError}>`;\n  }\n  return importedType ? `${optionsName}<${importedType}>` : optionsName;\n};\n\nconst toOperationParamType = (\n  client: Client,\n  operation: Operation,\n): FunctionParameter[] => {\n  const config = getConfig();\n\n  const { name: importedType } = setUniqueTypeName({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationDataTypeName,\n  });\n\n  const isRequired = isOperationParameterRequired(operation.parameters);\n\n  if (!isLegacyClient(config)) {\n    return [\n      {\n        isRequired,\n        name: 'options',\n        type: operationOptionsLegacyParserType({\n          importedType,\n          throwOnError: 'ThrowOnError',\n        }),\n      },\n    ];\n  }\n\n  if (!operation.parameters.length) {\n    return [];\n  }\n\n  const getDefaultPrintable = (\n    p: OperationParameter | Model,\n  ): string | undefined => {\n    if (p.default === undefined) {\n      return undefined;\n    }\n    return JSON.stringify(p.default, null, 4);\n  };\n\n  // legacy configuration\n  if (!config.useOptions) {\n    return operation.parameters.map((p) => {\n      const typePath = `${importedType}['${p.name}']`;\n      return {\n        default: p?.default,\n        isRequired:\n          (!p.isRequired && !getDefaultPrintable(p) ? '?' : '') === '',\n        name: p.name,\n        type: typePath,\n      };\n    });\n  }\n\n  return [\n    {\n      default: isRequired ? undefined : {},\n      name: 'data',\n      type: importedType,\n    },\n  ];\n};\n\nconst toOperationReturnType = (client: Client, operation: Operation) => {\n  const config = getConfig();\n\n  let returnType = compiler.typeNode('void');\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  // TODO: we should return nothing when successes don't exist\n  // can't remove this logic without removing request/name config\n  // as it complicates things\n  if (successResponses.length) {\n    const { name: importedType } = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationResponseTypeName,\n    });\n    returnType = compiler.typeUnionNode({\n      types: [importedType],\n    });\n  }\n\n  if (\n    config.useOptions &&\n    config.plugins['@hey-api/sdk']?.response === 'response'\n  ) {\n    returnType = compiler.typeNode('ApiResult', [returnType]);\n  }\n\n  if (config.client.name === 'legacy/angular') {\n    returnType = compiler.typeNode('Observable', [returnType]);\n  } else {\n    returnType = compiler.typeNode('CancelablePromise', [returnType]);\n  }\n\n  return returnType;\n};\n\nconst toOperationComment = (operation: Operation): Comments => {\n  const config = getConfig();\n\n  if (!isLegacyClient(config)) {\n    const comment = [\n      operation.deprecated && '@deprecated',\n      operation.summary && escapeComment(operation.summary),\n      operation.description && escapeComment(operation.description),\n    ];\n    return comment;\n  }\n\n  let params: string[] = [];\n\n  if (operation.parameters.length) {\n    if (config.useOptions) {\n      params = [\n        '@param data The data for the request.',\n        ...operation.parameters.map(\n          (parameter) =>\n            `@param data.${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n        ),\n      ];\n    } else {\n      params = operation.parameters.map(\n        (parameter) =>\n          `@param ${parameter.name} ${parameter.description ? escapeComment(parameter.description) : ''}`,\n      );\n    }\n  }\n\n  const successResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('success'),\n  );\n\n  const comment = [\n    operation.deprecated && '@deprecated',\n    operation.summary && escapeComment(operation.summary),\n    operation.description && escapeComment(operation.description),\n    ...params,\n    ...successResponses.map(\n      (response) =>\n        `@returns ${response.type} ${response.description ? escapeComment(response.description) : ''}`,\n    ),\n    '@throws ApiError',\n  ];\n  return comment;\n};\n\nconst toRequestOptions = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport: OnImport | undefined;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const name = operationResponseTypeName(operation.name);\n  const { name: responseTransformerName } = setUniqueTypeName({\n    client,\n    meta: {\n      $ref: `transformers/${name}`,\n      name,\n    },\n    nameTransformer: operationResponseTransformerTypeName,\n  });\n\n  if (responseTransformerName) {\n    onImport(responseTransformerName);\n  }\n\n  if (!isLegacyClient(config)) {\n    let obj: ObjectValue[] = [\n      {\n        spread: 'options',\n      },\n    ];\n\n    const bodyParameters = operation.parameters.filter(\n      (parameter) => parameter.in === 'body' || parameter.in === 'formData',\n    );\n    const contents = bodyParameters\n      .map(\n        (parameter) =>\n          parameter.mediaType ||\n          (parameter.in === 'formData' ? 'multipart/form-data' : undefined),\n      )\n      .filter(Boolean)\n      .filter(unique);\n    if (contents.length === 1) {\n      if (contents[0] === 'multipart/form-data') {\n        obj = [\n          ...obj,\n          {\n            spread: 'formDataBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                // no need for Content-Type header, browser will set it automatically\n                key: 'Content-Type',\n                value: null,\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('formDataBodySerializer');\n      }\n\n      if (contents[0] === 'application/x-www-form-urlencoded') {\n        obj = [\n          ...obj,\n          {\n            spread: 'urlSearchParamsBodySerializer',\n          },\n          {\n            key: 'headers',\n            value: [\n              {\n                key: 'Content-Type',\n                value: contents[0],\n              },\n              {\n                spread: 'options?.headers',\n              },\n            ],\n          },\n        ];\n        onClientImport?.('urlSearchParamsBodySerializer');\n      }\n    }\n\n    // TODO: set parseAs to skip inference if every result has the same\n    // content type. currently impossible because successes do not contain\n    // header information\n\n    obj = [\n      ...obj,\n      {\n        key: 'url',\n        value: operation.path,\n      },\n    ];\n\n    if (responseTransformerName) {\n      obj = [\n        ...obj,\n        {\n          key: 'responseTransformer',\n          value: responseTransformerName,\n        },\n      ];\n    }\n\n    return compiler.objectExpression({\n      identifiers: ['responseTransformer'],\n      obj,\n    });\n  }\n\n  const toObj = (parameters: OperationParameter[]) =>\n    parameters.reduce(\n      (prev, curr) => {\n        const key = curr.prop;\n        const value = config.useOptions ? `data.${curr.name}` : curr.name;\n        if (key === value) {\n          prev[key] = key;\n        } else if (escapeName(key) === key) {\n          prev[key] = value;\n        } else {\n          prev[`'${key}'`] = value;\n        }\n        return prev;\n      },\n      {} as Record<string, unknown>,\n    );\n\n  const obj: Record<string, any> = {\n    method: operation.method,\n    url: operation.path,\n  };\n\n  if (operation.parametersPath.length) {\n    obj.path = toObj(operation.parametersPath);\n  }\n\n  if (operation.parametersCookie.length) {\n    obj.cookies = toObj(operation.parametersCookie);\n  }\n\n  if (operation.parametersHeader.length) {\n    obj.headers = toObj(operation.parametersHeader);\n  }\n\n  if (operation.parametersQuery.length) {\n    obj.query = toObj(operation.parametersQuery);\n  }\n\n  if (operation.parametersForm.length) {\n    obj.formData = toObj(operation.parametersForm);\n  }\n\n  if (operation.parametersBody) {\n    if (operation.parametersBody.in === 'formData') {\n      if (config.useOptions) {\n        obj.formData = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.formData = operation.parametersBody.name;\n      }\n    }\n    if (operation.parametersBody.in === 'body') {\n      if (config.useOptions) {\n        obj.body = `data.${operation.parametersBody.name}`;\n      } else {\n        obj.body = operation.parametersBody.name;\n      }\n    }\n  }\n\n  if (operation.parametersBody?.mediaType) {\n    obj.mediaType = operation.parametersBody?.mediaType;\n  }\n\n  if (operation.responseHeader) {\n    obj.responseHeader = operation.responseHeader;\n  }\n\n  if (responseTransformerName) {\n    obj.responseTransformer = responseTransformerName;\n  }\n\n  const errorResponses = operation.responses.filter((response) =>\n    response.responseTypes.includes('error'),\n  );\n  if (errorResponses.length > 0) {\n    const errors: Record<number | string, string> = {};\n    errorResponses.forEach((response) => {\n      errors[response.code] = response.description ?? '';\n    });\n    obj.errors = errors;\n  }\n\n  return compiler.objectExpression({\n    identifiers: [\n      'body',\n      'cookies',\n      'formData',\n      'headers',\n      'path',\n      'query',\n      'responseTransformer',\n    ],\n    obj,\n    shorthand: true,\n  });\n};\n\nexport const serviceFunctionIdentifier = ({\n  config,\n  handleIllegal,\n  id,\n  operation,\n}: {\n  config: ClientConfig;\n  handleIllegal?: boolean;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) => {\n  if (config.plugins['@hey-api/sdk']?.methodNameBuilder) {\n    return config.plugins['@hey-api/sdk'].methodNameBuilder(operation);\n  }\n\n  if (handleIllegal && id.match(reservedJavaScriptKeywordsRegExp)) {\n    return `${id}_`;\n  }\n\n  return id;\n};\n\nconst toOperationStatements = ({\n  client,\n  onClientImport,\n  onImport,\n  operation,\n}: {\n  client: Client;\n  onClientImport?: OnImport;\n  onImport: OnImport;\n  operation: Operation;\n}) => {\n  const config = getConfig();\n\n  const options = toRequestOptions({\n    client,\n    onClientImport,\n    onImport,\n    operation,\n  });\n\n  if (!isLegacyClient(config)) {\n    const errorType = setUniqueTypeName({\n      client,\n      meta: {\n        // TODO: this should be exact ref to operation for consistency,\n        // but name should work too as operation ID is unique\n        $ref: operation.name,\n        name: operation.name,\n      },\n      nameTransformer: operationErrorTypeName,\n    }).name;\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    const responseType = successResponses.length\n      ? setUniqueTypeName({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n        }).name\n      : 'void';\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: `(options?.client ?? client).${operation.method.toLocaleLowerCase()}`,\n        types:\n          errorType && responseType\n            ? [responseType, errorType, 'ThrowOnError']\n            : errorType\n              ? ['unknown', errorType, 'ThrowOnError']\n              : responseType\n                ? [responseType, 'unknown', 'ThrowOnError']\n                : [],\n      }),\n    ];\n  }\n\n  if (legacyNameFromConfig(config)) {\n    return [\n      compiler.returnFunctionCall({\n        args: [options],\n        name: 'this.httpRequest.request',\n      }),\n    ];\n  }\n\n  if (config.client.name === 'legacy/angular') {\n    return [\n      compiler.returnFunctionCall({\n        args: ['OpenAPI', 'this.http', options],\n        name: '__request',\n      }),\n    ];\n  }\n\n  return [\n    compiler.returnFunctionCall({\n      args: ['OpenAPI', options],\n      name: '__request',\n    }),\n  ];\n};\n\nconst processService = ({\n  client,\n  onClientImport,\n  onImport,\n  onNode,\n  plugin,\n  service,\n}: {\n  client: Client;\n  onClientImport: OnImport;\n  onImport: OnImport;\n  onNode: OnNode;\n  plugin: Plugin.Instance<Config>;\n  service: Service;\n}) => {\n  const config = getConfig();\n\n  const isLegacy = isLegacyClient(config);\n\n  for (const operation of service.operations) {\n    if (operation.parameters.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationDataTypeName,\n        onImport,\n      });\n    }\n\n    if (!isLegacy) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationErrorTypeName,\n        onImport,\n      });\n    }\n\n    const successResponses = operation.responses.filter((response) =>\n      response.responseTypes.includes('success'),\n    );\n    if (successResponses.length) {\n      generateImport({\n        client,\n        meta: {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        },\n        nameTransformer: operationResponseTypeName,\n        onImport,\n      });\n    }\n  }\n\n  const throwOnErrorTypeGeneric: FunctionTypeParameter = {\n    default: plugin.throwOnError,\n    extends: 'boolean',\n    name: 'ThrowOnError',\n  };\n\n  if (\n    !config.plugins['@hey-api/sdk']?.asClass &&\n    !legacyNameFromConfig(config)\n  ) {\n    for (const operation of service.operations) {\n      const compileFunctionParams = {\n        parameters: toOperationParamType(client, operation),\n        returnType: !isLegacy\n          ? undefined\n          : toOperationReturnType(client, operation),\n        statements: toOperationStatements({\n          client,\n          onClientImport,\n          onImport,\n          operation,\n        }),\n        types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n      };\n      const expression =\n        config.client.name === 'legacy/angular'\n          ? compiler.anonymousFunction(compileFunctionParams)\n          : compiler.arrowFunction(compileFunctionParams);\n      const statement = compiler.constVariable({\n        comment: toOperationComment(operation),\n        exportConst: true,\n        expression,\n        name: serviceFunctionIdentifier({\n          config,\n          handleIllegal: true,\n          id: operation.name,\n          operation,\n        }),\n      });\n      onNode(statement);\n    }\n    return;\n  }\n\n  let members: ClassElement[] = service.operations.map((operation) => {\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: toOperationComment(operation),\n      isStatic:\n        legacyNameFromConfig(config) === undefined &&\n        config.client.name !== 'legacy/angular',\n      name: serviceFunctionIdentifier({\n        config,\n        id: operation.name,\n        operation,\n      }),\n      parameters: toOperationParamType(client, operation),\n      returnType: !isLegacy\n        ? undefined\n        : toOperationReturnType(client, operation),\n      statements: toOperationStatements({\n        client,\n        onClientImport,\n        onImport,\n        operation,\n      }),\n      types: !isLegacy ? [throwOnErrorTypeGeneric] : undefined,\n    });\n    return node;\n  });\n\n  if (!members.length) {\n    return;\n  }\n\n  // Push constructor to front if needed\n  if (legacyNameFromConfig(config)) {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'httpRequest',\n            type: 'BaseHttpRequest',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  } else if (config.client.name === 'legacy/angular') {\n    members = [\n      compiler.constructorDeclaration({\n        multiLine: false,\n        parameters: [\n          {\n            accessLevel: 'public',\n            isReadOnly: true,\n            name: 'http',\n            type: 'HttpClient',\n          },\n        ],\n      }),\n      ...members,\n    ];\n  }\n\n  const statement = compiler.classDeclaration({\n    decorator:\n      config.client.name === 'legacy/angular'\n        ? { args: [{ providedIn: 'root' }], name: 'Injectable' }\n        : undefined,\n    members,\n    name: transformServiceName({\n      config,\n      name: service.name,\n    }),\n  });\n  onNode(statement);\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n  plugin,\n}) => {\n  const config = getConfig();\n\n  if (!config.client.name) {\n    throw new Error(\n      '🚫 client needs to be set to generate SDKs - which HTTP client do you want to use?',\n    );\n  }\n\n  const isLegacy = isLegacyClient(config);\n\n  const sdkOutput = 'sdk';\n\n  files.sdk = new TypeScriptFile({\n    dir: config.output.path,\n    name: `${sdkOutput}.ts`,\n  });\n\n  // Import required packages and core files.\n  if (!isLegacy) {\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createClient',\n    });\n    files.sdk.import({\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n      name: 'createConfig',\n    });\n    files.sdk.import({\n      ...clientApi.OptionsLegacyParser,\n      module: clientModulePath({ config, sourceOutput: sdkOutput }),\n    });\n  } else {\n    if (config.client.name === 'legacy/angular') {\n      files.sdk.import({\n        module: '@angular/core',\n        name: 'Injectable',\n      });\n\n      if (!legacyNameFromConfig(config)) {\n        files.sdk.import({\n          module: '@angular/common/http',\n          name: 'HttpClient',\n        });\n      }\n\n      files.sdk.import({\n        asType: true,\n        module: 'rxjs',\n        name: 'Observable',\n      });\n    } else {\n      files.sdk.import({\n        asType: true,\n        module: './core/CancelablePromise',\n        name: 'CancelablePromise',\n      });\n    }\n\n    if (config.plugins['@hey-api/sdk']?.response === 'response') {\n      files.sdk.import({\n        asType: true,\n        module: './core/ApiResult',\n        name: 'ApiResult',\n      });\n    }\n\n    if (legacyNameFromConfig(config)) {\n      files.sdk.import({\n        asType: config.client.name !== 'legacy/angular',\n        module: './core/BaseHttpRequest',\n        name: 'BaseHttpRequest',\n      });\n    } else {\n      files.sdk.import({\n        module: './core/OpenAPI',\n        name: 'OpenAPI',\n      });\n      files.sdk.import({\n        alias: '__request',\n        module: './core/request',\n        name: 'request',\n      });\n    }\n  }\n\n  // define client first\n  if (!isLegacy) {\n    const statement = compiler.constVariable({\n      exportConst: true,\n      expression: compiler.callExpression({\n        functionName: 'createClient',\n        parameters: [\n          compiler.callExpression({\n            functionName: 'createConfig',\n            parameters: [\n              plugin.throwOnError\n                ? compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'throwOnError',\n                        value: plugin.throwOnError,\n                      },\n                    ],\n                  })\n                : undefined,\n            ],\n          }),\n        ],\n      }),\n      name: 'client',\n    });\n    files.sdk.add(statement);\n  }\n\n  for (const service of client.services) {\n    processService({\n      client,\n      onClientImport: (imported) => {\n        files.sdk!.import({\n          module: clientModulePath({ config, sourceOutput: sdkOutput }),\n          name: imported,\n        });\n      },\n      onImport: (imported) => {\n        files.sdk!.import({\n          // this detection could be done safer, but it shouldn't cause any issues\n          asType: !imported.endsWith('Transformer'),\n          module: `./${files.types!.nameWithoutExtension()}`,\n          name: imported,\n        });\n      },\n      onNode: (node) => {\n        files.sdk!.add(node);\n      },\n      plugin,\n      service,\n    });\n  }\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport type { ObjectValue } from '../../../compiler/types';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport type { TypeScriptFile } from '../../../generate/files';\nimport {\n  hasOperationDataRequired,\n  statusCodeToGroup,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { getServiceName } from '../../../utils/postprocess';\nimport { transformServiceName } from '../../../utils/transform';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { zodId } from '../../zod/plugin';\nimport {\n  operationTransformerIrRef,\n  transformersId,\n} from '../transformers/plugin';\nimport {\n  importIdentifierData,\n  importIdentifierError,\n  importIdentifierResponse,\n} from '../typescript/ref';\nimport { serviceFunctionIdentifier } from './plugin-legacy';\nimport type { Config } from './types';\n\n// type copied from client packages\ninterface Auth {\n  in?: 'header' | 'query';\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const operationOptionsType = ({\n  context,\n  file,\n  operation,\n  throwOnError,\n}: {\n  context: IR.Context;\n  file: TypeScriptFile;\n  operation: IR.OperationObject;\n  throwOnError?: string;\n}) => {\n  const identifierData = importIdentifierData({ context, file, operation });\n\n  const optionsName = clientApi.Options.name;\n\n  // if (context.config.client.name === '@hey-api/client-nuxt') {\n  //   const identifierError = importIdentifierError({ context, file, operation });\n  //   return `${optionsName}<${identifierData?.name || 'unknown'}, ${identifierError?.name || 'unknown'}, TComposable>`;\n  // }\n\n  // TODO: refactor this to be more generic, works for now\n  if (throwOnError) {\n    return `${optionsName}<${identifierData?.name || 'unknown'}, ${throwOnError}>`;\n  }\n  return identifierData\n    ? `${optionsName}<${identifierData.name}>`\n    : optionsName;\n};\n\nconst sdkId = 'sdk';\n\n/**\n * Infers `responseType` value from provided response content type. This is\n * an adapted version of `getParseAs()` from the Fetch API client.\n *\n * From Axios documentation:\n * `responseType` indicates the type of data that the server will respond with\n * options are: 'arraybuffer', 'document', 'json', 'text', 'stream'\n * browser only: 'blob'\n */\nexport const getResponseType = (\n  contentType: string | null | undefined,\n):\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'stream'\n  | 'text'\n  | undefined => {\n  if (!contentType) {\n    return;\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  // Axios does not handle form data out of the box\n  // if (cleanContent === 'multipart/form-data') {\n  //   return 'formData';\n  // }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\n// TODO: parser - handle more security types\nconst securitySchemeObjectToAuthObject = ({\n  securitySchemeObject,\n}: {\n  securitySchemeObject: IR.SecurityObject;\n}): Auth | undefined => {\n  if (securitySchemeObject.type === 'oauth2') {\n    // TODO: parser - handle more/multiple oauth2 flows\n    if (securitySchemeObject.flows.password) {\n      return {\n        scheme: 'bearer',\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'apiKey') {\n    if (securitySchemeObject.in === 'header') {\n      return {\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    // TODO: parser - support cookies auth\n    if (securitySchemeObject.in === 'query') {\n      return {\n        in: securitySchemeObject.in,\n        name: securitySchemeObject.name,\n        type: 'apiKey',\n      };\n    }\n\n    return;\n  }\n\n  if (securitySchemeObject.type === 'http') {\n    if (\n      securitySchemeObject.scheme === 'bearer' ||\n      securitySchemeObject.scheme === 'basic'\n    ) {\n      return {\n        scheme: securitySchemeObject.scheme,\n        type: 'http',\n      };\n    }\n\n    return;\n  }\n};\n\nconst operationAuth = ({\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<Auth> => {\n  if (!operation.security || !plugin.auth) {\n    return [];\n  }\n\n  const auth: Array<Auth> = [];\n\n  for (const securitySchemeObject of operation.security) {\n    const authObject = securitySchemeObjectToAuthObject({\n      securitySchemeObject,\n    });\n    if (authObject) {\n      auth.push(authObject);\n    } else {\n      console.warn(\n        `❗️ SDK warning: unsupported security scheme. Please open an issue if you'd like it added https://github.com/hey-api/openapi-ts/issues\\n${JSON.stringify(securitySchemeObject, null, 2)}`,\n      );\n    }\n  }\n\n  return auth;\n};\n\nconst operationStatements = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}): Array<ts.Statement> => {\n  const file = context.file({ id: sdkId })!;\n  const sdkOutput = file.nameWithoutExtension();\n\n  const identifierError = importIdentifierError({ context, file, operation });\n  const identifierResponse = importIdentifierResponse({\n    context,\n    file,\n    operation,\n  });\n\n  // TODO: transform parameters\n  // const query = {\n  //   BarBaz: options.query.bar_baz,\n  //   qux_quux: options.query.qux_quux,\n  //   fooBar: options.query.foo_bar,\n  // };\n\n  // if (operation.parameters) {\n  //   for (const name in operation.parameters.query) {\n  //     const parameter = operation.parameters.query[name]\n  //     if (parameter.name !== fieldName({ context, name: parameter.name })) {\n  //       console.warn(parameter.name)\n  //     }\n  //   }\n  // }\n\n  const requestOptions: ObjectValue[] = [{ spread: 'options' }];\n\n  if (operation.body) {\n    switch (operation.body.type) {\n      case 'form-data':\n        requestOptions.push({ spread: 'formDataBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'formDataBodySerializer',\n        });\n        break;\n      case 'json':\n        break;\n      case 'url-search-params':\n        requestOptions.push({ spread: 'urlSearchParamsBodySerializer' });\n        file.import({\n          module: clientModulePath({\n            config: context.config,\n            sourceOutput: sdkOutput,\n          }),\n          name: 'urlSearchParamsBodySerializer',\n        });\n        break;\n    }\n\n    requestOptions.push({\n      key: 'headers',\n      value: [\n        {\n          key: 'Content-Type',\n          // form-data does not need Content-Type header, browser will set it automatically\n          value:\n            operation.body.type === 'form-data'\n              ? null\n              : operation.body.mediaType,\n        },\n        {\n          spread: 'options?.headers',\n        },\n      ],\n    });\n  }\n\n  if (context.config.client.name === '@hey-api/client-axios') {\n    // try to infer `responseType` option for Axios. We don't need this in\n    // Fetch API client because it automatically detects the correct response\n    // during runtime.\n    for (const statusCode in operation.responses) {\n      // this doesn't handle default status code for now\n      if (statusCodeToGroup({ statusCode }) === '2XX') {\n        const response = operation.responses[statusCode];\n        const responseType = getResponseType(response?.mediaType);\n        // json is the default, skip it\n        if (responseType && responseType !== 'json') {\n          requestOptions.push({\n            key: 'responseType',\n            value: responseType,\n          });\n        }\n      }\n    }\n  }\n\n  // TODO: parser - set parseAs to skip inference if every response has the same\n  // content type. currently impossible because successes do not contain\n  // header information\n\n  const auth = operationAuth({ context, operation, plugin });\n  if (auth.length) {\n    requestOptions.push({\n      key: 'security',\n      value: compiler.arrayLiteralExpression({ elements: auth }),\n    });\n  }\n\n  for (const name in operation.parameters?.query) {\n    const parameter = operation.parameters.query[name]!;\n    if (\n      (parameter.schema.type === 'array' ||\n        parameter.schema.type === 'tuple') &&\n      (parameter.style !== 'form' || !parameter.explode)\n    ) {\n      // override the default settings for `querySerializer`\n      requestOptions.push({\n        key: 'querySerializer',\n        value: [\n          {\n            key: 'array',\n            value: [\n              {\n                key: 'explode',\n                value: false,\n              },\n              {\n                key: 'style',\n                value: 'form',\n              },\n            ],\n          },\n        ],\n      });\n      break;\n    }\n  }\n\n  if (plugin.transformer === '@hey-api/transformers') {\n    const identifierTransformer = context\n      .file({ id: transformersId })!\n      .identifier({\n        $ref: operationTransformerIrRef({ id: operation.id, type: 'response' }),\n        namespace: 'value',\n      });\n\n    if (identifierTransformer.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: transformersId,\n        }),\n        name: identifierTransformer.name,\n      });\n\n      requestOptions.push({\n        key: 'responseTransformer',\n        value: identifierTransformer.name,\n      });\n    }\n  }\n\n  if (plugin.validator === 'zod') {\n    const identifierSchema = context.file({ id: zodId })!.identifier({\n      $ref: operationIrRef({\n        case: 'camelCase',\n        id: operation.id,\n        type: 'response',\n      }),\n      namespace: 'value',\n    });\n\n    if (identifierSchema.name) {\n      file.import({\n        module: file.relativePathToFile({\n          context,\n          id: zodId,\n        }),\n        name: identifierSchema.name,\n      });\n\n      requestOptions.push({\n        key: 'responseValidator',\n        value: compiler.arrowFunction({\n          async: true,\n          parameters: [\n            {\n              name: 'data',\n            },\n          ],\n          statements: [\n            compiler.returnStatement({\n              expression: compiler.awaitExpression({\n                expression: compiler.callExpression({\n                  functionName: compiler.propertyAccessExpression({\n                    expression: compiler.identifier({\n                      text: identifierSchema.name,\n                    }),\n                    name: compiler.identifier({ text: 'parseAsync' }),\n                  }),\n                  parameters: [compiler.identifier({ text: 'data' })],\n                }),\n              }),\n            }),\n          ],\n        }),\n      });\n    }\n  }\n\n  requestOptions.push({\n    key: 'url',\n    value: operation.path,\n  });\n\n  return [\n    compiler.returnFunctionCall({\n      args: [\n        compiler.objectExpression({\n          identifiers: ['responseTransformer'],\n          obj: requestOptions,\n        }),\n      ],\n      name: `(options?.client ?? client).${operation.method}`,\n      types: [\n        identifierResponse.name || 'unknown',\n        identifierError.name || 'unknown',\n        'ThrowOnError',\n      ],\n    }),\n  ];\n};\n\nconst generateClassSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: sdkId })!;\n  const sdks = new Map<string, Array<ts.MethodDeclaration>>();\n\n  context.subscribe('operation', ({ operation }) => {\n    const node = compiler.methodDeclaration({\n      accessLevel: 'public',\n      comment: [\n        operation.deprecated && '@deprecated',\n        operation.summary && escapeComment(operation.summary),\n        operation.description && escapeComment(operation.description),\n      ],\n      isStatic: true,\n      name: serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: false,\n        id: operation.id,\n        operation,\n      }),\n      parameters: [\n        {\n          isRequired: hasOperationDataRequired(operation),\n          name: 'options',\n          type: operationOptionsType({\n            context,\n            file,\n            operation,\n            throwOnError: 'ThrowOnError',\n          }),\n        },\n      ],\n      returnType: undefined,\n      statements: operationStatements({\n        context,\n        operation,\n        plugin,\n      }),\n      types: [\n        {\n          default: plugin.throwOnError,\n          extends: 'boolean',\n          name: 'ThrowOnError',\n        },\n      ],\n    });\n\n    const uniqueTags = Array.from(new Set(operation.tags));\n    if (!uniqueTags.length) {\n      uniqueTags.push('default');\n    }\n\n    for (const tag of uniqueTags) {\n      const name = getServiceName(tag);\n      const nodes = sdks.get(name) ?? [];\n      nodes.push(node);\n      sdks.set(name, nodes);\n    }\n  });\n\n  context.subscribe('after', () => {\n    for (const [name, nodes] of sdks) {\n      const node = compiler.classDeclaration({\n        decorator: undefined,\n        members: nodes,\n        name: transformServiceName({\n          config: context.config,\n          name,\n        }),\n      });\n      file.add(node);\n    }\n  });\n};\n\nconst generateFlatSdk = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: sdkId })!;\n\n  context.subscribe('operation', ({ operation }) => {\n    const node = compiler.constVariable({\n      comment: [\n        operation.deprecated && '@deprecated',\n        operation.summary && escapeComment(operation.summary),\n        operation.description && escapeComment(operation.description),\n      ],\n      exportConst: true,\n      expression: compiler.arrowFunction({\n        parameters: [\n          {\n            isRequired: hasOperationDataRequired(operation),\n            name: 'options',\n            type: operationOptionsType({\n              context,\n              file,\n              operation,\n              throwOnError: 'ThrowOnError',\n            }),\n          },\n        ],\n        returnType: undefined,\n        statements: operationStatements({\n          context,\n          operation,\n          plugin,\n        }),\n        types: [\n          {\n            default: plugin.throwOnError,\n            extends: 'boolean',\n            name: 'ThrowOnError',\n          },\n        ],\n      }),\n      name: serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: true,\n        id: operation.id,\n        operation,\n      }),\n    });\n    file.add(node);\n  });\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  if (!context.config.client.name) {\n    throw new Error(\n      '🚫 client needs to be set to generate SDKs - which HTTP client do you want to use?',\n    );\n  }\n\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: sdkId,\n    path: plugin.output,\n  });\n  const sdkOutput = file.nameWithoutExtension();\n\n  // import required packages and core files\n  const clientModule = clientModulePath({\n    config: context.config,\n    sourceOutput: sdkOutput,\n  });\n  file.import({\n    module: clientModule,\n    name: 'createClient',\n  });\n  file.import({\n    module: clientModule,\n    name: 'createConfig',\n  });\n  file.import({\n    ...clientApi.Options,\n    module: clientModule,\n  });\n\n  // define client first\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.callExpression({\n      functionName: 'createClient',\n      parameters: [\n        compiler.callExpression({\n          functionName: 'createConfig',\n          parameters: [\n            plugin.throwOnError\n              ? compiler.objectExpression({\n                  obj: [\n                    {\n                      key: 'throwOnError',\n                      value: plugin.throwOnError,\n                    },\n                  ],\n                })\n              : undefined,\n          ],\n        }),\n      ],\n    }),\n    name: 'client',\n  });\n  file.add(statement);\n\n  if (plugin.asClass) {\n    generateClassSdk({ context, plugin });\n  } else {\n    generateFlatSdk({ context, plugin });\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _infer: (config, context) => {\n    if (config.transformer) {\n      if (typeof config.transformer === 'boolean') {\n        config.transformer = context.pluginByTag(\n          'transformer',\n        ) as unknown as typeof config.transformer;\n      }\n\n      context.ensureDependency(config.transformer);\n    }\n\n    if (config.validator) {\n      if (typeof config.validator === 'boolean') {\n        config.validator = context.pluginByTag(\n          'validator',\n        ) as unknown as typeof config.validator;\n      }\n\n      context.ensureDependency(config.validator);\n    }\n  },\n  asClass: false,\n  auth: true,\n  exportFromIndex: true,\n  name: '@hey-api/sdk',\n  operationId: true,\n  output: 'sdk',\n  response: 'body',\n  serviceNameBuilder: '{{name}}Service',\n  throwOnError: false,\n};\n\n/**\n * Type helper for `@hey-api/sdk` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { EnumDeclaration } from 'typescript';\n\nimport { type Comments, compiler, type Node } from '../../../compiler';\nimport { TypeScriptFile } from '../../../generate/files';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport type {\n  Client,\n  Method,\n  Model,\n  OperationParameter,\n} from '../../../types/client';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { enumEntry, enumUnionType } from '../../../utils/enum';\nimport { escapeComment } from '../../../utils/escape';\nimport { sortByName, sorterByName } from '../../../utils/sort';\nimport {\n  setUniqueTypeName,\n  type SetUniqueTypeNameResult,\n  toType,\n} from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport type { Config } from './types';\n\nexport interface TypesProps {\n  client: Client;\n  model: Model;\n  onNode: (node: Node) => void;\n  onRemoveNode?: VoidFunction;\n}\n\nconst treeName = '$OpenApiTs';\n\nexport const emptyModel: Model = {\n  $refs: [],\n  base: '',\n  description: null,\n  enum: [],\n  enums: [],\n  export: 'interface',\n  imports: [],\n  in: '',\n  isDefinition: false,\n  isNullable: false,\n  isReadOnly: false,\n  isRequired: false,\n  link: null,\n  name: '',\n  properties: [],\n  template: null,\n  type: '',\n};\n\nconst generateEnum = ({\n  comments,\n  leadingComment,\n  meta,\n  obj,\n  onNode,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.enumDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'>) => {\n  // generate types only for top-level models\n  if (!meta) {\n    return;\n  }\n\n  const { created, name } = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  if (created) {\n    const node = compiler.enumDeclaration({\n      comments,\n      leadingComment,\n      name,\n      obj,\n    });\n    onNode(node);\n  }\n};\n\nexport const generateType = ({\n  comment,\n  meta,\n  onCreated,\n  onNode,\n  type,\n  ...setUniqueTypeNameArgs\n}: Omit<Parameters<typeof compiler.typeAliasDeclaration>[0], 'name'> &\n  Pick<Parameters<typeof setUniqueTypeName>[0], 'client' | 'nameTransformer'> &\n  Pick<Model, 'meta'> &\n  Pick<TypesProps, 'onNode'> & {\n    onCreated?: (name: string) => void;\n  }): SetUniqueTypeNameResult => {\n  // generate types only for top-level models\n  if (!meta) {\n    return {\n      created: false,\n      name: '',\n    };\n  }\n\n  const result = setUniqueTypeName({\n    create: true,\n    meta,\n    ...setUniqueTypeNameArgs,\n  });\n  const { created, name } = result;\n  if (created) {\n    const node = compiler.typeAliasDeclaration({\n      comment,\n      exportType: true,\n      name,\n      type,\n    });\n    onNode(node);\n\n    onCreated?.(name);\n  }\n  return result;\n};\n\nconst processComposition = (props: TypesProps) => {\n  const config = getConfig();\n\n  const enumDeclarations = [] as EnumDeclaration[];\n\n  processType(props);\n\n  props.model.enums.forEach((enumerator) => {\n    if (\n      config.plugins['@hey-api/typescript']?.enums !== 'typescript+namespace'\n    ) {\n      return processEnum({\n        ...props,\n        model: enumerator,\n      });\n    }\n\n    return processScopedEnum({\n      ...props,\n      model: enumerator,\n      onNode: (node) => {\n        enumDeclarations.push(node as EnumDeclaration);\n      },\n    });\n  });\n\n  if (enumDeclarations.length) {\n    props.onNode(\n      compiler.namespaceDeclaration({\n        name: props.model.name,\n        statements: enumDeclarations,\n      }),\n    );\n  }\n};\n\nconst processEnum = ({ client, model, onNode }: TypesProps) => {\n  const config = getConfig();\n\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n\n  const comment = [\n    model.description && escapeComment(model.description),\n    model.deprecated && '@deprecated',\n  ];\n\n  if (\n    config.plugins['@hey-api/typescript']?.enums === 'typescript' ||\n    config.plugins['@hey-api/typescript']?.enums === 'typescript+namespace'\n  ) {\n    generateEnum({\n      client,\n      comments,\n      leadingComment: comment,\n      meta: model.meta,\n      obj: properties,\n      onNode,\n    });\n    return;\n  }\n\n  generateType({\n    client,\n    comment,\n    meta: model.meta,\n    onCreated: (name) => {\n      // create a separate JavaScript object export\n      if (config.plugins['@hey-api/typescript']?.enums === 'javascript') {\n        const expression = compiler.objectExpression({\n          multiLine: true,\n          obj: Object.entries(properties).map(([key, value]) => ({\n            comments: comments[key],\n            key,\n            value,\n          })),\n          unescape: true,\n        });\n        const node = compiler.constVariable({\n          assertion: 'const',\n          comment,\n          exportConst: true,\n          expression,\n          name,\n        });\n        onNode(node);\n      }\n    },\n    onNode,\n    type: enumUnionType(model.enum),\n  });\n};\n\nconst processScopedEnum = ({ model, onNode }: TypesProps) => {\n  const properties: Record<string | number, unknown> = {};\n  const comments: Record<string | number, Comments> = {};\n  model.enum.forEach((enumerator) => {\n    const { key, value } = enumEntry(enumerator);\n    properties[key] = value;\n    const comment = enumerator.customDescription || enumerator.description;\n    if (comment) {\n      comments[key] = [escapeComment(comment)];\n    }\n  });\n  onNode(\n    compiler.enumDeclaration({\n      comments,\n      leadingComment: [\n        model.description && escapeComment(model.description),\n        model.deprecated && '@deprecated',\n      ],\n      name: model.meta?.name || model.name,\n      obj: properties,\n    }),\n  );\n};\n\nconst processType = ({ client, model, onNode }: TypesProps) => {\n  generateType({\n    client,\n    comment: [\n      model.description && escapeComment(model.description),\n      model.deprecated && '@deprecated',\n    ],\n    meta: model.meta,\n    onNode,\n    type: toType(model),\n  });\n};\n\nconst processModel = (props: TypesProps) => {\n  switch (props.model.export) {\n    case 'all-of':\n    case 'any-of':\n    case 'one-of':\n    case 'interface':\n      return processComposition(props);\n    case 'enum':\n      return processEnum(props);\n    default:\n      return processType(props);\n  }\n};\n\ninterface MethodMap {\n  $ref?: string;\n  req?: OperationParameter[];\n  res?: Record<number | string, Model>;\n}\n\ntype PathMap = {\n  [method in Method]?: MethodMap;\n};\n\ntype PathsMap = Record<string, PathMap>;\n\nconst processServiceTypes = ({\n  client,\n  onNode,\n}: Pick<TypesProps, 'client' | 'onNode'>) => {\n  const pathsMap: PathsMap = {};\n\n  const config = getConfig();\n\n  if (\n    !config.plugins['@hey-api/sdk'] &&\n    !config.plugins['@hey-api/typescript']?.tree\n  ) {\n    return;\n  }\n\n  const isLegacy = isLegacyClient(config);\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      if (!operation.parameters.length && !operation.responses.length) {\n        continue;\n      }\n\n      if (!pathsMap[operation.path]) {\n        pathsMap[operation.path] = {};\n      }\n      const pathMap = pathsMap[operation.path]!;\n\n      if (!pathMap[operation.method]) {\n        pathMap[operation.method] = {};\n      }\n      const methodMap = pathMap[operation.method]!;\n      methodMap.$ref = operation.name;\n\n      if (operation.responses.length > 0) {\n        if (!methodMap.res) {\n          methodMap.res = {};\n        }\n\n        if (Array.isArray(methodMap.res)) {\n          continue;\n        }\n\n        operation.responses.forEach((response) => {\n          methodMap.res![response.code] = response;\n        });\n      }\n\n      if (operation.parameters.length > 0) {\n        let bodyParameters: OperationParameter = {\n          mediaType: null,\n          ...emptyModel,\n          in: 'body',\n          name: 'body',\n          prop: 'body',\n        };\n        let bodyParameter = operation.parameters.filter(\n          (parameter) => parameter.in === 'body',\n        );\n        if (!bodyParameter.length) {\n          bodyParameter = operation.parameters.filter(\n            (parameter) => parameter.in === 'formData',\n          );\n        }\n\n        if (bodyParameter.length === 1) {\n          bodyParameters = {\n            ...emptyModel,\n            ...bodyParameter[0]!,\n            in: 'body',\n            isRequired: bodyParameter[0]!.isRequired,\n            name: 'body',\n            prop: 'body',\n          };\n          // assume we have multiple formData parameters from Swagger 2.0\n        } else if (bodyParameter.length > 1) {\n          bodyParameters = {\n            ...emptyModel,\n            in: 'body',\n            isRequired: bodyParameter.some((parameter) => parameter.isRequired),\n            mediaType: 'multipart/form-data',\n            name: 'body',\n            prop: 'body',\n            properties: bodyParameter,\n          };\n        }\n\n        const headerParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'header',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'header',\n            ),\n          ),\n          mediaType: null,\n          name: isLegacy ? 'header' : 'headers',\n          prop: isLegacy ? 'header' : 'headers',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'header')\n            .sort(sorterByName),\n        };\n        const pathParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'path',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter((parameter) => parameter.in === 'path'),\n          ),\n          mediaType: null,\n          name: 'path',\n          prop: 'path',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'path')\n            .sort(sorterByName),\n        };\n        const queryParameters: OperationParameter = {\n          ...emptyModel,\n          in: 'query',\n          isRequired: isOperationParameterRequired(\n            operation.parameters.filter(\n              (parameter) => parameter.in === 'query',\n            ),\n          ),\n          mediaType: null,\n          name: 'query',\n          prop: 'query',\n          properties: operation.parameters\n            .filter((parameter) => parameter.in === 'query')\n            .sort(sorterByName),\n        };\n        const operationProperties = !isLegacy\n          ? [\n              bodyParameters,\n              headerParameters,\n              pathParameters,\n              queryParameters,\n            ].filter(\n              (param) =>\n                param.properties.length ||\n                param.$refs.length ||\n                param.mediaType,\n            )\n          : sortByName([...operation.parameters]);\n\n        methodMap.req = operationProperties;\n\n        // create type export for operation data\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationDataTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            isRequired: true,\n            properties: operationProperties,\n          }),\n        });\n      }\n\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (successResponses.length > 0) {\n        // create type export for operation response\n        generateType({\n          client,\n          meta: {\n            // TODO: this should be exact ref to operation for consistency,\n            // but name should work too as operation ID is unique\n            $ref: operation.name,\n            name: operation.name,\n          },\n          nameTransformer: operationResponseTypeName,\n          onNode,\n          type: toType({\n            ...emptyModel,\n            export: 'any-of',\n            isRequired: true,\n            properties: successResponses,\n          }),\n        });\n\n        const errorResponses = operation.responses.filter((response) =>\n          response.responseTypes.includes('error'),\n        );\n\n        if (!isLegacy) {\n          // create type export for operation error\n          generateType({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operation.name,\n              name: operation.name,\n            },\n            nameTransformer: operationErrorTypeName,\n            onNode,\n            type: toType(\n              errorResponses.length\n                ? {\n                    ...emptyModel,\n                    export: 'one-of',\n                    isRequired: true,\n                    properties: errorResponses,\n                  }\n                : {\n                    ...emptyModel,\n                    base: 'unknown',\n                    isRequired: true,\n                    type: 'unknown',\n                  },\n            ),\n          });\n        }\n      }\n    }\n  }\n\n  const properties = Object.entries(pathsMap).map(([path, pathMap]) => {\n    const pathParameters = Object.entries(pathMap)\n      .map(([_method, methodMap]) => {\n        const method = _method as Method;\n\n        let methodParameters: Model[] = [];\n\n        if (methodMap.req) {\n          const operationName = methodMap.$ref!;\n          const { name: base } = setUniqueTypeName({\n            client,\n            meta: {\n              // TODO: this should be exact ref to operation for consistency,\n              // but name should work too as operation ID is unique\n              $ref: operationName,\n              name: operationName,\n            },\n            nameTransformer: operationDataTypeName,\n          });\n          const reqKey: Model = {\n            ...emptyModel,\n            base,\n            export: 'reference',\n            isRequired: true,\n            name: 'req',\n            properties: [],\n            type: base,\n          };\n          methodParameters = [...methodParameters, reqKey];\n        }\n\n        if (methodMap.res) {\n          const reqResParameters = Object.entries(methodMap.res).map(\n            ([code, base]) => {\n              // TODO: move query params into separate query key\n              const value: Model = {\n                ...emptyModel,\n                ...base,\n                isRequired: true,\n                name: String(code),\n              };\n              return value;\n            },\n          );\n\n          const resKey: Model = {\n            ...emptyModel,\n            isRequired: true,\n            name: 'res',\n            properties: reqResParameters,\n          };\n          methodParameters = [...methodParameters, resKey];\n        }\n\n        const methodKey: Model = {\n          ...emptyModel,\n          isRequired: true,\n          name: method.toLocaleLowerCase(),\n          properties: methodParameters,\n        };\n        return methodKey;\n      })\n      .filter(Boolean);\n    const pathKey: Model = {\n      ...emptyModel,\n      isRequired: true,\n      name: `'${path}'`,\n      properties: pathParameters as Model[],\n    };\n    return pathKey;\n  });\n\n  if (config.plugins['@hey-api/typescript']?.tree) {\n    generateType({\n      client,\n      meta: {\n        $ref: '@hey-api/openapi-ts',\n        name: treeName,\n      },\n      onNode,\n      type: toType({\n        ...emptyModel,\n        properties,\n      }),\n    });\n  }\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  files.types = new TypeScriptFile({\n    dir: config.output.path,\n    name: 'types.ts',\n  });\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n\n  for (const model of client.models) {\n    processModel({ client, model, onNode });\n  }\n\n  processServiceTypes({ client, onNode });\n};\n","import type ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { getOperationKey } from '../../../openApi/common/parser/operation';\nimport type { ModelMeta, OperationResponse } from '../../../types/client';\nimport { getConfig } from '../../../utils/config';\nimport { isModelDate, unsetUniqueTypeName } from '../../../utils/type';\nimport type { Plugin } from '../../types';\nimport {\n  modelResponseTransformerTypeName,\n  operationResponseTransformerTypeName,\n  operationResponseTypeName,\n} from '../sdk/plugin-legacy';\nimport { generateType, type TypesProps } from '../typescript/plugin-legacy';\nimport type { Config } from './types';\n\ninterface ModelProps extends TypesProps {\n  meta?: ModelMeta;\n  path: Array<string>;\n}\n\nconst dataVariableName = 'data';\n\nconst isVoidResponse = (response: OperationResponse) =>\n  response.base === 'unknown' &&\n  response.export === 'generic' &&\n  response.type === 'unknown';\n\nconst getRefModels = ({\n  client,\n  model,\n}: Pick<TypesProps, 'client' | 'model'>) => {\n  const refModels = model.$refs.map((ref) => {\n    const refModel = client.models.find((model) => model.meta?.$ref === ref);\n    if (!refModel) {\n      throw new Error(\n        `Ref ${ref} could not be found. Transformers cannot be generated without having access to all refs.`,\n      );\n    }\n    return refModel;\n  });\n  return refModels;\n};\n\nconst ensureModelResponseTransformerExists = (\n  props: Omit<ModelProps, 'path'>,\n) => {\n  const modelName = props.model.meta!.name;\n\n  const { name } = generateType({\n    ...props,\n    meta: {\n      $ref: `transformers/${modelName}`,\n      name: modelName,\n    },\n    nameTransformer: modelResponseTransformerTypeName,\n    onCreated: (name) => {\n      const statements = processModel({\n        ...props,\n        meta: {\n          $ref: `transformers/${modelName}`,\n          name,\n        },\n        path: [dataVariableName],\n      });\n      generateResponseTransformer({\n        ...props,\n        async: false,\n        name,\n        statements,\n      });\n    },\n    type: `(${dataVariableName}: any) => ${modelName}`,\n  });\n\n  const result = {\n    created: Boolean(props.client.types[name]),\n    name,\n  };\n  return result;\n};\n\nconst processArray = (props: ModelProps) => {\n  const { model } = props;\n  const refModels = getRefModels(props);\n\n  if (refModels.length === 1) {\n    const { created, name: nameModelResponseTransformer } =\n      ensureModelResponseTransformerExists({ ...props, model: refModels[0]! });\n\n    if (!created) {\n      return [];\n    }\n\n    return [\n      compiler.transformArrayMutation({\n        path: props.path,\n        transformerName: nameModelResponseTransformer,\n      }),\n    ];\n  }\n\n  if (\n    isModelDate(model) ||\n    (model.link &&\n      !Array.isArray(model.link) &&\n      model.link.export === 'any-of' &&\n      model.link.properties.find((property) => isModelDate(property)))\n  ) {\n    return [\n      compiler.transformArrayMap({\n        path: props.path,\n        transformExpression: compiler.conditionalExpression({\n          condition: compiler.identifier({ text: 'item' }),\n          whenFalse: compiler.identifier({ text: 'item' }),\n          whenTrue: compiler.transformNewDate({\n            parameterName: 'item',\n          }),\n        }),\n      }),\n    ];\n  }\n\n  // Not transform for this type\n  return [];\n};\n\nconst processProperty = (props: ModelProps) => {\n  const { model } = props;\n  const path = [...props.path, model.name];\n\n  if (\n    model.type === 'string' &&\n    model.export !== 'array' &&\n    isModelDate(model)\n  ) {\n    return [compiler.transformDateMutation({ path })];\n  }\n\n  // otherwise we recurse in case it's an object/array, and if it's not that will just bail with []\n  return processModel({\n    ...props,\n    model,\n    path,\n  });\n};\n\nconst processModel = (props: ModelProps): ts.Statement[] => {\n  const { model } = props;\n\n  switch (model.export) {\n    case 'array':\n      return processArray(props);\n    case 'interface':\n      return model.properties.flatMap((property) =>\n        processProperty({ ...props, model: property }),\n      );\n    case 'reference': {\n      if (model.$refs.length !== 1) {\n        return [];\n      }\n      const refModels = getRefModels(props);\n\n      const { created, name: nameModelResponseTransformer } =\n        ensureModelResponseTransformerExists({\n          ...props,\n          model: refModels[0]!,\n        });\n\n      if (!created) {\n        return [];\n      }\n\n      return model.in === 'response'\n        ? [\n            compiler.expressionToStatement({\n              expression: compiler.callExpression({\n                functionName: nameModelResponseTransformer,\n                parameters: [dataVariableName],\n              }),\n            }),\n          ]\n        : compiler.transformFunctionMutation({\n            path: props.path,\n            transformerName: nameModelResponseTransformer,\n          });\n    }\n    // unsupported\n    default:\n      return [];\n  }\n};\n\nconst generateResponseTransformer = ({\n  async,\n  client,\n  name,\n  onNode,\n  onRemoveNode,\n  statements,\n}: Pick<TypesProps, 'client' | 'onNode' | 'onRemoveNode'> & {\n  async: boolean;\n  name: string;\n  statements: Array<ts.Statement>;\n}) => {\n  const result = {\n    created: false,\n    name,\n  };\n\n  if (!statements.length) {\n    // clean up created type for response transformer if it turns out\n    // the transformer was never generated\n    unsetUniqueTypeName({\n      client,\n      name,\n    });\n    onRemoveNode?.();\n    return result;\n  }\n\n  const expression = compiler.arrowFunction({\n    async,\n    multiLine: true,\n    parameters: [\n      {\n        name: dataVariableName,\n      },\n    ],\n    statements: [\n      ...statements,\n      compiler.returnVariable({\n        expression: dataVariableName,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression,\n    name,\n    typeName: name,\n  });\n  onNode(statement);\n\n  return {\n    created: true,\n    name,\n  };\n};\n\n// handles only response transformers for now\nexport const handlerLegacy: Plugin.LegacyHandler<Config> = ({\n  client,\n  files,\n}) => {\n  const config = getConfig();\n\n  const onNode: TypesProps['onNode'] = (node) => {\n    files.types?.add(node);\n  };\n  const onRemoveNode: TypesProps['onRemoveNode'] = () => {\n    files.types?.removeNode();\n  };\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      const successResponses = operation.responses.filter((response) =>\n        response.responseTypes.includes('success'),\n      );\n\n      if (!successResponses.length) {\n        continue;\n      }\n\n      const nonVoidResponses = successResponses.filter(\n        (response) => !isVoidResponse(response),\n      );\n\n      if (!nonVoidResponses.length) {\n        continue;\n      }\n\n      if (nonVoidResponses.length > 1) {\n        if (config.logs.level === 'debug') {\n          console.warn(\n            `❗️ Transformers warning: route ${getOperationKey(operation)} has ${nonVoidResponses.length} non-void success responses. This is currently not handled and we will not generate a response transformer. Please open an issue if you'd like this feature https://github.com/hey-api/openapi-ts/issues`,\n          );\n        }\n        continue;\n      }\n\n      const name = operationResponseTypeName(operation.name);\n      generateType({\n        client,\n        meta: {\n          $ref: `transformers/${name}`,\n          name,\n        },\n        nameTransformer: operationResponseTransformerTypeName,\n        onCreated: (nameCreated) => {\n          const statements =\n            successResponses.length > 1\n              ? successResponses.flatMap((response) => {\n                  const statements = processModel({\n                    client,\n                    meta: {\n                      $ref: `transformers/${name}`,\n                      name,\n                    },\n                    model: response,\n                    onNode,\n                    onRemoveNode,\n                    path: [dataVariableName],\n                  });\n\n                  // assume unprocessed responses are void\n                  if (!statements.length) {\n                    return [];\n                  }\n\n                  return [\n                    compiler.ifStatement({\n                      expression: compiler.safeAccessExpression(['data']),\n                      thenStatement: compiler.block({ statements }),\n                    }),\n                  ];\n                })\n              : processModel({\n                  client,\n                  meta: {\n                    $ref: `transformers/${name}`,\n                    name,\n                  },\n                  model: successResponses[0]!,\n                  onNode,\n                  onRemoveNode,\n                  path: [dataVariableName],\n                });\n          generateResponseTransformer({\n            async: true,\n            client,\n            name: nameCreated,\n            onNode,\n            onRemoveNode,\n            statements,\n          });\n        },\n        onNode,\n        type: `(${dataVariableName}: any) => Promise<${name}>`,\n      });\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  _tags: ['transformer'],\n  bigInt: true,\n  dates: true,\n  name: '@hey-api/transformers',\n  output: 'transformers',\n};\n\n/**\n * Type helper for `@hey-api/transformers`, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import ts from 'typescript';\n\nimport type { Property } from '../../../compiler';\nimport { compiler } from '../../../compiler';\nimport { operationResponsesMap } from '../../../ir/operation';\nimport { deduplicateSchema } from '../../../ir/schema';\nimport type { IR } from '../../../ir/types';\nimport { escapeComment } from '../../../utils/escape';\nimport { irRef, isRefOpenApiComponent } from '../../../utils/ref';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\nimport { fieldName } from '../../shared/utils/case';\nimport { operationIrRef } from '../../shared/utils/ref';\nimport type { Plugin } from '../../types';\nimport { typesId } from './ref';\nimport type { Config } from './types';\n\ninterface SchemaWithType<T extends Required<IR.SchemaObject>['type']>\n  extends Omit<IR.SchemaObject, 'type'> {\n  type: Extract<Required<IR.SchemaObject>['type'], T>;\n}\n\nconst parseSchemaJsDoc = ({ schema }: { schema: IR.SchemaObject }) => {\n  const comments = [\n    schema.description && escapeComment(schema.description),\n    schema.deprecated && '@deprecated',\n  ].filter(Boolean);\n\n  if (!comments.length) {\n    return;\n  }\n\n  return comments;\n};\n\nconst addJavaScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created) {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  const expression = compiler.objectExpression({\n    multiLine: true,\n    obj: enumObject.obj,\n  });\n  const node = compiler.constVariable({\n    assertion: 'const',\n    comment: parseSchemaJsDoc({ schema }),\n    exportConst: true,\n    expression,\n    name: identifier.name || '',\n  });\n  return node;\n};\n\nconst schemaToEnumObject = ({\n  plugin,\n  schema,\n}: {\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}) => {\n  const typeofItems: Array<\n    | 'bigint'\n    | 'boolean'\n    | 'function'\n    | 'number'\n    | 'object'\n    | 'string'\n    | 'symbol'\n    | 'undefined'\n  > = [];\n\n  const obj = (schema.items ?? []).map((item) => {\n    const typeOfItemConst = typeof item.const;\n\n    if (!typeofItems.includes(typeOfItemConst)) {\n      // track types of enum values because some modes support\n      // only enums with string and number types\n      typeofItems.push(typeOfItemConst);\n    }\n\n    let key: string | undefined;\n    if (item.title) {\n      key = item.title;\n    } else if (typeOfItemConst === 'number' || typeOfItemConst === 'string') {\n      key = `${item.const}`;\n    } else if (typeOfItemConst === 'boolean') {\n      key = item.const ? 'true' : 'false';\n    } else if (item.const === null) {\n      key = 'null';\n    }\n\n    if (key) {\n      key = stringCase({\n        case: plugin.enumsCase,\n        stripLeadingSeparators: false,\n        value: key,\n      });\n\n      numberRegExp.lastIndex = 0;\n      // TypeScript enum keys cannot be numbers\n      if (\n        numberRegExp.test(key) &&\n        (plugin.enums === 'typescript' ||\n          plugin.enums === 'typescript+namespace')\n      ) {\n        key = `_${key}`;\n      }\n    }\n\n    return {\n      comments: parseSchemaJsDoc({ schema: item }),\n      key,\n      value: item.const,\n    };\n  });\n\n  return {\n    obj,\n    typeofItems,\n  };\n};\n\nconst addTypeEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'type',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (\n    !identifier.created &&\n    !isRefOpenApiComponent($ref) &&\n    plugin.enums !== 'typescript+namespace'\n  ) {\n    return;\n  }\n\n  const node = compiler.typeAliasDeclaration({\n    comment: parseSchemaJsDoc({ schema }),\n    exportType: true,\n    name: identifier.name || '',\n    type: schemaToType({\n      context,\n      plugin,\n      schema: {\n        ...schema,\n        type: undefined,\n      },\n    }),\n  });\n  return node;\n};\n\nconst addTypeScriptEnum = ({\n  $ref,\n  context,\n  plugin,\n  schema,\n}: {\n  $ref: string;\n  context: IR.Context;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const identifier = file.identifier({\n    $ref,\n    create: true,\n    namespace: 'value',\n  });\n\n  // TODO: parser - this is the old parser behavior where we would NOT\n  // print nested enum identifiers if they already exist. This is a\n  // blocker for referencing these identifiers within the file as\n  // we cannot guarantee just because they have a duplicate identifier,\n  // they have a duplicate value.\n  if (!identifier.created && plugin.enums !== 'typescript+namespace') {\n    return;\n  }\n\n  const enumObject = schemaToEnumObject({ plugin, schema });\n\n  // TypeScript enums support only string and number values so we need to fallback to types\n  if (\n    enumObject.typeofItems.filter(\n      (type) => type !== 'number' && type !== 'string',\n    ).length\n  ) {\n    const node = addTypeEnum({\n      $ref,\n      context,\n      plugin,\n      schema,\n    });\n    return node;\n  }\n\n  const node = compiler.enumDeclaration({\n    leadingComment: parseSchemaJsDoc({ schema }),\n    name: identifier.name || '',\n    obj: enumObject.obj,\n  });\n  return node;\n};\n\nconst arrayTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'array'>;\n}) => {\n  if (!schema.items) {\n    return compiler.typeArrayNode(\n      compiler.keywordTypeNode({\n        keyword: 'unknown',\n      }),\n    );\n  }\n\n  schema = deduplicateSchema({ schema });\n\n  // at least one item is guaranteed\n  const itemTypes = schema.items!.map((item) =>\n    schemaToType({\n      context,\n      namespace,\n      plugin,\n      schema: item,\n    }),\n  );\n\n  if (itemTypes.length === 1) {\n    return compiler.typeArrayNode(itemTypes[0]!);\n  }\n\n  if (schema.logicalOperator === 'and') {\n    return compiler.typeArrayNode(\n      compiler.typeIntersectionNode({ types: itemTypes }),\n    );\n  }\n\n  return compiler.typeArrayNode(compiler.typeUnionNode({ types: itemTypes }));\n};\n\nconst booleanTypeToIdentifier = ({\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'boolean'>;\n}) => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.boolean(schema.const as boolean),\n    });\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'boolean',\n  });\n};\n\nconst enumTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'enum'>;\n}): ts.TypeNode => {\n  const file = context.file({ id: typesId })!;\n  const isRefComponent = $ref ? isRefOpenApiComponent($ref) : false;\n  const shouldExportEnum = isRefComponent || Boolean(plugin.exportInlineEnums);\n\n  if ($ref && shouldExportEnum) {\n    // when enums are disabled (default), emit only reusable components\n    // as types, otherwise the output would be broken if we skipped all enums\n    if (!plugin.enums) {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n    }\n\n    if (plugin.enums === 'javascript') {\n      const typeNode = addTypeEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (typeNode) {\n        file.add(typeNode);\n      }\n\n      const objectNode = addJavaScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (objectNode) {\n        file.add(objectNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (enumNode) {\n        file.add(enumNode);\n      }\n    }\n\n    if (plugin.enums === 'typescript+namespace') {\n      const enumNode = addTypeScriptEnum({\n        $ref,\n        context,\n        plugin,\n        schema,\n      });\n      if (enumNode) {\n        if (isRefComponent) {\n          file.add(enumNode);\n        } else {\n          // emit enum inside TypeScript namespace\n          namespace.push(enumNode);\n        }\n      }\n    }\n  }\n\n  const type = schemaToType({\n    context,\n    plugin,\n    schema: {\n      ...schema,\n      type: undefined,\n    },\n  });\n  return type;\n};\n\nconst numberTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'integer' | 'number'>;\n}) => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.ots.number(schema.const as number),\n    });\n  }\n\n  if (schema.type === 'integer' && schema.format === 'int64') {\n    // TODO: parser - add ability to skip type transformers\n    if (context.config.plugins['@hey-api/transformers']?.bigInt) {\n      return compiler.typeReferenceNode({ typeName: 'BigInt' });\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'number',\n  });\n};\n\nconst objectTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'object'>;\n}) => {\n  // TODO: parser - handle constants\n  let indexProperty: Property | undefined;\n  const schemaProperties: Array<Property> = [];\n  let indexPropertyItems: Array<IR.SchemaObject> = [];\n  const required = schema.required ?? [];\n  let hasOptionalProperties = false;\n\n  for (const name in schema.properties) {\n    const property = schema.properties[name]!;\n    const isRequired = required.includes(name);\n    schemaProperties.push({\n      comment: parseSchemaJsDoc({ schema: property }),\n      isReadOnly: property.accessScope === 'read',\n      isRequired,\n      name: fieldName({ context, name }),\n      type: schemaToType({\n        $ref: `${irRef}${name}`,\n        context,\n        namespace,\n        plugin,\n        schema: property,\n      }),\n    });\n    indexPropertyItems.push(property);\n\n    if (!isRequired) {\n      hasOptionalProperties = true;\n    }\n  }\n\n  if (\n    schema.additionalProperties &&\n    (schema.additionalProperties.type !== 'never' || !indexPropertyItems.length)\n  ) {\n    if (schema.additionalProperties.type === 'never') {\n      indexPropertyItems = [schema.additionalProperties];\n    } else {\n      indexPropertyItems.unshift(schema.additionalProperties);\n    }\n\n    if (hasOptionalProperties) {\n      indexPropertyItems.push({\n        type: 'undefined',\n      });\n    }\n\n    indexProperty = {\n      isRequired: true,\n      name: 'key',\n      type: schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema:\n          indexPropertyItems.length === 1\n            ? indexPropertyItems[0]!\n            : {\n                items: indexPropertyItems,\n                logicalOperator: 'or',\n              },\n      }),\n    };\n  }\n\n  return compiler.typeInterfaceNode({\n    indexProperty,\n    properties: schemaProperties,\n    useLegacyResolution: false,\n  });\n};\n\nconst stringTypeToIdentifier = ({\n  context,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  schema: SchemaWithType<'string'>;\n}) => {\n  if (schema.const !== undefined) {\n    return compiler.literalTypeNode({\n      literal: compiler.stringLiteral({ text: schema.const as string }),\n    });\n  }\n\n  if (schema.format) {\n    if (schema.format === 'binary') {\n      return compiler.typeUnionNode({\n        types: [\n          compiler.typeReferenceNode({\n            typeName: 'Blob',\n          }),\n          compiler.typeReferenceNode({\n            typeName: 'File',\n          }),\n        ],\n      });\n    }\n\n    if (schema.format === 'date-time' || schema.format === 'date') {\n      // TODO: parser - add ability to skip type transformers\n      if (context.config.plugins['@hey-api/transformers']?.dates) {\n        return compiler.typeReferenceNode({ typeName: 'Date' });\n      }\n    }\n  }\n\n  return compiler.keywordTypeNode({\n    keyword: 'string',\n  });\n};\n\nconst tupleTypeToIdentifier = ({\n  context,\n  namespace,\n  plugin,\n  schema,\n}: {\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: SchemaWithType<'tuple'>;\n}) => {\n  let itemTypes: Array<ts.Expression | ts.TypeNode> = [];\n\n  if (schema.const && Array.isArray(schema.const)) {\n    itemTypes = schema.const.map((value) => {\n      const expression = compiler.valueToExpression({ value });\n      return expression ?? compiler.identifier({ text: 'unknown' });\n    });\n  } else if (schema.items) {\n    itemTypes = schema.items.map((item) =>\n      schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema: item,\n      }),\n    );\n  }\n\n  return compiler.typeTupleNode({\n    types: itemTypes,\n  });\n};\n\nconst schemaTypeToIdentifier = ({\n  $ref,\n  context,\n  namespace,\n  plugin,\n  schema,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): ts.TypeNode => {\n  switch (schema.type as Required<IR.SchemaObject>['type']) {\n    case 'array':\n      return arrayTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'array'>,\n      });\n    case 'boolean':\n      return booleanTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'boolean'>,\n      });\n    case 'enum':\n      return enumTypeToIdentifier({\n        $ref,\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'enum'>,\n      });\n    case 'integer':\n    case 'number':\n      return numberTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'integer' | 'number'>,\n      });\n    case 'never':\n      return compiler.keywordTypeNode({\n        keyword: 'never',\n      });\n    case 'null':\n      return compiler.literalTypeNode({\n        literal: compiler.null(),\n      });\n    case 'object':\n      return objectTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'object'>,\n      });\n    case 'string':\n      return stringTypeToIdentifier({\n        context,\n        namespace,\n        schema: schema as SchemaWithType<'string'>,\n      });\n    case 'tuple':\n      return tupleTypeToIdentifier({\n        context,\n        namespace,\n        plugin,\n        schema: schema as SchemaWithType<'tuple'>,\n      });\n    case 'undefined':\n      return compiler.keywordTypeNode({\n        keyword: 'undefined',\n      });\n    case 'unknown':\n      return compiler.keywordTypeNode({\n        keyword: 'unknown',\n      });\n    case 'void':\n      return compiler.keywordTypeNode({\n        keyword: 'void',\n      });\n  }\n};\n\nconst irParametersToIrSchema = ({\n  parameters,\n}: {\n  parameters: Record<string, IR.ParameterObject>;\n}): IR.SchemaObject => {\n  const irSchema: IR.SchemaObject = {\n    type: 'object',\n  };\n\n  if (parameters) {\n    const properties: Record<string, IR.SchemaObject> = {};\n    const required: Array<string> = [];\n\n    for (const name in parameters) {\n      const parameter = parameters[name]!;\n\n      properties[name] = deduplicateSchema({\n        schema: parameter.schema,\n      });\n\n      if (parameter.required) {\n        required.push(name);\n      }\n    }\n\n    irSchema.properties = properties;\n\n    if (required.length) {\n      irSchema.required = required;\n    }\n  }\n\n  return irSchema;\n};\n\nconst operationToDataType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  const file = context.file({ id: typesId })!;\n  const data: IR.SchemaObject = {\n    type: 'object',\n  };\n  const dataRequired: Array<string> = [];\n\n  if (!data.properties) {\n    data.properties = {};\n  }\n\n  if (operation.body) {\n    data.properties.body = operation.body.schema;\n\n    if (operation.body.required) {\n      dataRequired.push('body');\n    }\n  } else {\n    data.properties.body = {\n      type: 'never',\n    };\n  }\n\n  // TODO: parser - handle cookie parameters\n\n  // do not set headers to never so we can always pass arbitrary values\n  if (operation.parameters?.header) {\n    data.properties.headers = irParametersToIrSchema({\n      parameters: operation.parameters.header,\n    });\n\n    if (data.properties.headers.required) {\n      dataRequired.push('headers');\n    }\n  }\n\n  if (operation.parameters?.path) {\n    data.properties.path = irParametersToIrSchema({\n      parameters: operation.parameters.path,\n    });\n\n    if (data.properties.path.required) {\n      dataRequired.push('path');\n    }\n  } else {\n    data.properties.path = {\n      type: 'never',\n    };\n  }\n\n  if (operation.parameters?.query) {\n    data.properties.query = irParametersToIrSchema({\n      parameters: operation.parameters.query,\n    });\n\n    if (data.properties.query.required) {\n      dataRequired.push('query');\n    }\n  } else {\n    data.properties.query = {\n      type: 'never',\n    };\n  }\n\n  data.properties.url = {\n    const: operation.path,\n    type: 'string',\n  };\n  dataRequired.push('url');\n\n  data.required = dataRequired;\n\n  const identifier = file.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    create: true,\n    namespace: 'type',\n  });\n  const node = compiler.typeAliasDeclaration({\n    exportType: true,\n    name: identifier.name || '',\n    type: schemaToType({\n      context,\n      plugin,\n      schema: data,\n    }),\n  });\n  file.add(node);\n};\n\nconst operationToType = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: Plugin.Instance<Config>;\n}) => {\n  operationToDataType({\n    context,\n    operation,\n    plugin,\n  });\n\n  const file = context.file({ id: typesId })!;\n\n  const { error, errors, response, responses } =\n    operationResponsesMap(operation);\n\n  if (errors) {\n    const identifierErrors = file.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'errors' }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierErrors.name) {\n      const node = compiler.typeAliasDeclaration({\n        exportType: true,\n        name: identifierErrors.name,\n        type: schemaToType({\n          context,\n          plugin,\n          schema: errors,\n        }),\n      });\n      file.add(node);\n\n      if (error) {\n        const identifierError = file.identifier({\n          $ref: operationIrRef({ id: operation.id, type: 'error' }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierError.name) {\n          const errorsType = compiler.typeReferenceNode({\n            typeName: identifierErrors.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            errorsType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierError.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: errorsType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n\n  if (responses) {\n    const identifierResponses = file.identifier({\n      $ref: operationIrRef({ id: operation.id, type: 'responses' }),\n      create: true,\n      namespace: 'type',\n    });\n    if (identifierResponses.name) {\n      const node = compiler.typeAliasDeclaration({\n        exportType: true,\n        name: identifierResponses.name,\n        type: schemaToType({\n          context,\n          plugin,\n          schema: responses,\n        }),\n      });\n      file.add(node);\n\n      if (response) {\n        const identifierResponse = file.identifier({\n          $ref: operationIrRef({ id: operation.id, type: 'response' }),\n          create: true,\n          namespace: 'type',\n        });\n        if (identifierResponse.name) {\n          const responsesType = compiler.typeReferenceNode({\n            typeName: identifierResponses.name,\n          });\n          const keyofType = ts.factory.createTypeOperatorNode(\n            ts.SyntaxKind.KeyOfKeyword,\n            responsesType,\n          );\n          const node = compiler.typeAliasDeclaration({\n            exportType: true,\n            name: identifierResponse.name,\n            type: compiler.indexedAccessTypeNode({\n              indexType: keyofType,\n              objectType: responsesType,\n            }),\n          });\n          file.add(node);\n        }\n      }\n    }\n  }\n};\n\nexport const schemaToType = ({\n  $ref,\n  context,\n  namespace = [],\n  plugin,\n  schema,\n}: {\n  $ref?: string;\n  context: IR.Context;\n  namespace?: Array<ts.Statement>;\n  plugin: Plugin.Instance<Config>;\n  schema: IR.SchemaObject;\n}): ts.TypeNode => {\n  const file = context.file({ id: typesId })!;\n\n  let type: ts.TypeNode | undefined;\n\n  if (schema.$ref) {\n    const identifier = file.identifier({\n      $ref: schema.$ref,\n      create: true,\n      namespace: 'type',\n    });\n    type = compiler.typeReferenceNode({\n      typeName: identifier.name || '',\n    });\n  } else if (schema.type) {\n    type = schemaTypeToIdentifier({\n      $ref,\n      context,\n      namespace,\n      plugin,\n      schema,\n    });\n  } else if (schema.items) {\n    schema = deduplicateSchema({ schema });\n    if (schema.items) {\n      const itemTypes = schema.items.map((item) =>\n        schemaToType({\n          context,\n          namespace,\n          plugin,\n          schema: item,\n        }),\n      );\n      type =\n        schema.logicalOperator === 'and'\n          ? compiler.typeIntersectionNode({ types: itemTypes })\n          : compiler.typeUnionNode({ types: itemTypes });\n    } else {\n      type = schemaToType({\n        context,\n        namespace,\n        plugin,\n        schema,\n      });\n    }\n  } else {\n    // catch-all fallback for failed schemas\n    type = schemaTypeToIdentifier({\n      context,\n      namespace,\n      plugin,\n      schema: {\n        type: 'unknown',\n      },\n    });\n  }\n\n  // emit nodes only if $ref points to a reusable component\n  if ($ref && isRefOpenApiComponent($ref)) {\n    // emit namespace if it has any members\n    if (namespace.length) {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'value',\n      });\n      const node = compiler.namespaceDeclaration({\n        name: identifier.name || '',\n        statements: namespace,\n      });\n      file.add(node);\n    }\n\n    // enum handler emits its own artifacts\n    if (schema.type !== 'enum') {\n      const identifier = file.identifier({\n        $ref,\n        create: true,\n        namespace: 'type',\n      });\n      const node = compiler.typeAliasDeclaration({\n        comment: parseSchemaJsDoc({ schema }),\n        exportType: true,\n        name: identifier.name || '',\n        type,\n      });\n      file.add(node);\n    }\n  }\n\n  return type;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: typesId,\n    identifierCase: plugin.identifierCase,\n    path: plugin.output,\n  });\n\n  context.subscribe('schema', ({ $ref, schema }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema,\n    });\n  });\n\n  context.subscribe('parameter', ({ $ref, parameter }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: parameter.schema,\n    });\n  });\n\n  context.subscribe('requestBody', ({ $ref, requestBody }) => {\n    schemaToType({\n      $ref,\n      context,\n      plugin,\n      schema: requestBody.schema,\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    operationToType({\n      context,\n      operation,\n      plugin,\n    });\n  });\n};\n","import ts from 'typescript';\n\nimport type { IR } from '../../../ir/types';\nimport { numberRegExp } from '../../../utils/regexp';\nimport { stringCase } from '../../../utils/stringCase';\n\n/**\n * Returns final field name for object properties. This might differ from the\n * original value as applying case transform function might alter it.\n */\nexport const fieldName = ({\n  context,\n  name,\n}: {\n  context: IR.Context;\n  name: string;\n}) => {\n  numberRegExp.lastIndex = 0;\n  if (numberRegExp.test(name)) {\n    return ts.factory.createNumericLiteral(name);\n  }\n\n  // if (typeof context.config.output.case === 'function') {\n  //   return context.config.output.case({ value: name });\n  // }\n\n  return stringCase({ case: context.config.output.case, value: name });\n};\n","import type { Plugin } from '../../types';\nimport { handler } from './plugin';\nimport { handlerLegacy } from './plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  enums: false,\n  enumsCase: 'SCREAMING_SNAKE_CASE',\n  exportFromIndex: true,\n  exportInlineEnums: false,\n  identifierCase: 'PascalCase',\n  name: '@hey-api/typescript',\n  output: 'types',\n  style: 'preserve',\n  tree: false,\n};\n\n/**\n * Type helper for `@hey-api/typescript` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import { getConfig } from '../../../utils/config';\n\n// TODO: this function could be moved so other plugins can reuse it\nexport const getClientBaseUrlKey = () => {\n  const config = getConfig();\n  return config.client.name === '@hey-api/client-axios' ? 'baseURL' : 'baseUrl';\n};\n","import type { ImportExportItemObject } from '../../../compiler/utils';\nimport type { IR } from '../../../ir/types';\nimport { operationOptionsType } from '../../@hey-api/sdk/plugin';\nimport {\n  importIdentifierError,\n  importIdentifierResponse,\n} from '../../@hey-api/typescript/ref';\nimport type { PluginInstance } from './types';\n\nexport const useTypeData = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const typeData = operationOptionsType({\n    context,\n    file,\n    operation,\n  });\n  return typeData;\n};\n\nexport const useTypeError = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierError = importIdentifierError({ context, file, operation });\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: identifierError.name || '',\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'DefaultError',\n    });\n  }\n  if (context.config.client.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n  return typeError;\n};\n\nexport const useTypeResponse = ({\n  context,\n  operation,\n  plugin,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierResponse = importIdentifierResponse({\n    context,\n    file,\n    operation,\n  });\n  const typeResponse = identifierResponse.name || 'unknown';\n  return typeResponse;\n};\n","import { compiler, type Property } from '../../../compiler';\nimport { clientApi } from '../../../generate/client';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { getClientBaseUrlKey } from './client';\nimport type { PluginInstance } from './types';\nimport { useTypeData } from './useType';\n\nconst createQueryKeyFn = 'createQueryKey';\nexport const queryKeyName = 'QueryKey';\nconst TOptionsType = 'TOptions';\n\nexport const createQueryKeyFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const returnType = compiler.indexedAccessTypeNode({\n    indexType: compiler.literalTypeNode({\n      literal: compiler.ots.number(0),\n    }),\n    objectType: compiler.typeReferenceNode({\n      typeArguments: [compiler.typeReferenceNode({ typeName: TOptionsType })],\n      typeName: queryKeyName,\n    }),\n  });\n\n  const infiniteIdentifier = compiler.identifier({ text: 'infinite' });\n\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    create: true,\n    namespace: 'value',\n  });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'id',\n          type: compiler.typeReferenceNode({ typeName: 'string' }),\n        },\n        {\n          isRequired: false,\n          name: 'options',\n          type: compiler.typeReferenceNode({ typeName: TOptionsType }),\n        },\n        {\n          isRequired: false,\n          name: 'infinite',\n          type: compiler.typeReferenceNode({ typeName: 'boolean' }),\n        },\n      ],\n      returnType,\n      statements: [\n        compiler.constVariable({\n          assertion: returnType,\n          expression: compiler.objectExpression({\n            multiLine: false,\n            obj: [\n              {\n                key: '_id',\n                value: compiler.identifier({ text: 'id' }),\n              },\n              {\n                key: getClientBaseUrlKey(),\n                value: compiler.identifier({\n                  text: `(options?.client ?? client).getConfig().${getClientBaseUrlKey()}`,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n          typeName: returnType,\n        }),\n        compiler.ifStatement({\n          expression: infiniteIdentifier,\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: '_infinite',\n                  }),\n                  right: infiniteIdentifier,\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'body',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'headers',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'path',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'query',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: 'params',\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: clientApi.Options.name,\n            }),\n          }),\n          name: TOptionsType,\n        },\n      ],\n    }),\n    name: identifierCreateQueryKey.name || '',\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyLiteral = ({\n  context,\n  id,\n  isInfinite,\n  plugin,\n}: {\n  context: IR.Context;\n  id: string;\n  isInfinite?: boolean;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const identifierCreateQueryKey = file.identifier({\n    $ref: `#/ir/${createQueryKeyFn}`,\n    namespace: 'value',\n  });\n  const queryKeyLiteral = compiler.arrayLiteralExpression({\n    elements: [\n      compiler.callExpression({\n        functionName: identifierCreateQueryKey.name || '',\n        parameters: [\n          compiler.ots.string(id),\n          'options',\n          isInfinite ? compiler.ots.boolean(true) : undefined,\n        ],\n      }),\n    ],\n    multiLine: false,\n  });\n  return queryKeyLiteral;\n};\n\nexport const createQueryKeyType = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey()}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.Options.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nexport const queryKeyFunctionIdentifier = ({\n  context,\n  isInfinite,\n  operation,\n}: {\n  context: IR.Context;\n  isInfinite?: boolean;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nexport const queryKeyStatement = ({\n  context,\n  isInfinite,\n  operation,\n  plugin,\n  typeQueryKey,\n}: {\n  context: IR.Context;\n  isInfinite: boolean;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  typeQueryKey?: string;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n  const typeData = useTypeData({ context, operation, plugin });\n  const name = queryKeyFunctionIdentifier({\n    context,\n    isInfinite,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${name}`,\n    create: true,\n    namespace: 'value',\n  });\n  const statement = compiler.constVariable({\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired: hasOperationDataRequired(operation),\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      returnType: isInfinite ? typeQueryKey : undefined,\n      statements: createQueryKeyLiteral({\n        context,\n        id: operation.id,\n        isInfinite,\n        plugin,\n      }),\n    }),\n    name: identifierQueryKey.name || '',\n  });\n  return statement;\n};\n","import ts from 'typescript';\n\nimport { compiler } from '../../../compiler';\nimport { tsNodeToString } from '../../../compiler/utils';\nimport { clientApi } from '../../../generate/client';\nimport {\n  hasOperationDataRequired,\n  operationPagination,\n} from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { schemaToType } from '../../@hey-api/typescript/plugin';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyName,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\n\nconst createInfiniteParamsFunction = ({\n  context,\n  plugin,\n}: {\n  context: IR.Context;\n  plugin: PluginInstance;\n}) => {\n  const file = context.file({ id: plugin.name })!;\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeReferenceNode({\n            typeName: `QueryKey<${clientApi.Options.name}>`,\n          }),\n        },\n        {\n          name: 'page',\n          type: compiler.typeReferenceNode({ typeName: 'K' }),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: ts.factory.createAsExpression(\n            ts.factory.createAsExpression(\n              compiler.identifier({ text: 'params' }),\n              ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n            ),\n            ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          ),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.Options.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst infiniteQueryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}InfiniteOptions`;\n\nexport const createInfiniteQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.infiniteQueryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const pagination = operationPagination({ context, operation });\n\n  if (!pagination) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequired = hasOperationDataRequired(operation);\n\n  if (!state.hasInfiniteQueries) {\n    state.hasInfiniteQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    if (!state.hasCreateInfiniteParamsFunction) {\n      createInfiniteParamsFunction({ context, plugin });\n      state.hasCreateInfiniteParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: infiniteQueryOptionsFn,\n    });\n\n    state.typeInfiniteData = file.import({\n      asType: true,\n      module: plugin.name,\n      name: 'InfiniteData',\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n\n  const typeQueryKey = `${queryKeyName}<${typeData}>`;\n  const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n  // TODO: parser - this is a bit clunky, need to compile type to string because\n  // `compiler.returnFunctionCall()` accepts only strings, should be cleaned up\n  const typePageParam = `${tsNodeToString({\n    node: schemaToType({\n      context,\n      plugin: context.config.plugins['@hey-api/typescript'] as Parameters<\n        typeof schemaToType\n      >[0]['plugin'],\n      schema: pagination.schema,\n    }),\n    unescape: true,\n  })} | ${typePageObjectParam}`;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: true,\n    operation,\n    plugin,\n    typeQueryKey,\n  });\n  file.add(node);\n\n  const infiniteQueryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: true,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${infiniteQueryKeyName}`,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              comments: [\n                {\n                  jsdoc: false,\n                  lines: ['@ts-ignore'],\n                },\n              ],\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'pageParam',\n                          },\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements: [\n                      compiler.constVariable({\n                        comment: [\n                          {\n                            jsdoc: false,\n                            lines: ['@ts-ignore'],\n                          },\n                        ],\n                        expression: compiler.conditionalExpression({\n                          condition: compiler.binaryExpression({\n                            left: compiler.typeOfExpression({\n                              text: 'pageParam',\n                            }),\n                            operator: '===',\n                            right: compiler.ots.string('object'),\n                          }),\n                          whenFalse: compiler.objectExpression({\n                            multiLine: true,\n                            obj: [\n                              {\n                                key: pagination.in,\n                                value: compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      key: pagination.name,\n                                      value: compiler.identifier({\n                                        text: 'pageParam',\n                                      }),\n                                    },\n                                  ],\n                                }),\n                              },\n                            ],\n                          }),\n                          whenTrue: compiler.identifier({\n                            text: 'pageParam',\n                          }),\n                        }),\n                        name: 'page',\n                        typeName: typePageObjectParam,\n                      }),\n                      compiler.constVariable({\n                        expression: compiler.callExpression({\n                          functionName: createInfiniteParamsFn,\n                          parameters: ['queryKey', 'page'],\n                        }),\n                        name: 'params',\n                      }),\n                      compiler.constVariable({\n                        destructure: true,\n                        expression: compiler.awaitExpression({\n                          expression: compiler.callExpression({\n                            functionName: queryFn,\n                            parameters: [\n                              compiler.objectExpression({\n                                multiLine: true,\n                                obj: [\n                                  {\n                                    spread: 'options',\n                                  },\n                                  {\n                                    spread: 'params',\n                                  },\n                                  {\n                                    key: 'signal',\n                                    shorthand: true,\n                                    value: compiler.identifier({\n                                      text: 'signal',\n                                    }),\n                                  },\n                                  {\n                                    key: 'throwOnError',\n                                    value: true,\n                                  },\n                                ],\n                              }),\n                            ],\n                          }),\n                        }),\n                        name: 'data',\n                      }),\n                      compiler.returnVariable({\n                        expression: 'data',\n                      }),\n                    ],\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: infiniteQueryOptionsFn,\n          // TODO: better types syntax\n          types: [\n            typeResponse,\n            typeError.name,\n            `${typeof state.typeInfiniteData === 'string' ? state.typeInfiniteData : state.typeInfiniteData.name}<${typeResponse}>`,\n            typeQueryKey,\n            typePageParam,\n          ],\n        }),\n      ],\n    }),\n    name: infiniteQueryOptionsFunctionIdentifier({\n      context,\n      operation,\n    }),\n  });\n  file.add(statement);\n};\n","import { compiler } from '../../../compiler';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData, useTypeError, useTypeResponse } from './useType';\n\nconst mutationOptionsFn = 'mutationOptions';\n\nconst mutationOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Mutation`;\n\nexport const createMutationOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.mutationOptions ||\n    !(\n      ['delete', 'patch', 'post', 'put'] as (typeof operation.method)[]\n    ).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  const file = context.file({ id: plugin.name })!;\n\n  if (!state.hasMutations) {\n    state.hasMutations = true;\n\n    file.import({\n      asType: true,\n      module: plugin.name,\n      name: mutationsType,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const typeData = useTypeData({ context, operation, plugin });\n  const typeError = useTypeError({ context, operation, plugin });\n  const typeResponse = useTypeResponse({ context, operation, plugin });\n\n  const expression = compiler.arrowFunction({\n    parameters: [\n      {\n        isRequired: false,\n        name: 'options',\n        type: `Partial<${typeData}>`,\n      },\n    ],\n    statements: [\n      compiler.constVariable({\n        expression: compiler.objectExpression({\n          obj: [\n            {\n              key: 'mutationFn',\n              value: compiler.arrowFunction({\n                async: true,\n                multiLine: true,\n                parameters: [\n                  {\n                    name: 'localOptions',\n                  },\n                ],\n                statements: [\n                  compiler.constVariable({\n                    destructure: true,\n                    expression: compiler.awaitExpression({\n                      expression: compiler.callExpression({\n                        functionName: queryFn,\n                        parameters: [\n                          compiler.objectExpression({\n                            multiLine: true,\n                            obj: [\n                              {\n                                spread: 'options',\n                              },\n                              {\n                                spread: 'localOptions',\n                              },\n                              {\n                                key: 'throwOnError',\n                                value: true,\n                              },\n                            ],\n                          }),\n                        ],\n                      }),\n                    }),\n                    name: 'data',\n                  }),\n                  compiler.returnVariable({\n                    expression: 'data',\n                  }),\n                ],\n              }),\n            },\n          ],\n        }),\n        name: mutationOptionsFn,\n        // TODO: better types syntax\n        typeName: `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`,\n      }),\n      compiler.returnVariable({\n        expression: mutationOptionsFn,\n      }),\n    ],\n  });\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression,\n    name: mutationOptionsFunctionIdentifier({ context, operation }),\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { compiler } from '../../../compiler';\nimport { hasOperationDataRequired } from '../../../ir/operation';\nimport type { IR } from '../../../ir/types';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport {\n  createQueryKeyFunction,\n  createQueryKeyType,\n  queryKeyFunctionIdentifier,\n  queryKeyStatement,\n} from './queryKey';\nimport type { PluginInstance, PluginState } from './types';\nimport { useTypeData } from './useType';\n\nconst queryOptionsFn = 'queryOptions';\n\nconst queryOptionsFunctionIdentifier = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}) =>\n  `${serviceFunctionIdentifier({\n    config: context.config,\n    id: operation.id,\n    operation,\n  })}Options`;\n\nexport const createQueryOptions = ({\n  context,\n  operation,\n  plugin,\n  queryFn,\n  state,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n  plugin: PluginInstance;\n  queryFn: string;\n  state: PluginState;\n}) => {\n  if (\n    !plugin.queryOptions ||\n    !(['get', 'post'] as (typeof operation.method)[]).includes(operation.method)\n  ) {\n    return state;\n  }\n\n  const file = context.file({ id: plugin.name })!;\n  const isRequired = hasOperationDataRequired(operation);\n\n  if (!state.hasQueries) {\n    state.hasQueries = true;\n\n    if (!state.hasCreateQueryKeyParamsFunction) {\n      createQueryKeyType({ context, plugin });\n      createQueryKeyFunction({ context, plugin });\n      state.hasCreateQueryKeyParamsFunction = true;\n    }\n\n    file.import({\n      module: plugin.name,\n      name: queryOptionsFn,\n    });\n  }\n\n  state.hasUsedQueryFn = true;\n\n  const node = queryKeyStatement({\n    context,\n    isInfinite: false,\n    operation,\n    plugin,\n  });\n  file.add(node);\n\n  const typeData = useTypeData({ context, operation, plugin });\n\n  const queryKeyName = queryKeyFunctionIdentifier({\n    context,\n    isInfinite: false,\n    operation,\n  });\n  const identifierQueryKey = file.identifier({\n    $ref: `#/queryKey/${queryKeyName}`,\n    namespace: 'value',\n  });\n\n  const statement = compiler.constVariable({\n    // TODO: describe options, same as the actual function call\n    comment: [],\n    exportConst: true,\n    expression: compiler.arrowFunction({\n      parameters: [\n        {\n          isRequired,\n          name: 'options',\n          type: typeData,\n        },\n      ],\n      statements: [\n        compiler.returnFunctionCall({\n          args: [\n            compiler.objectExpression({\n              obj: [\n                {\n                  key: 'queryFn',\n                  value: compiler.arrowFunction({\n                    async: true,\n                    multiLine: true,\n                    parameters: [\n                      {\n                        destructure: [\n                          {\n                            name: 'queryKey',\n                          },\n                          {\n                            name: 'signal',\n                          },\n                        ],\n                      },\n                    ],\n                    statements: [\n                      compiler.constVariable({\n                        destructure: true,\n                        expression: compiler.awaitExpression({\n                          expression: compiler.callExpression({\n                            functionName: queryFn,\n                            parameters: [\n                              compiler.objectExpression({\n                                multiLine: true,\n                                obj: [\n                                  {\n                                    spread: 'options',\n                                  },\n                                  {\n                                    spread: 'queryKey[0]',\n                                  },\n                                  {\n                                    key: 'signal',\n                                    shorthand: true,\n                                    value: compiler.identifier({\n                                      text: 'signal',\n                                    }),\n                                  },\n                                  {\n                                    key: 'throwOnError',\n                                    value: true,\n                                  },\n                                ],\n                              }),\n                            ],\n                          }),\n                        }),\n                        name: 'data',\n                      }),\n                      compiler.returnVariable({\n                        expression: 'data',\n                      }),\n                    ],\n                  }),\n                },\n                {\n                  key: 'queryKey',\n                  value: compiler.callExpression({\n                    functionName: identifierQueryKey.name || '',\n                    parameters: ['options'],\n                  }),\n                },\n              ],\n            }),\n          ],\n          name: queryOptionsFn,\n        }),\n      ],\n    }),\n    name: queryOptionsFunctionIdentifier({ context, operation }),\n    // TODO: add type error\n    // TODO: AxiosError<PutSubmissionMetaError>\n  });\n  file.add(statement);\n\n  return state;\n};\n","import { clientApi, clientModulePath } from '../../../generate/client';\nimport { getServiceName } from '../../../utils/postprocess';\nimport { transformServiceName } from '../../../utils/transform';\nimport { serviceFunctionIdentifier } from '../../@hey-api/sdk/plugin-legacy';\nimport { createInfiniteQueryOptions } from './infiniteQueryOptions';\nimport { createMutationOptions } from './mutationOptions';\nimport { createQueryOptions } from './queryOptions';\nimport type { PluginHandler, PluginState } from './types';\n\nexport const handler: PluginHandler = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: plugin.name,\n    path: plugin.output,\n  });\n\n  const state: PluginState = {\n    hasCreateInfiniteParamsFunction: false,\n    hasCreateQueryKeyParamsFunction: false,\n    hasInfiniteQueries: false,\n    hasMutations: false,\n    hasQueries: false,\n    hasUsedQueryFn: false,\n    typeInfiniteData: undefined!,\n  };\n\n  context.subscribe('before', () => {\n    file.import({\n      ...clientApi.Options,\n      module: clientModulePath({\n        config: context.config,\n        sourceOutput: plugin.output,\n      }),\n    });\n  });\n\n  context.subscribe('operation', ({ operation }) => {\n    state.hasUsedQueryFn = false;\n\n    const queryFn = [\n      context.config.plugins['@hey-api/sdk']?.asClass &&\n        transformServiceName({\n          config: context.config,\n          name: getServiceName(operation.tags?.[0] || 'default'),\n        }),\n      serviceFunctionIdentifier({\n        config: context.config,\n        handleIllegal: !context.config.plugins['@hey-api/sdk']?.asClass,\n        id: operation.id,\n        operation,\n      }),\n    ]\n      .filter(Boolean)\n      .join('.');\n\n    createQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createInfiniteQueryOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    createMutationOptions({\n      context,\n      operation,\n      plugin,\n      queryFn,\n      state,\n    });\n\n    if (state.hasUsedQueryFn) {\n      file.import({\n        module: file.relativePathToFile({ context, id: 'sdk' }),\n        name: queryFn.split('.')[0]!,\n      });\n    }\n  });\n\n  context.subscribe('after', () => {\n    if (state.hasQueries || state.hasInfiniteQueries) {\n      file.import({\n        module: file.relativePathToFile({ context, id: 'sdk' }),\n        name: 'client',\n      });\n    }\n  });\n};\n","import ts from 'typescript';\n\nimport { compiler, type Property } from '../../../compiler';\nimport type { ImportExportItem } from '../../../compiler/module';\nimport type { ImportExportItemObject } from '../../../compiler/utils';\nimport { clientApi, clientModulePath } from '../../../generate/client';\nimport { relativeModulePath } from '../../../generate/utils';\nimport { paginationKeywordsRegExp } from '../../../ir/pagination';\nimport type { IR } from '../../../ir/types';\nimport { isOperationParameterRequired } from '../../../openApi';\nimport { getOperationKey } from '../../../openApi/common/parser/operation';\nimport type {\n  Client,\n  Method,\n  Model,\n  Operation,\n  OperationParameter,\n} from '../../../types/client';\nimport type { Config } from '../../../types/config';\nimport type { Files } from '../../../types/utils';\nimport { getConfig, isLegacyClient } from '../../../utils/config';\nimport { transformServiceName } from '../../../utils/transform';\nimport {\n  generateImport,\n  operationDataTypeName,\n  operationErrorTypeName,\n  operationOptionsLegacyParserType,\n  operationResponseTypeName,\n  serviceFunctionIdentifier,\n} from '../../@hey-api/sdk/plugin-legacy';\nimport type { Plugin } from '../../types';\nimport type { Config as AngularQueryConfig } from '../angular-query-experimental';\nimport type { Config as ReactQueryConfig } from '../react-query';\nimport type { Config as SolidQueryConfig } from '../solid-query';\nimport type { Config as SvelteQueryConfig } from '../svelte-query';\nimport type { Config as VueQueryConfig } from '../vue-query';\n\nconst toInfiniteQueryOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}InfiniteOptions`;\n\nconst toMutationOptionsName = (operation: Operation) =>\n  `${serviceFunctionIdentifier({\n    config: getConfig(),\n    id: operation.name,\n    operation,\n  })}Mutation`;\n\nconst toQueryOptionsName = ({\n  config,\n  id,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}Options`;\n\nconst toQueryKeyName = ({\n  config,\n  id,\n  isInfinite,\n  operation,\n}: {\n  config: Config;\n  id: string;\n  isInfinite?: boolean;\n  operation: IR.OperationObject | Operation;\n}) =>\n  `${serviceFunctionIdentifier({\n    config,\n    id,\n    operation,\n  })}${isInfinite ? 'Infinite' : ''}QueryKey`;\n\nconst getPaginationIn = (parameter: OperationParameter) => {\n  switch (parameter.in) {\n    case 'formData':\n      return 'body';\n    case 'header':\n      return 'headers';\n    default:\n      return parameter.in;\n  }\n};\n\nconst createInfiniteParamsFn = 'createInfiniteParams';\nconst createQueryKeyFn = 'createQueryKey';\nconst infiniteQueryOptionsFn = 'infiniteQueryOptions';\nconst mutationOptionsFn = 'mutationOptions';\nconst queryKeyName = 'QueryKey';\nconst queryOptionsFn = 'queryOptions';\nconst TOptionsType = 'TOptions';\n\nconst getClientBaseUrlKey = () => {\n  const config = getConfig();\n  return config.client.name === '@hey-api/client-axios' ? 'baseURL' : 'baseUrl';\n};\n\nconst createInfiniteParamsFunction = ({\n  file,\n}: {\n  file: Files[keyof Files];\n}) => {\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'queryKey',\n          type: compiler.typeNode(\n            `QueryKey<${clientApi.OptionsLegacyParser.name}>`,\n          ),\n        },\n        {\n          name: 'page',\n          type: compiler.typeNode('K'),\n        },\n      ],\n      statements: [\n        compiler.constVariable({\n          expression: compiler.identifier({\n            text: 'queryKey[0]',\n          }),\n          name: 'params',\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        assertion: 'any',\n                        spread: 'queryKey[0].body',\n                      },\n                      {\n                        assertion: 'any',\n                        spread: 'page.body',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].headers',\n                      },\n                      {\n                        spread: 'page.headers',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].path',\n                      },\n                      {\n                        spread: 'page.path',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({\n              text: 'page',\n            }),\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.objectExpression({\n                    multiLine: true,\n                    obj: [\n                      {\n                        spread: 'queryKey[0].query',\n                      },\n                      {\n                        spread: 'page.query',\n                      },\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: ts.factory.createAsExpression(\n            ts.factory.createAsExpression(\n              compiler.identifier({ text: 'params' }),\n              ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n            ),\n            ts.factory.createTypeQueryNode(\n              compiler.identifier({ text: 'page' }),\n            ),\n          ),\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: `Pick<QueryKey<${clientApi.OptionsLegacyParser.name}>[0], 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n          }),\n          name: 'K',\n        },\n      ],\n    }),\n    name: createInfiniteParamsFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyFunction = ({ file }: { file: Files[keyof Files] }) => {\n  const returnType = compiler.indexedAccessTypeNode({\n    indexType: compiler.typeNode(0),\n    objectType: compiler.typeNode(queryKeyName, [\n      compiler.typeNode(TOptionsType),\n    ]),\n  });\n\n  const infiniteIdentifier = compiler.identifier({ text: 'infinite' });\n\n  const fn = compiler.constVariable({\n    expression: compiler.arrowFunction({\n      multiLine: true,\n      parameters: [\n        {\n          name: 'id',\n          type: compiler.typeNode('string'),\n        },\n        {\n          isRequired: false,\n          name: 'options',\n          type: compiler.typeNode(TOptionsType),\n        },\n        {\n          isRequired: false,\n          name: 'infinite',\n          type: compiler.typeNode('boolean'),\n        },\n      ],\n      returnType,\n      statements: [\n        compiler.constVariable({\n          assertion: returnType,\n          expression: compiler.objectExpression({\n            multiLine: false,\n            obj: [\n              {\n                key: '_id',\n                value: compiler.identifier({ text: 'id' }),\n              },\n              {\n                key: getClientBaseUrlKey(),\n                value: compiler.identifier({\n                  text: `(options?.client ?? client).getConfig().${getClientBaseUrlKey()}`,\n                }),\n              },\n            ],\n          }),\n          name: 'params',\n          typeName: returnType,\n        }),\n        compiler.ifStatement({\n          expression: infiniteIdentifier,\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: '_infinite',\n                  }),\n                  right: infiniteIdentifier,\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'body' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'body',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'body',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'headers' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'headers',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'headers',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'path' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'path',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'path',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.ifStatement({\n          expression: compiler.propertyAccessExpression({\n            expression: compiler.identifier({ text: 'options' }),\n            isOptional: true,\n            name: compiler.identifier({ text: 'query' }),\n          }),\n          thenStatement: compiler.block({\n            statements: [\n              compiler.expressionToStatement({\n                expression: compiler.binaryExpression({\n                  left: compiler.propertyAccessExpression({\n                    expression: 'params',\n                    name: 'query',\n                  }),\n                  right: compiler.propertyAccessExpression({\n                    expression: 'options',\n                    name: 'query',\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n        compiler.returnVariable({\n          expression: 'params',\n        }),\n      ],\n      types: [\n        {\n          extends: compiler.typeReferenceNode({\n            typeName: compiler.identifier({\n              text: clientApi.OptionsLegacyParser.name,\n            }),\n          }),\n          name: TOptionsType,\n        },\n      ],\n    }),\n    name: createQueryKeyFn,\n  });\n  file.add(fn);\n};\n\nconst createQueryKeyType = ({ file }: { file: Files[keyof Files] }) => {\n  const properties: Property[] = [\n    {\n      name: '_id',\n      type: compiler.keywordTypeNode({\n        keyword: 'string',\n      }),\n    },\n    {\n      isRequired: false,\n      name: '_infinite',\n      type: compiler.keywordTypeNode({\n        keyword: 'boolean',\n      }),\n    },\n  ];\n\n  const queryKeyType = compiler.typeAliasDeclaration({\n    name: queryKeyName,\n    type: compiler.typeTupleNode({\n      types: [\n        compiler.typeIntersectionNode({\n          types: [\n            compiler.typeReferenceNode({\n              typeName: `Pick<${TOptionsType}, '${getClientBaseUrlKey()}' | 'body' | 'headers' | 'path' | 'query'>`,\n            }),\n            compiler.typeInterfaceNode({\n              properties,\n              useLegacyResolution: true,\n            }),\n          ],\n        }),\n      ],\n    }),\n    typeParameters: [\n      {\n        extends: compiler.typeReferenceNode({\n          typeName: compiler.identifier({\n            text: clientApi.OptionsLegacyParser.name,\n          }),\n        }),\n        name: TOptionsType,\n      },\n    ],\n  });\n  file.add(queryKeyType);\n};\n\nconst createTypeData = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeData } = generateImport({\n    client,\n    meta: operation.parameters.length\n      ? {\n          // TODO: this should be exact ref to operation for consistency,\n          // but name should work too as operation ID is unique\n          $ref: operation.name,\n          name: operation.name,\n        }\n      : undefined,\n    nameTransformer: operationDataTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  const typeData = operationOptionsLegacyParserType({\n    importedType: nameTypeData,\n  });\n\n  return { typeData };\n};\n\nconst createTypeError = ({\n  client,\n  file,\n  operation,\n  pluginName,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  pluginName: string;\n  typesModulePath: string;\n}) => {\n  const config = getConfig();\n\n  const { name: nameTypeError } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationErrorTypeName,\n    onImport: (name) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name,\n      });\n    },\n  });\n\n  let typeError: ImportExportItemObject = {\n    asType: true,\n    name: nameTypeError,\n  };\n  if (!typeError.name) {\n    typeError = file.import({\n      asType: true,\n      module: pluginName,\n      name: 'DefaultError',\n    });\n  }\n\n  if (config.client.name === '@hey-api/client-axios') {\n    const axiosError = file.import({\n      asType: true,\n      module: 'axios',\n      name: 'AxiosError',\n    });\n    typeError = {\n      ...axiosError,\n      name: `${axiosError.name}<${typeError.name}>`,\n    };\n  }\n\n  return { typeError };\n};\n\nconst createTypeResponse = ({\n  client,\n  file,\n  operation,\n  typesModulePath,\n}: {\n  client: Client;\n  file: Files[keyof Files];\n  operation: Operation;\n  typesModulePath: string;\n}) => {\n  const { name: nameTypeResponse } = generateImport({\n    client,\n    meta: {\n      // TODO: this should be exact ref to operation for consistency,\n      // but name should work too as operation ID is unique\n      $ref: operation.name,\n      name: operation.name,\n    },\n    nameTransformer: operationResponseTypeName,\n    onImport: (imported) => {\n      file.import({\n        asType: true,\n        module: typesModulePath,\n        name: imported,\n      });\n    },\n  });\n\n  const typeResponse = nameTypeResponse || 'void';\n\n  return { typeResponse };\n};\n\nconst createQueryKeyLiteral = ({\n  id,\n  isInfinite,\n}: {\n  id: string;\n  isInfinite?: boolean;\n}) => {\n  const queryKeyLiteral = compiler.arrayLiteralExpression({\n    elements: [\n      compiler.callExpression({\n        functionName: createQueryKeyFn,\n        parameters: [\n          compiler.ots.string(id),\n          'options',\n          isInfinite ? compiler.ots.boolean(true) : undefined,\n        ],\n      }),\n    ],\n    multiLine: false,\n  });\n  return queryKeyLiteral;\n};\n\nexport const handlerLegacy: Plugin.LegacyHandler<\n  | ReactQueryConfig\n  | AngularQueryConfig\n  | SolidQueryConfig\n  | SvelteQueryConfig\n  | VueQueryConfig\n> = ({ client, files, plugin }) => {\n  const config = getConfig();\n\n  if (isLegacyClient(config)) {\n    throw new Error('🚫 TanStack Query plugin does not support legacy clients');\n  }\n\n  const file = files[plugin.name]!;\n\n  file.import({\n    ...clientApi.OptionsLegacyParser,\n    module: clientModulePath({ config, sourceOutput: plugin.output }),\n  });\n\n  const typesModulePath = relativeModulePath({\n    moduleOutput: files.types!.nameWithoutExtension(),\n    sourceOutput: plugin.output,\n  });\n\n  const mutationsType =\n    plugin.name === '@tanstack/angular-query-experimental' ||\n    plugin.name === '@tanstack/svelte-query' ||\n    plugin.name === '@tanstack/solid-query'\n      ? 'MutationOptions'\n      : 'UseMutationOptions';\n\n  let typeInfiniteData!: ImportExportItem;\n  let hasCreateInfiniteParamsFunction = false;\n  let hasCreateQueryKeyParamsFunction = false;\n  let hasInfiniteQueries = false;\n  let hasMutations = false;\n  let hasQueries = false;\n\n  const processedOperations = new Map<string, boolean>();\n\n  for (const service of client.services) {\n    for (const operation of service.operations) {\n      // track processed operations to avoid creating duplicates\n      const operationKey = getOperationKey(operation);\n      if (processedOperations.has(operationKey)) {\n        continue;\n      }\n      processedOperations.set(operationKey, true);\n\n      const queryFn = [\n        config.plugins['@hey-api/sdk']?.asClass &&\n          transformServiceName({\n            config,\n            name: service.name,\n          }),\n        serviceFunctionIdentifier({\n          config,\n          handleIllegal: !config.plugins['@hey-api/sdk']?.asClass,\n          id: operation.name,\n          operation,\n        }),\n      ]\n        .filter(Boolean)\n        .join('.');\n      let hasUsedQueryFn = false;\n\n      // queries\n      if (\n        plugin.queryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        if (!hasQueries) {\n          hasQueries = true;\n\n          if (!hasCreateQueryKeyParamsFunction) {\n            createQueryKeyType({ file });\n            createQueryKeyFunction({ file });\n            hasCreateQueryKeyParamsFunction = true;\n          }\n\n          file.import({\n            module: plugin.name,\n            name: queryOptionsFn,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const isRequired = isOperationParameterRequired(operation.parameters);\n\n        const queryKeyStatement = compiler.constVariable({\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: createQueryKeyLiteral({\n              id: operation.name,\n            }),\n          }),\n          name: toQueryKeyName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n        });\n        file.add(queryKeyStatement);\n\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression: compiler.arrowFunction({\n            parameters: [\n              {\n                isRequired,\n                name: 'options',\n                type: typeData,\n              },\n            ],\n            statements: [\n              compiler.returnFunctionCall({\n                args: [\n                  compiler.objectExpression({\n                    obj: [\n                      {\n                        key: 'queryFn',\n                        value: compiler.arrowFunction({\n                          async: true,\n                          multiLine: true,\n                          parameters: [\n                            {\n                              destructure: [\n                                {\n                                  name: 'queryKey',\n                                },\n                                {\n                                  name: 'signal',\n                                },\n                              ],\n                            },\n                          ],\n                          statements: [\n                            compiler.constVariable({\n                              destructure: true,\n                              expression: compiler.awaitExpression({\n                                expression: compiler.callExpression({\n                                  functionName: queryFn,\n                                  parameters: [\n                                    compiler.objectExpression({\n                                      multiLine: true,\n                                      obj: [\n                                        {\n                                          spread: 'options',\n                                        },\n                                        {\n                                          spread: 'queryKey[0]',\n                                        },\n                                        {\n                                          key: 'signal',\n                                          shorthand: true,\n                                          value: compiler.identifier({\n                                            text: 'signal',\n                                          }),\n                                        },\n                                        {\n                                          key: 'throwOnError',\n                                          value: true,\n                                        },\n                                      ],\n                                    }),\n                                  ],\n                                }),\n                              }),\n                              name: 'data',\n                            }),\n                            compiler.returnVariable({\n                              expression: 'data',\n                            }),\n                          ],\n                        }),\n                      },\n                      {\n                        key: 'queryKey',\n                        value: compiler.callExpression({\n                          functionName: toQueryKeyName({\n                            config,\n                            id: operation.name,\n                            operation,\n                          }),\n                          parameters: ['options'],\n                        }),\n                      },\n                    ],\n                  }),\n                ],\n                name: queryOptionsFn,\n              }),\n            ],\n          }),\n          name: toQueryOptionsName({\n            config,\n            id: operation.name,\n            operation,\n          }),\n          // TODO: add type error\n          // TODO: AxiosError<PutSubmissionMetaError>\n        });\n        file.add(statement);\n      }\n\n      // infinite queries\n      if (\n        plugin.infiniteQueryOptions &&\n        (['GET', 'POST'] as ReadonlyArray<Method>).includes(operation.method)\n      ) {\n        // the actual pagination field might be nested inside parameter, e.g. body\n        let paginationField!: Model | OperationParameter;\n\n        const paginationParameter = operation.parameters.find((parameter) => {\n          paginationKeywordsRegExp.lastIndex = 0;\n          if (paginationKeywordsRegExp.test(parameter.name)) {\n            paginationField = parameter;\n            return true;\n          }\n\n          if (parameter.in !== 'body') {\n            return;\n          }\n\n          if (parameter.export === 'reference') {\n            const ref = parameter.$refs[0];\n            const refModel = client.models.find(\n              (model) => model.meta?.$ref === ref,\n            );\n            return refModel?.properties.find((property) => {\n              paginationKeywordsRegExp.lastIndex = 0;\n              if (paginationKeywordsRegExp.test(property.name)) {\n                paginationField = property;\n                return true;\n              }\n            });\n          }\n\n          return parameter.properties.find((property) => {\n            paginationKeywordsRegExp.lastIndex = 0;\n            if (paginationKeywordsRegExp.test(property.name)) {\n              paginationField = property;\n              return true;\n            }\n          });\n        });\n\n        if (paginationParameter && paginationField) {\n          if (!hasInfiniteQueries) {\n            hasInfiniteQueries = true;\n\n            if (!hasCreateQueryKeyParamsFunction) {\n              createQueryKeyType({ file });\n              createQueryKeyFunction({ file });\n              hasCreateQueryKeyParamsFunction = true;\n            }\n\n            if (!hasCreateInfiniteParamsFunction) {\n              createInfiniteParamsFunction({ file });\n              hasCreateInfiniteParamsFunction = true;\n            }\n\n            file.import({\n              module: plugin.name,\n              name: infiniteQueryOptionsFn,\n            });\n\n            typeInfiniteData = file.import({\n              asType: true,\n              module: plugin.name,\n              name: 'InfiniteData',\n            });\n          }\n\n          hasUsedQueryFn = true;\n\n          const { typeData } = createTypeData({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n          const { typeError } = createTypeError({\n            client,\n            file,\n            operation,\n            pluginName: plugin.name,\n            typesModulePath,\n          });\n          const { typeResponse } = createTypeResponse({\n            client,\n            file,\n            operation,\n            typesModulePath,\n          });\n\n          const isRequired = isOperationParameterRequired(operation.parameters);\n\n          const typeQueryKey = `${queryKeyName}<${typeData}>`;\n          const typePageObjectParam = `Pick<${typeQueryKey}[0], 'body' | 'headers' | 'path' | 'query'>`;\n          const typePageParam = `${paginationField.base} | ${typePageObjectParam}`;\n\n          const queryKeyStatement = compiler.constVariable({\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              returnType: typeQueryKey,\n              statements: createQueryKeyLiteral({\n                id: operation.name,\n                isInfinite: true,\n              }),\n            }),\n            name: toQueryKeyName({\n              config,\n              id: operation.name,\n              isInfinite: true,\n              operation,\n            }),\n          });\n          file.add(queryKeyStatement);\n\n          const statement = compiler.constVariable({\n            // TODO: describe options, same as the actual function call\n            comment: [],\n            exportConst: true,\n            expression: compiler.arrowFunction({\n              parameters: [\n                {\n                  isRequired,\n                  name: 'options',\n                  type: typeData,\n                },\n              ],\n              statements: [\n                compiler.returnFunctionCall({\n                  args: [\n                    compiler.objectExpression({\n                      comments: [\n                        {\n                          jsdoc: false,\n                          lines: ['@ts-ignore'],\n                        },\n                      ],\n                      obj: [\n                        {\n                          key: 'queryFn',\n                          value: compiler.arrowFunction({\n                            async: true,\n                            multiLine: true,\n                            parameters: [\n                              {\n                                destructure: [\n                                  {\n                                    name: 'pageParam',\n                                  },\n                                  {\n                                    name: 'queryKey',\n                                  },\n                                  {\n                                    name: 'signal',\n                                  },\n                                ],\n                              },\n                            ],\n                            statements: [\n                              compiler.constVariable({\n                                comment: [\n                                  {\n                                    jsdoc: false,\n                                    lines: ['@ts-ignore'],\n                                  },\n                                ],\n                                expression: compiler.conditionalExpression({\n                                  condition: compiler.binaryExpression({\n                                    left: compiler.typeOfExpression({\n                                      text: 'pageParam',\n                                    }),\n                                    operator: '===',\n                                    right: compiler.ots.string('object'),\n                                  }),\n                                  whenFalse: compiler.objectExpression({\n                                    multiLine: true,\n                                    obj: [\n                                      {\n                                        key: getPaginationIn(\n                                          paginationParameter,\n                                        ),\n                                        value: compiler.objectExpression({\n                                          multiLine: true,\n                                          obj: [\n                                            {\n                                              key: paginationField.name,\n                                              value: compiler.identifier({\n                                                text: 'pageParam',\n                                              }),\n                                            },\n                                          ],\n                                        }),\n                                      },\n                                    ],\n                                  }),\n                                  whenTrue: compiler.identifier({\n                                    text: 'pageParam',\n                                  }),\n                                }),\n                                name: 'page',\n                                typeName: typePageObjectParam,\n                              }),\n                              compiler.constVariable({\n                                expression: compiler.callExpression({\n                                  functionName: 'createInfiniteParams',\n                                  parameters: ['queryKey', 'page'],\n                                }),\n                                name: 'params',\n                              }),\n                              compiler.constVariable({\n                                destructure: true,\n                                expression: compiler.awaitExpression({\n                                  expression: compiler.callExpression({\n                                    functionName: queryFn,\n                                    parameters: [\n                                      compiler.objectExpression({\n                                        multiLine: true,\n                                        obj: [\n                                          {\n                                            spread: 'options',\n                                          },\n                                          {\n                                            spread: 'params',\n                                          },\n                                          {\n                                            key: 'signal',\n                                            shorthand: true,\n                                            value: compiler.identifier({\n                                              text: 'signal',\n                                            }),\n                                          },\n                                          {\n                                            key: 'throwOnError',\n                                            value: true,\n                                          },\n                                        ],\n                                      }),\n                                    ],\n                                  }),\n                                }),\n                                name: 'data',\n                              }),\n                              compiler.returnVariable({\n                                expression: 'data',\n                              }),\n                            ],\n                          }),\n                        },\n                        {\n                          key: 'queryKey',\n                          value: compiler.callExpression({\n                            functionName: toQueryKeyName({\n                              config,\n                              id: operation.name,\n                              isInfinite: true,\n                              operation,\n                            }),\n                            parameters: ['options'],\n                          }),\n                        },\n                      ],\n                    }),\n                  ],\n                  name: infiniteQueryOptionsFn,\n                  // TODO: better types syntax\n                  types: [\n                    typeResponse,\n                    typeError.name,\n                    `${typeof typeInfiniteData === 'string' ? typeInfiniteData : typeInfiniteData.name}<${typeResponse}>`,\n                    typeQueryKey,\n                    typePageParam,\n                  ],\n                }),\n              ],\n            }),\n            name: toInfiniteQueryOptionsName(operation),\n          });\n          file.add(statement);\n        }\n      }\n\n      // mutations\n      if (\n        plugin.mutationOptions &&\n        (['DELETE', 'PATCH', 'POST', 'PUT'] as ReadonlyArray<Method>).includes(\n          operation.method,\n        )\n      ) {\n        if (!hasMutations) {\n          hasMutations = true;\n\n          file.import({\n            asType: true,\n            module: plugin.name,\n            name: mutationsType,\n          });\n        }\n\n        hasUsedQueryFn = true;\n\n        const { typeData } = createTypeData({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n        const { typeError } = createTypeError({\n          client,\n          file,\n          operation,\n          pluginName: plugin.name,\n          typesModulePath,\n        });\n        const { typeResponse } = createTypeResponse({\n          client,\n          file,\n          operation,\n          typesModulePath,\n        });\n\n        const expression = compiler.arrowFunction({\n          parameters: [\n            {\n              isRequired: false,\n              name: 'options',\n              type: `Partial<${typeData}>`,\n            },\n          ],\n          statements: [\n            compiler.constVariable({\n              expression: compiler.objectExpression({\n                obj: [\n                  {\n                    key: 'mutationFn',\n                    value: compiler.arrowFunction({\n                      async: true,\n                      multiLine: true,\n                      parameters: [\n                        {\n                          name: 'localOptions',\n                        },\n                      ],\n                      statements: [\n                        compiler.constVariable({\n                          destructure: true,\n                          expression: compiler.awaitExpression({\n                            expression: compiler.callExpression({\n                              functionName: queryFn,\n                              parameters: [\n                                compiler.objectExpression({\n                                  multiLine: true,\n                                  obj: [\n                                    {\n                                      spread: 'options',\n                                    },\n                                    {\n                                      spread: 'localOptions',\n                                    },\n                                    {\n                                      key: 'throwOnError',\n                                      value: true,\n                                    },\n                                  ],\n                                }),\n                              ],\n                            }),\n                          }),\n                          name: 'data',\n                        }),\n                        compiler.returnVariable({\n                          expression: 'data',\n                        }),\n                      ],\n                    }),\n                  },\n                ],\n              }),\n              name: mutationOptionsFn,\n              // TODO: better types syntax\n              typeName: `${mutationsType}<${typeResponse}, ${typeError.name}, ${typeData}>`,\n            }),\n            compiler.returnVariable({\n              expression: mutationOptionsFn,\n            }),\n          ],\n        });\n        const statement = compiler.constVariable({\n          // TODO: describe options, same as the actual function call\n          comment: [],\n          exportConst: true,\n          expression,\n          name: toMutationOptionsName(operation),\n        });\n        file.add(statement);\n      }\n\n      const sdkModulePath = relativeModulePath({\n        moduleOutput: files.sdk!.nameWithoutExtension(),\n        sourceOutput: plugin.output,\n      });\n\n      if (hasQueries || hasInfiniteQueries) {\n        file.import({\n          module: sdkModulePath,\n          name: 'client',\n        });\n      }\n\n      if (hasUsedQueryFn) {\n        file.import({\n          module: sdkModulePath,\n          name: queryFn.split('.')[0]!,\n        });\n      }\n    }\n  }\n};\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/angular-query-experimental',\n  output: '@tanstack/angular-query-experimental',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/angular-query-experimental` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/react-query',\n  output: '@tanstack/react-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/react-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/solid-query',\n  output: '@tanstack/solid-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/solid-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/svelte-query',\n  output: '@tanstack/svelte-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/svelte-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../../types';\nimport { handler } from '../query-core/plugin';\nimport { handlerLegacy } from '../query-core/plugin-legacy';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/sdk', '@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: handlerLegacy,\n  infiniteQueryOptions: true,\n  mutationOptions: true,\n  name: '@tanstack/vue-query',\n  output: '@tanstack/vue-query',\n  queryOptions: true,\n};\n\n/**\n * Type helper for `@tanstack/vue-query` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type ts from 'typescript';\n\nimport { compiler, type Property } from '../../compiler';\nimport { operationResponsesMap } from '../../ir/operation';\nimport { hasParameterGroupObjectRequired } from '../../ir/parameter';\nimport type { IR } from '../../ir/types';\nimport { operationIrRef } from '../shared/utils/ref';\nimport type { Plugin } from '../types';\nimport type { Config } from './types';\n\nconst fastifyId = 'fastify';\n\nconst operationToRouteHandler = ({\n  context,\n  operation,\n}: {\n  context: IR.Context;\n  operation: IR.OperationObject;\n}): Property | undefined => {\n  const file = context.file({ id: fastifyId })!;\n  const fileTypes = context.file({ id: 'types' })!;\n\n  const properties: Array<Property> = [];\n\n  const identifierData = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'data' }),\n    namespace: 'type',\n  });\n  if (identifierData.name) {\n    if (operation.body) {\n      file.import({\n        asType: true,\n        module: file.relativePathToFile({ context, id: 'types' }),\n        name: identifierData.name,\n      });\n      properties.push({\n        isRequired: operation.body.required,\n        name: 'Body',\n        type: `${identifierData.name}['body']`,\n      });\n    }\n\n    if (operation.parameters) {\n      if (operation.parameters.header) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.header,\n          ),\n          name: 'Headers',\n          type: `${identifierData.name}['headers']`,\n        });\n      }\n\n      if (operation.parameters.path) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.path,\n          ),\n          name: 'Params',\n          type: `${identifierData.name}['path']`,\n        });\n      }\n\n      if (operation.parameters.query) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierData.name,\n        });\n        properties.push({\n          isRequired: hasParameterGroupObjectRequired(\n            operation.parameters.query,\n          ),\n          name: 'Querystring',\n          type: `${identifierData.name}['query']`,\n        });\n      }\n    }\n  }\n\n  const { errors, responses } = operationResponsesMap(operation);\n\n  let errorsTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierErrors = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'errors' }),\n    namespace: 'type',\n  });\n  if (identifierErrors.name && errors && errors.properties) {\n    const keys = Object.keys(errors.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierErrors.name,\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierErrors.name,\n        });\n        const errorsType = compiler.typeReferenceNode({\n          typeName: identifierErrors.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        errorsTypeReference = compiler.typeReferenceNode({\n          typeArguments: [errorsType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  let responsesTypeReference: ts.TypeReferenceNode | undefined = undefined;\n  const identifierResponses = fileTypes.identifier({\n    $ref: operationIrRef({ id: operation.id, type: 'responses' }),\n    namespace: 'type',\n  });\n  if (identifierResponses.name && responses && responses.properties) {\n    const keys = Object.keys(responses.properties);\n    if (keys.length) {\n      const hasDefaultResponse = keys.includes('default');\n      if (!hasDefaultResponse) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierResponses.name,\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n      } else if (keys.length > 1) {\n        file.import({\n          asType: true,\n          module: file.relativePathToFile({ context, id: 'types' }),\n          name: identifierResponses.name,\n        });\n        const responsesType = compiler.typeReferenceNode({\n          typeName: identifierResponses.name,\n        });\n        const defaultType = compiler.literalTypeNode({\n          literal: compiler.stringLiteral({ text: 'default' }),\n        });\n        responsesTypeReference = compiler.typeReferenceNode({\n          typeArguments: [responsesType, defaultType],\n          typeName: 'Omit',\n        });\n      }\n    }\n  }\n\n  const replyTypes = [errorsTypeReference, responsesTypeReference].filter(\n    Boolean,\n  );\n  if (replyTypes.length) {\n    properties.push({\n      name: 'Reply',\n      type: compiler.typeIntersectionNode({\n        types: replyTypes,\n      }),\n    });\n  }\n\n  if (!properties.length) {\n    return;\n  }\n\n  const routeHandler: Property = {\n    name: operation.id,\n    type: compiler.typeNode('RouteHandler', [\n      compiler.typeInterfaceNode({\n        properties,\n        useLegacyResolution: false,\n      }),\n    ]),\n  };\n  return routeHandler;\n};\n\nexport const handler: Plugin.Handler<Config> = ({ context, plugin }) => {\n  const file = context.createFile({\n    exportFromIndex: plugin.exportFromIndex,\n    id: fastifyId,\n    path: plugin.output,\n  });\n\n  const routeHandlers: Array<Property> = [];\n\n  context.subscribe('operation', ({ operation }) => {\n    const routeHandler = operationToRouteHandler({ context, operation });\n    if (routeHandler) {\n      routeHandlers.push(routeHandler);\n    }\n  });\n\n  context.subscribe('after', () => {\n    const identifier = file.identifier({\n      $ref: 'RouteHandlers',\n      create: true,\n      namespace: 'type',\n    });\n\n    if (!identifier.name) {\n      return;\n    }\n\n    if (routeHandlers.length) {\n      file.import({\n        asType: true,\n        module: 'fastify',\n        name: 'RouteHandler',\n      });\n    }\n\n    file.add(\n      compiler.typeAliasDeclaration({\n        exportType: true,\n        name: identifier.name,\n        type: compiler.typeInterfaceNode({\n          properties: routeHandlers,\n          useLegacyResolution: false,\n        }),\n      }),\n    );\n  });\n};\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _dependencies: ['@hey-api/typescript'],\n  _handler: handler,\n  _handlerLegacy: () => {},\n  name: 'fastify',\n  output: 'fastify',\n};\n\n/**\n * Type helper for `fastify` plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import type { Plugin } from '../types';\nimport { handler } from './plugin';\nimport type { Config } from './types';\n\nexport const defaultConfig: Plugin.Config<Config> = {\n  _handler: handler,\n  _handlerLegacy: () => {},\n  _tags: ['validator'],\n  name: 'zod',\n  output: 'zod',\n};\n\n/**\n * Type helper for Zod plugin, returns {@link Plugin.Config} object\n */\nexport const defineConfig: Plugin.DefineConfig<Config> = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n","import {\n  type Config as HeyApiSchemas,\n  defaultConfig as heyApiSchemas,\n} from './@hey-api/schemas';\nimport {\n  type Config as HeyApiSdk,\n  defaultConfig as heyApiSdk,\n} from './@hey-api/sdk';\nimport {\n  type Config as HeyApiTransformers,\n  defaultConfig as heyApiTransformers,\n} from './@hey-api/transformers';\nimport {\n  type Config as HeyApiTypeScript,\n  defaultConfig as heyApiTypeScript,\n} from './@hey-api/typescript';\nimport {\n  type Config as TanStackAngularQueryExperimental,\n  defaultConfig as tanStackAngularQueryExperimental,\n} from './@tanstack/angular-query-experimental';\nimport {\n  type Config as TanStackReactQuery,\n  defaultConfig as tanStackReactQuery,\n} from './@tanstack/react-query';\nimport {\n  type Config as TanStackSolidQuery,\n  defaultConfig as tanStackSolidQuery,\n} from './@tanstack/solid-query';\nimport {\n  type Config as TanStackSvelteQuery,\n  defaultConfig as tanStackSvelteQuery,\n} from './@tanstack/svelte-query';\nimport {\n  type Config as TanStackVueQuery,\n  defaultConfig as tanStackVueQuery,\n} from './@tanstack/vue-query';\nimport { type Config as Fastify, defaultConfig as fastify } from './fastify';\nimport type { DefaultPluginConfigs, Plugin } from './types';\nimport { type Config as Zod, defaultConfig as zod } from './zod';\n\n/**\n * User-facing plugin types.\n */\nexport type UserPlugins =\n  | Plugin.UserConfig<HeyApiSchemas>\n  | Plugin.UserConfig<HeyApiSdk>\n  | Plugin.UserConfig<HeyApiTransformers>\n  | Plugin.UserConfig<HeyApiTypeScript>\n  | Plugin.UserConfig<TanStackAngularQueryExperimental>\n  | Plugin.UserConfig<TanStackReactQuery>\n  | Plugin.UserConfig<TanStackSolidQuery>\n  | Plugin.UserConfig<TanStackSvelteQuery>\n  | Plugin.UserConfig<TanStackVueQuery>\n  | Plugin.UserConfig<Fastify>\n  | Plugin.UserConfig<Zod>;\n\n/**\n * Internal plugin types.\n */\nexport type ClientPlugins =\n  | Plugin.Config<HeyApiSchemas>\n  | Plugin.Config<HeyApiSdk>\n  | Plugin.Config<HeyApiTransformers>\n  | Plugin.Config<HeyApiTypeScript>\n  | Plugin.Config<TanStackAngularQueryExperimental>\n  | Plugin.Config<TanStackReactQuery>\n  | Plugin.Config<TanStackSolidQuery>\n  | Plugin.Config<TanStackSvelteQuery>\n  | Plugin.Config<TanStackVueQuery>\n  | Plugin.Config<Fastify>\n  | Plugin.Config<Zod>;\n\nexport const defaultPluginConfigs: DefaultPluginConfigs<ClientPlugins> = {\n  '@hey-api/schemas': heyApiSchemas,\n  '@hey-api/sdk': heyApiSdk,\n  '@hey-api/transformers': heyApiTransformers,\n  '@hey-api/typescript': heyApiTypeScript,\n  '@tanstack/angular-query-experimental': tanStackAngularQueryExperimental,\n  '@tanstack/react-query': tanStackReactQuery,\n  '@tanstack/solid-query': tanStackSolidQuery,\n  '@tanstack/svelte-query': tanStackSvelteQuery,\n  '@tanstack/vue-query': tanStackVueQuery,\n  fastify,\n  zod,\n};\n","import type { ClientPlugins, UserPlugins } from '../plugins';\nimport type {\n  ArrayOfObjectsToObjectMap,\n  ExtractArrayOfObjects,\n  ExtractWithDiscriminator,\n} from './utils';\n\nexport const CLIENTS = [\n  '@hey-api/client-axios',\n  '@hey-api/client-fetch',\n  'legacy/angular',\n  'legacy/axios',\n  'legacy/fetch',\n  'legacy/node',\n  'legacy/xhr',\n] as const;\n\ntype Client = (typeof CLIENTS)[number];\n\nexport type Formatters = 'biome' | 'prettier';\n\nexport type Linters = 'biome' | 'eslint' | 'oxlint';\n\nexport type StringCase =\n  | 'camelCase'\n  | 'PascalCase'\n  | 'preserve'\n  | 'snake_case'\n  | 'SCREAMING_SNAKE_CASE';\n\nexport interface ClientConfig {\n  /**\n   * HTTP client to generate\n   */\n  client?:\n    | Client\n    | false\n    | {\n        /**\n         * Bundle the client module? Set this to true if you're using a client\n         * package and don't want to declare it as a separate dependency.\n         * When true, the client module will be generated from the client\n         * package and bundled with the rest of the generated output. This is\n         * useful if you're repackaging the output, publishing it to other users,\n         * and you don't want them to install any dependencies.\n         *\n         * @default false\n         */\n        bundle?: boolean;\n        /**\n         * HTTP client to generate\n         */\n        name: Client;\n      };\n  /**\n   * Path to the config file. Set this value if you don't use the default\n   * config file name, or it's not located in the project root.\n   */\n  configFile?: string;\n  /**\n   * Skip writing files to disk?\n   *\n   * @default false\n   */\n  dryRun?: boolean;\n  /**\n   * Opt in to the experimental parser?\n   *\n   * @default false\n   */\n  experimentalParser?: boolean;\n  /**\n   * Path to the OpenAPI specification. This can be either local or remote path.\n   * Both JSON and YAML file formats are supported. You can also pass the parsed\n   * object directly if you're fetching the file yourself.\n   *\n   * Alternatively, you can define a configuration object with more options.\n   */\n  input:\n    | string\n    | Record<string, unknown>\n    | {\n        /**\n         * **This feature works only with the [experimental parser](https://heyapi.dev/openapi-ts/configuration#parser)**\n         *\n         * Prevent parts matching the regular expression from being processed.\n         * You can select both operations and components by reference within\n         * the bundled input. In case of conflicts, `exclude` takes precedence\n         * over `include`.\n         *\n         * @example\n         * operation: '^#/paths/api/v1/foo/get$'\n         * schema: '^#/components/schemas/Foo$'\n         */\n        exclude?: string;\n        /**\n         * **This feature works only with the [experimental parser](https://heyapi.dev/openapi-ts/configuration#parser)**\n         *\n         * Process only parts matching the regular expression. You can select both\n         * operations and components by reference within the bundled input. In\n         * case of conflicts, `exclude` takes precedence over `include`.\n         *\n         * @example\n         * operation: '^#/paths/api/v1/foo/get$'\n         * schema: '^#/components/schemas/Foo$'\n         */\n        include?: string;\n        /**\n         * Path to the OpenAPI specification. This can be either local or remote path.\n         * Both JSON and YAML file formats are supported. You can also pass the parsed\n         * object directly if you're fetching the file yourself.\n         */\n        path: string | Record<string, unknown>;\n      };\n  /**\n   * The relative location of the logs folder\n   *\n   * @default process.cwd()\n   */\n  logs?:\n    | string\n    | {\n        /**\n         * The logging level to control the verbosity of log output.\n         * Determines which messages are logged based on their severity.\n         *\n         * Available levels (in increasing order of severity):\n         * - `trace`: Detailed debug information, primarily for development.\n         * - `debug`: Diagnostic information useful during debugging.\n         * - `info`: General operational messages that indicate normal application behavior.\n         * - `warn`: Potentially problematic situations that require attention.\n         * - `error`: Errors that prevent some functionality but do not crash the application.\n         * - `fatal`: Critical errors that cause the application to terminate.\n         * - `silent`: Disables all logging.\n         *\n         * Messages with a severity equal to or higher than the specified level will be logged.\n         *\n         * @default 'info'\n         */\n        level?:\n          | 'debug'\n          | 'error'\n          | 'fatal'\n          | 'info'\n          | 'silent'\n          | 'trace'\n          | 'warn';\n        /**\n         * The relative location of the logs folder\n         *\n         * @default process.cwd()\n         */\n        path?: string;\n      };\n  /**\n   * The relative location of the output folder\n   */\n  output:\n    | string\n    | {\n        /**\n         * **This feature works only with the [experimental parser](https://heyapi.dev/openapi-ts/configuration#parser)**\n         *\n         * Defines casing of the output fields. By default, we preserve `input`\n         * values as data transforms incur a performance penalty at runtime.\n         *\n         * @default undefined\n         */\n        case?: Exclude<StringCase, 'SCREAMING_SNAKE_CASE'>;\n        /**\n         * Clean the `output` folder on every run? If disabled, this folder may\n         * be used to store additional files. The default option is `true` to\n         * reduce the risk of keeping outdated files around when configuration,\n         * input, or package version changes.\n         *\n         * @default true\n         */\n        clean?: boolean;\n        /**\n         * Process output folder with formatter?\n         *\n         * @default false\n         */\n        format?: Formatters | false;\n        /**\n         * Process output folder with linter?\n         *\n         * @default false\n         */\n        lint?: Linters | false;\n        /**\n         * The relative location of the output folder\n         */\n        path: string;\n      };\n  /**\n   * Plugins generate artifacts from `input`. By default, we generate SDK\n   * functions and TypeScript interfaces. If you manually define `plugins`,\n   * you need to include the default plugins if you wish to use them.\n   *\n   * @default ['@hey-api/typescript', '@hey-api/sdk']\n   */\n  plugins?: ReadonlyArray<UserPlugins['name'] | UserPlugins>;\n  /**\n   * Manually set base in OpenAPI config instead of inferring from server value\n   *\n   * @deprecated\n   */\n  // eslint-disable-next-line typescript-sort-keys/interface\n  base?: string;\n  /**\n   * Generate core client classes?\n   *\n   * @deprecated\n   *\n   * @default true\n   */\n  exportCore?: boolean;\n  /**\n   * Custom client class name. Please note this option is deprecated and\n   * will be removed in favor of clients.\n   *\n   * @link https://heyapi.dev/openapi-ts/migrating.html#deprecated-name\n   *\n   * @deprecated\n   */\n  name?: string;\n  /**\n   * Path to custom request file. Please note this option is deprecated and\n   * will be removed in favor of clients.\n   *\n   * @link https://heyapi.dev/openapi-ts/migrating.html#deprecated-request\n   *\n   * @deprecated\n   */\n  request?: string;\n  /**\n   * Use options or arguments functions. Please note this option is deprecated and\n   * will be removed in favor of clients.\n   *\n   * @link https://heyapi.dev/openapi-ts/migrating.html#deprecated-useoptions\n   *\n   * @deprecated\n   *\n   * @default true\n   */\n  useOptions?: boolean;\n  /**\n   * Regenerate the client when the input file changes?\n   *\n   * @default false\n   */\n  watch?:\n    | boolean\n    | number\n    | {\n        /**\n         * Regenerate the client when the input file changes?\n         *\n         * @default false\n         */\n        enabled?: boolean;\n        /**\n         * How often should we attempt to detect the input file change?\n         *\n         * @default 1000\n         */\n        interval?: number;\n      };\n}\n\nexport interface UserConfig extends ClientConfig {}\n\nexport type Config = Omit<\n  Required<ClientConfig>,\n  | 'base'\n  | 'client'\n  | 'input'\n  | 'logs'\n  | 'name'\n  | 'output'\n  | 'plugins'\n  | 'request'\n  | 'watch'\n> &\n  Pick<ClientConfig, 'base' | 'name' | 'request'> & {\n    client: Extract<Required<ClientConfig>['client'], object>;\n    input: ExtractWithDiscriminator<ClientConfig['input'], { path: unknown }>;\n    logs: Extract<Required<ClientConfig['logs']>, object>;\n    output: Extract<ClientConfig['output'], object>;\n    pluginOrder: ReadonlyArray<ClientPlugins['name']>;\n    plugins: ArrayOfObjectsToObjectMap<\n      ExtractArrayOfObjects<ReadonlyArray<ClientPlugins>, { name: string }>,\n      'name'\n    >;\n    watch: Extract<ClientConfig['watch'], object>;\n  };\n","import Handlebars from 'handlebars';\n\n// @ts-expect-error\nimport templateClient from '../legacy/handlebars/compiled/client.js';\n// @ts-expect-error\nimport angularGetHeaders from '../legacy/handlebars/compiled/core/angular/getHeaders.js';\n// @ts-expect-error\nimport angularGetRequestBody from '../legacy/handlebars/compiled/core/angular/getRequestBody.js';\n// @ts-expect-error\nimport angularGetResponseBody from '../legacy/handlebars/compiled/core/angular/getResponseBody.js';\n// @ts-expect-error\nimport angularGetResponseHeader from '../legacy/handlebars/compiled/core/angular/getResponseHeader.js';\n// @ts-expect-error\nimport angularRequest from '../legacy/handlebars/compiled/core/angular/request.js';\n// @ts-expect-error\nimport angularSendRequest from '../legacy/handlebars/compiled/core/angular/sendRequest.js';\n// @ts-expect-error\nimport templateCoreApiError from '../legacy/handlebars/compiled/core/ApiError.js';\n// @ts-expect-error\nimport templateCoreApiRequestOptions from '../legacy/handlebars/compiled/core/ApiRequestOptions.js';\n// @ts-expect-error\nimport templateCoreApiResult from '../legacy/handlebars/compiled/core/ApiResult.js';\n// @ts-expect-error\nimport axiosGetHeaders from '../legacy/handlebars/compiled/core/axios/getHeaders.js';\n// @ts-expect-error\nimport axiosGetRequestBody from '../legacy/handlebars/compiled/core/axios/getRequestBody.js';\n// @ts-expect-error\nimport axiosGetResponseBody from '../legacy/handlebars/compiled/core/axios/getResponseBody.js';\n// @ts-expect-error\nimport axiosGetResponseHeader from '../legacy/handlebars/compiled/core/axios/getResponseHeader.js';\n// @ts-expect-error\nimport axiosRequest from '../legacy/handlebars/compiled/core/axios/request.js';\n// @ts-expect-error\nimport axiosSendRequest from '../legacy/handlebars/compiled/core/axios/sendRequest.js';\n// @ts-expect-error\nimport templateCoreBaseHttpRequest from '../legacy/handlebars/compiled/core/BaseHttpRequest.js';\n// @ts-expect-error\nimport templateCancelablePromise from '../legacy/handlebars/compiled/core/CancelablePromise.js';\n// @ts-expect-error\nimport fetchGetHeaders from '../legacy/handlebars/compiled/core/fetch/getHeaders.js';\n// @ts-expect-error\nimport fetchGetRequestBody from '../legacy/handlebars/compiled/core/fetch/getRequestBody.js';\n// @ts-expect-error\nimport fetchGetResponseBody from '../legacy/handlebars/compiled/core/fetch/getResponseBody.js';\n// @ts-expect-error\nimport fetchGetResponseHeader from '../legacy/handlebars/compiled/core/fetch/getResponseHeader.js';\n// @ts-expect-error\nimport fetchRequest from '../legacy/handlebars/compiled/core/fetch/request.js';\n// @ts-expect-error\nimport fetchSendRequest from '../legacy/handlebars/compiled/core/fetch/sendRequest.js';\n// @ts-expect-error\nimport functionBase64 from '../legacy/handlebars/compiled/core/functions/base64.js';\n// @ts-expect-error\nimport functionCatchErrorCodes from '../legacy/handlebars/compiled/core/functions/catchErrorCodes.js';\n// @ts-expect-error\nimport functionGetFormData from '../legacy/handlebars/compiled/core/functions/getFormData.js';\n// @ts-expect-error\nimport functionGetQueryString from '../legacy/handlebars/compiled/core/functions/getQueryString.js';\n// @ts-expect-error\nimport functionGetUrl from '../legacy/handlebars/compiled/core/functions/getUrl.js';\n// @ts-expect-error\nimport functionIsBlob from '../legacy/handlebars/compiled/core/functions/isBlob.js';\n// @ts-expect-error\nimport functionIsFormData from '../legacy/handlebars/compiled/core/functions/isFormData.js';\n// @ts-expect-error\nimport functionIsString from '../legacy/handlebars/compiled/core/functions/isString.js';\n// @ts-expect-error\nimport functionIsStringWithValue from '../legacy/handlebars/compiled/core/functions/isStringWithValue.js';\n// @ts-expect-error\nimport functionIsSuccess from '../legacy/handlebars/compiled/core/functions/isSuccess.js';\n// @ts-expect-error\nimport functionResolve from '../legacy/handlebars/compiled/core/functions/resolve.js';\n// @ts-expect-error\nimport templateCoreHttpRequest from '../legacy/handlebars/compiled/core/HttpRequest.js';\n// @ts-expect-error\nimport templateCoreSettings from '../legacy/handlebars/compiled/core/OpenAPI.js';\n// @ts-expect-error\nimport templateCoreRequest from '../legacy/handlebars/compiled/core/request.js';\n// @ts-expect-error\nimport xhrGetHeaders from '../legacy/handlebars/compiled/core/xhr/getHeaders.js';\n// @ts-expect-error\nimport xhrGetRequestBody from '../legacy/handlebars/compiled/core/xhr/getRequestBody.js';\n// @ts-expect-error\nimport xhrGetResponseBody from '../legacy/handlebars/compiled/core/xhr/getResponseBody.js';\n// @ts-expect-error\nimport xhrGetResponseHeader from '../legacy/handlebars/compiled/core/xhr/getResponseHeader.js';\n// @ts-expect-error\nimport xhrRequest from '../legacy/handlebars/compiled/core/xhr/request.js';\n// @ts-expect-error\nimport xhrSendRequest from '../legacy/handlebars/compiled/core/xhr/sendRequest.js';\nimport { getConfig } from './config';\nimport { stringCase } from './stringCase';\nimport { transformServiceName } from './transform';\n\nexport const registerHandlebarHelpers = (): void => {\n  Handlebars.registerHelper(\n    'camelCase',\n    function (this: unknown, name: string) {\n      return stringCase({\n        case: 'camelCase',\n        value: name,\n      });\n    },\n  );\n\n  Handlebars.registerHelper(\n    'equals',\n    function (\n      this: unknown,\n      a: string,\n      b: string,\n      options: Handlebars.HelperOptions,\n    ) {\n      return a === b ? options.fn(this) : options.inverse(this);\n    },\n  );\n\n  Handlebars.registerHelper(\n    'ifServicesResponse',\n    function (this: unknown, value: string, options: Handlebars.HelperOptions) {\n      return getConfig().plugins['@hey-api/sdk']?.response === value\n        ? options.fn(this)\n        : options.inverse(this);\n    },\n  );\n\n  Handlebars.registerHelper('ifdef', function (this: unknown, ...args): string {\n    const options = args.pop();\n    if (!args.every((value) => !value)) {\n      return options.fn(this);\n    }\n    return options.inverse(this);\n  });\n\n  Handlebars.registerHelper(\n    'notEquals',\n    function (\n      this: unknown,\n      a: string,\n      b: string,\n      options: Handlebars.HelperOptions,\n    ) {\n      return a !== b ? options.fn(this) : options.inverse(this);\n    },\n  );\n\n  Handlebars.registerHelper(\n    'transformServiceName',\n    function (this: unknown, name: string) {\n      return transformServiceName({\n        config: getConfig(),\n        name,\n      });\n    },\n  );\n};\n\nexport interface Templates {\n  client: Handlebars.TemplateDelegate;\n  core: {\n    apiError: Handlebars.TemplateDelegate;\n    apiRequestOptions: Handlebars.TemplateDelegate;\n    apiResult: Handlebars.TemplateDelegate;\n    baseHttpRequest: Handlebars.TemplateDelegate;\n    cancelablePromise: Handlebars.TemplateDelegate;\n    httpRequest: Handlebars.TemplateDelegate;\n    request: Handlebars.TemplateDelegate;\n    settings: Handlebars.TemplateDelegate;\n  };\n}\n\n/**\n * Read all the Handlebar templates that we need and return a wrapper object\n * so we can easily access the templates in our generator/write functions.\n */\nexport const registerHandlebarTemplates = (): Templates => {\n  registerHandlebarHelpers();\n\n  // Main templates (entry points for the files we write to disk)\n  const templates: Templates = {\n    client: Handlebars.template(templateClient),\n    core: {\n      apiError: Handlebars.template(templateCoreApiError),\n      apiRequestOptions: Handlebars.template(templateCoreApiRequestOptions),\n      apiResult: Handlebars.template(templateCoreApiResult),\n      baseHttpRequest: Handlebars.template(templateCoreBaseHttpRequest),\n      cancelablePromise: Handlebars.template(templateCancelablePromise),\n      httpRequest: Handlebars.template(templateCoreHttpRequest),\n      request: Handlebars.template(templateCoreRequest),\n      settings: Handlebars.template(templateCoreSettings),\n    },\n  };\n\n  // Generic functions used in 'request' file @see src/legacy/handlebars/templates/core/request.hbs for more info\n  Handlebars.registerPartial(\n    'functions/base64',\n    Handlebars.template(functionBase64),\n  );\n  Handlebars.registerPartial(\n    'functions/catchErrorCodes',\n    Handlebars.template(functionCatchErrorCodes),\n  );\n  Handlebars.registerPartial(\n    'functions/getFormData',\n    Handlebars.template(functionGetFormData),\n  );\n  Handlebars.registerPartial(\n    'functions/getQueryString',\n    Handlebars.template(functionGetQueryString),\n  );\n  Handlebars.registerPartial(\n    'functions/getUrl',\n    Handlebars.template(functionGetUrl),\n  );\n  Handlebars.registerPartial(\n    'functions/isBlob',\n    Handlebars.template(functionIsBlob),\n  );\n  Handlebars.registerPartial(\n    'functions/isFormData',\n    Handlebars.template(functionIsFormData),\n  );\n  Handlebars.registerPartial(\n    'functions/isString',\n    Handlebars.template(functionIsString),\n  );\n  Handlebars.registerPartial(\n    'functions/isStringWithValue',\n    Handlebars.template(functionIsStringWithValue),\n  );\n  Handlebars.registerPartial(\n    'functions/isSuccess',\n    Handlebars.template(functionIsSuccess),\n  );\n  Handlebars.registerPartial(\n    'functions/resolve',\n    Handlebars.template(functionResolve),\n  );\n\n  // Specific files for the fetch client implementation\n  Handlebars.registerPartial(\n    'fetch/getHeaders',\n    Handlebars.template(fetchGetHeaders),\n  );\n  Handlebars.registerPartial(\n    'fetch/getRequestBody',\n    Handlebars.template(fetchGetRequestBody),\n  );\n  Handlebars.registerPartial(\n    'fetch/getResponseBody',\n    Handlebars.template(fetchGetResponseBody),\n  );\n  Handlebars.registerPartial(\n    'fetch/getResponseHeader',\n    Handlebars.template(fetchGetResponseHeader),\n  );\n  Handlebars.registerPartial(\n    'fetch/request',\n    Handlebars.template(fetchRequest),\n  );\n  Handlebars.registerPartial(\n    'fetch/sendRequest',\n    Handlebars.template(fetchSendRequest),\n  );\n\n  // Specific files for the xhr client implementation\n  Handlebars.registerPartial(\n    'xhr/getHeaders',\n    Handlebars.template(xhrGetHeaders),\n  );\n  Handlebars.registerPartial(\n    'xhr/getRequestBody',\n    Handlebars.template(xhrGetRequestBody),\n  );\n  Handlebars.registerPartial(\n    'xhr/getResponseBody',\n    Handlebars.template(xhrGetResponseBody),\n  );\n  Handlebars.registerPartial(\n    'xhr/getResponseHeader',\n    Handlebars.template(xhrGetResponseHeader),\n  );\n  Handlebars.registerPartial('xhr/request', Handlebars.template(xhrRequest));\n  Handlebars.registerPartial(\n    'xhr/sendRequest',\n    Handlebars.template(xhrSendRequest),\n  );\n\n  // Specific files for the axios client implementation\n  Handlebars.registerPartial(\n    'axios/getHeaders',\n    Handlebars.template(axiosGetHeaders),\n  );\n  Handlebars.registerPartial(\n    'axios/getRequestBody',\n    Handlebars.template(axiosGetRequestBody),\n  );\n  Handlebars.registerPartial(\n    'axios/getResponseBody',\n    Handlebars.template(axiosGetResponseBody),\n  );\n  Handlebars.registerPartial(\n    'axios/getResponseHeader',\n    Handlebars.template(axiosGetResponseHeader),\n  );\n  Handlebars.registerPartial(\n    'axios/request',\n    Handlebars.template(axiosRequest),\n  );\n  Handlebars.registerPartial(\n    'axios/sendRequest',\n    Handlebars.template(axiosSendRequest),\n  );\n\n  // Specific files for the angular client implementation\n  Handlebars.registerPartial(\n    'angular/getHeaders',\n    Handlebars.template(angularGetHeaders),\n  );\n  Handlebars.registerPartial(\n    'angular/getRequestBody',\n    Handlebars.template(angularGetRequestBody),\n  );\n  Handlebars.registerPartial(\n    'angular/getResponseBody',\n    Handlebars.template(angularGetResponseBody),\n  );\n  Handlebars.registerPartial(\n    'angular/getResponseHeader',\n    Handlebars.template(angularGetResponseHeader),\n  );\n  Handlebars.registerPartial(\n    'angular/request',\n    Handlebars.template(angularRequest),\n  );\n  Handlebars.registerPartial(\n    'angular/sendRequest',\n    Handlebars.template(angularSendRequest),\n  );\n\n  return templates;\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return \"import { NgModule} from '@angular/core';\\nimport { HttpClientModule } from '@angular/common/http';\\n\\nimport { AngularHttpRequest } from './core/AngularHttpRequest';\\nimport { BaseHttpRequest } from './core/BaseHttpRequest';\\nimport type { OpenAPIConfig } from './core/OpenAPI';\\nimport { OpenAPI } from './core/OpenAPI';\\nimport { Interceptors } from './core/OpenAPI';\\n\";\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = container.strict,\n      alias2 = container.lambda;\n\n    return (\n      \"import type { BaseHttpRequest } from './core/BaseHttpRequest';\\nimport type { OpenAPIConfig } from './core/OpenAPI';\\nimport { Interceptors } from './core/OpenAPI';\\nimport { \" +\n      ((stack1 = alias2(\n        alias1(depth0, 'httpRequest', {\n          start: { line: 14, column: 12 },\n          end: { line: 14, column: 23 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \" } from './core/\" +\n      ((stack1 = alias2(\n        alias1(depth0, 'httpRequest', {\n          start: { line: 14, column: 45 },\n          end: { line: 14, column: 56 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"';\\n\"\n    );\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (stack1 = lookupProperty(helpers, 'each').call(\n      depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty(depth0, 'services'),\n      {\n        name: 'each',\n        hash: {},\n        fn: container.program(6, data, 0),\n        inverse: container.noop,\n        data: data,\n        loc: { start: { line: 18, column: 0 }, end: { line: 20, column: 9 } },\n      },\n    )) != null\n      ? stack1\n      : '';\n  },\n  6: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      'import { ' +\n      ((stack1 = lookupProperty(helpers, 'transformServiceName').call(\n        depth0 != null ? depth0 : container.nullContext || {},\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'transformServiceName',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 19, column: 9 },\n            end: { line: 19, column: 40 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      \" } from './sdk.gen';\\n\"\n    );\n  },\n  8: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = container.strict,\n      alias2 = container.lambda,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      \"@NgModule({\\n\timports: [HttpClientModule],\\n\tproviders: [\\n\t\t{\\n\t\t\tprovide: OpenAPI,\\n\t\t\tuseValue: {\\n\t\t\t\tBASE: OpenAPI?.BASE ?? '\" +\n      ((stack1 = alias2(\n        alias1(depth0, 'server', {\n          start: { line: 30, column: 31 },\n          end: { line: 30, column: 37 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\t\t\t\tVERSION: OpenAPI?.VERSION ?? '\" +\n      ((stack1 = alias2(\n        alias1(depth0, 'version', {\n          start: { line: 31, column: 37 },\n          end: { line: 31, column: 44 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\t\t\t\tWITH_CREDENTIALS: OpenAPI?.WITH_CREDENTIALS ?? false,\\n\t\t\t\tCREDENTIALS: OpenAPI?.CREDENTIALS ?? 'include',\\n\t\t\t\tTOKEN: OpenAPI?.TOKEN,\\n\t\t\t\tUSERNAME: OpenAPI?.USERNAME,\\n\t\t\t\tPASSWORD: OpenAPI?.PASSWORD,\\n\t\t\t\tHEADERS: OpenAPI?.HEADERS,\\n\t\t\t\tENCODE_PATH: OpenAPI?.ENCODE_PATH,\\n\t\t\t\tinterceptors: {\\n\t\t\t\t\tresponse: OpenAPI?.interceptors?.response ?? new Interceptors(),\\n\t\t\t\t},\\n\t\t\t} as OpenAPIConfig,\\n\t\t},\\n\t\t{\\n\t\t\tprovide: BaseHttpRequest,\\n\t\t\tuseClass: AngularHttpRequest,\\n\t\t},\\n\" +\n      ((stack1 = lookupProperty(helpers, 'each').call(\n        depth0 != null ? depth0 : container.nullContext || {},\n        lookupProperty(depth0, 'services'),\n        {\n          name: 'each',\n          hash: {},\n          fn: container.program(9, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 48, column: 2 },\n            end: { line: 50, column: 11 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\t]\\n})\\nexport class ' +\n      ((stack1 = alias2(\n        alias1(\n          lookupProperty(lookupProperty(data, 'root'), '$config'),\n          'name',\n          { start: { line: 53, column: 16 }, end: { line: 53, column: 34 } },\n        ),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      ' {}\\n'\n    );\n  },\n  9: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      '\t\t' +\n      ((stack1 = lookupProperty(helpers, 'transformServiceName').call(\n        depth0 != null ? depth0 : container.nullContext || {},\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'transformServiceName',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 49, column: 2 },\n            end: { line: 49, column: 33 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ',\\n'\n    );\n  },\n  11: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = container.strict,\n      alias2 = container.lambda,\n      alias3 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      'type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;\\n\\nexport class ' +\n      ((stack1 = alias2(\n        alias1(\n          lookupProperty(lookupProperty(data, 'root'), '$config'),\n          'name',\n          { start: { line: 57, column: 16 }, end: { line: 57, column: 34 } },\n        ),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      ' {\\n\\n' +\n      ((stack1 = lookupProperty(helpers, 'each').call(\n        alias3,\n        lookupProperty(depth0, 'services'),\n        {\n          name: 'each',\n          hash: {},\n          fn: container.program(12, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 59, column: 1 },\n            end: { line: 61, column: 10 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\tpublic readonly request: BaseHttpRequest;\\n\\n\tconstructor(config?: Partial<OpenAPIConfig>, HttpRequest: HttpRequestConstructor = ' +\n      ((stack1 = alias2(\n        alias1(depth0, 'httpRequest', {\n          start: { line: 65, column: 87 },\n          end: { line: 65, column: 98 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \") {\\n\t\tthis.request = new HttpRequest({\\n\t\t\tBASE: config?.BASE ?? '\" +\n      ((stack1 = alias2(\n        alias1(depth0, 'server', {\n          start: { line: 67, column: 29 },\n          end: { line: 67, column: 35 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\t\t\tVERSION: config?.VERSION ?? '\" +\n      ((stack1 = alias2(\n        alias1(depth0, 'version', {\n          start: { line: 68, column: 35 },\n          end: { line: 68, column: 42 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\t\t\tWITH_CREDENTIALS: config?.WITH_CREDENTIALS ?? false,\\n\t\t\tCREDENTIALS: config?.CREDENTIALS ?? 'include',\\n\t\t\tTOKEN: config?.TOKEN,\\n\t\t\tUSERNAME: config?.USERNAME,\\n\t\t\tPASSWORD: config?.PASSWORD,\\n\t\t\tHEADERS: config?.HEADERS,\\n\t\t\tENCODE_PATH: config?.ENCODE_PATH,\\n\t\t\tinterceptors: {\\n\t\t\t\trequest: config?.interceptors?.request ?? new Interceptors(),\\n\t\t\t\tresponse: config?.interceptors?.response ?? new Interceptors(),\\n      },\\n\t\t});\\n\\n\" +\n      ((stack1 = lookupProperty(helpers, 'each').call(\n        alias3,\n        lookupProperty(depth0, 'services'),\n        {\n          name: 'each',\n          hash: {},\n          fn: container.program(14, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 82, column: 2 },\n            end: { line: 84, column: 11 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\t}\\n}\\n'\n    );\n  },\n  12: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      '\tpublic readonly ' +\n      ((stack1 = lookupProperty(helpers, 'camelCase').call(\n        alias1,\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'camelCase',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 60, column: 17 },\n            end: { line: 60, column: 37 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ': ' +\n      ((stack1 = lookupProperty(helpers, 'transformServiceName').call(\n        alias1,\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'transformServiceName',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 60, column: 39 },\n            end: { line: 60, column: 70 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ';\\n'\n    );\n  },\n  14: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      '\t\tthis.' +\n      ((stack1 = lookupProperty(helpers, 'camelCase').call(\n        alias1,\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'camelCase',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 83, column: 7 },\n            end: { line: 83, column: 27 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ' = new ' +\n      ((stack1 = lookupProperty(helpers, 'transformServiceName').call(\n        alias1,\n        lookupProperty(depth0, 'name'),\n        {\n          name: 'transformServiceName',\n          hash: {},\n          data: data,\n          loc: {\n            start: { line: 83, column: 34 },\n            end: { line: 83, column: 65 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '(this.request);\\n'\n    );\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 15, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n' +\n      ((stack1 = lookupProperty(helpers, 'if').call(\n        alias1,\n        lookupProperty(depth0, 'services'),\n        {\n          name: 'if',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 17, column: 0 }, end: { line: 21, column: 7 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(8, data, 0),\n          inverse: container.program(11, data, 0),\n          data: data,\n          loc: {\n            start: { line: 23, column: 0 },\n            end: { line: 87, column: 11 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '')\n    );\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getHeaders = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Observable<HttpHeaders> => {\\n\treturn forkJoin({\\n\t\t// @ts-ignore\\n\t\ttoken: resolve(options, config.TOKEN),\\n\t\t// @ts-ignore\\n\t\tusername: resolve(options, config.USERNAME),\\n\t\t// @ts-ignore\\n\t\tpassword: resolve(options, config.PASSWORD),\\n\t\t// @ts-ignore\\n\t\tadditionalHeaders: resolve(options, config.HEADERS),\\n\t}).pipe(\\n\t\tmap(({ token, username, password, additionalHeaders }) => {\\n\t\t\tconst headers = Object.entries({\\n\t\t\t\tAccept: 'application/json',\\n\t\t\t\t...additionalHeaders,\\n\t\t\t\t...options.headers,\\n\t\t\t})\\n\t\t\t\t.filter(([, value]) => value !== undefined && value !== null)\\n\t\t\t\t.reduce((headers, [key, value]) => ({\\n\t\t\t\t\t...headers,\\n\t\t\t\t\t[key]: String(value),\\n\t\t\t\t}), {} as Record<string, string>);\\n\\n\t\t\tif (isStringWithValue(token)) {\\n\t\t\t\theaders['Authorization'] = `Bearer ${token}`;\\n\t\t\t}\\n\\n\t\t\tif (isStringWithValue(username) && isStringWithValue(password)) {\\n\t\t\t\tconst credentials = base64(`${username}:${password}`);\\n\t\t\t\theaders['Authorization'] = `Basic ${credentials}`;\\n\t\t\t}\\n\\n\t\t\tif (options.body !== undefined) {\\n\t\t\t\tif (options.mediaType) {\\n\t\t\t\t\theaders['Content-Type'] = options.mediaType;\\n\t\t\t\t} else if (isBlob(options.body)) {\\n\t\t\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\\n\t\t\t\t} else if (isString(options.body)) {\\n\t\t\t\t\theaders['Content-Type'] = 'text/plain';\\n\t\t\t\t} else if (!isFormData(options.body)) {\\n\t\t\t\t\theaders['Content-Type'] = 'application/json';\\n\t\t\t\t}\\n\t\t\t}\\n\\n\t\t\treturn new HttpHeaders(headers);\\n\t\t}),\\n\t);\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getRequestBody = (options: ApiRequestOptions): unknown => {\\n\tif (options.body) {\\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\\n\t\t\treturn options.body;\\n\t\t} else {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t}\\n\t}\\n\treturn undefined;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseBody = <T>(response: HttpResponse<T>): T | undefined => {\\n\tif (response.status !== 204 && response.body !== null) {\\n\t\treturn response.body;\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseHeader = <T>(response: HttpResponse<T>, responseHeader?: string): string | undefined => {\\n\tif (responseHeader) {\\n\t\tconst value = response.headers.get(responseHeader);\\n\t\tif (isString(value)) {\\n\t\t\treturn value;\\n\t\t}\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      \"import { HttpClient, HttpHeaders } from '@angular/common/http';\\nimport type { HttpResponse, HttpErrorResponse } from '@angular/common/http';\\nimport { forkJoin, of, throwError } from 'rxjs';\\nimport { catchError, map, switchMap } from 'rxjs/operators';\\nimport type { Observable } from 'rxjs';\\n\\nimport { ApiError } from './ApiError';\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { ApiResult } from './ApiResult';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\\n\" +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isString'),\n        depth0,\n        {\n          name: 'functions/isString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isStringWithValue'),\n        depth0,\n        {\n          name: 'functions/isStringWithValue',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isBlob'),\n        depth0,\n        {\n          name: 'functions/isBlob',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isFormData'),\n        depth0,\n        {\n          name: 'functions/isFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/base64'),\n        depth0,\n        {\n          name: 'functions/base64',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getQueryString'),\n        depth0,\n        {\n          name: 'functions/getQueryString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getUrl'),\n        depth0,\n        {\n          name: 'functions/getUrl',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getFormData'),\n        depth0,\n        {\n          name: 'functions/getFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/resolve'),\n        depth0,\n        {\n          name: 'functions/resolve',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'angular/getHeaders'),\n        depth0,\n        {\n          name: 'angular/getHeaders',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'angular/getRequestBody'),\n        depth0,\n        {\n          name: 'angular/getRequestBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'angular/sendRequest'),\n        depth0,\n        {\n          name: 'angular/sendRequest',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'angular/getResponseHeader'),\n        depth0,\n        {\n          name: 'angular/getResponseHeader',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'angular/getResponseBody'),\n        depth0,\n        {\n          name: 'angular/getResponseBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/catchErrorCodes'),\n        depth0,\n        {\n          name: 'functions/catchErrorCodes',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n/**\\n * Request method\\n * @param config The OpenAPI configuration object\\n * @param http The Angular HTTP client\\n * @param options The request options from the service\\n * @returns Observable<T>\\n * @throws ApiError\\n */\\nexport const request = <T>(config: OpenAPIConfig, http: HttpClient, options: ApiRequestOptions<T>): Observable<T> => {\\n\tconst url = getUrl(config, options);\\n\tconst formData = getFormData(options);\\n\tconst body = getRequestBody(options);\\n\\n\treturn getHeaders(config, options).pipe(\\n\t\tswitchMap(headers => {\\n\t\t\treturn sendRequest<T>(config, options, http, url, body, formData, headers);\\n\t\t}),\\n\t\tswitchMap(async response => {\\n\t\t\tfor (const fn of config.interceptors.response._fns) {\\n\t\t\t\tresponse = await fn(response);\\n\t\t\t}\\n\t\t\tconst responseBody = getResponseBody(response);\\n\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\\n\\n\t\t\tlet transformedBody = responseBody;\\n\t\t\tif (options.responseTransformer && response.ok) {\\n\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\\n\t\t\t}\\n\\n\t\t\treturn {\\n\t\t\t\turl,\\n\t\t\t\tok: response.ok,\\n\t\t\t\tstatus: response.status,\\n\t\t\t\tstatusText: response.statusText,\\n\t\t\t\tbody: responseHeader ?? transformedBody,\\n\t\t\t} as ApiResult;\\n\t\t}),\\n\t\tcatchError((error: HttpErrorResponse) => {\\n\t\t\tif (!error.status) {\\n\t\t\t\treturn throwError(() => error);\\n\t\t\t}\\n\t\t\treturn of({\\n\t\t\t\turl,\\n\t\t\t\tok: error.ok,\\n\t\t\t\tstatus: error.status,\\n\t\t\t\tstatusText: error.statusText,\\n\t\t\t\tbody: error.error ?? error.statusText,\\n\t\t\t} as ApiResult);\\n\t\t}),\\n\t\tmap(result => {\\n\t\t\tcatchErrorCodes(options, result);\\n\t\t\treturn result.body as T;\\n\t\t}),\\n\t\tcatchError((error: ApiError) => {\\n\t\t\treturn throwError(() => error);\\n\t\t}),\\n\t);\\n};'\n    );\n  },\n  usePartial: true,\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const sendRequest = <T>(\\n\tconfig: OpenAPIConfig,\\n\toptions: ApiRequestOptions<T>,\\n\thttp: HttpClient,\\n\turl: string,\\n\tbody: unknown,\\n\tformData: FormData | undefined,\\n\theaders: HttpHeaders\\n): Observable<HttpResponse<T>> => {\\n\treturn http.request<T>(options.method, url, {\\n\t\theaders,\\n\t\tbody: body ?? formData,\\n\t\twithCredentials: config.WITH_CREDENTIALS,\\n\t\tobserve: 'response',\\n\t});\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"import type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { ApiResult } from './ApiResult';\\n\\nexport class ApiError extends Error {\\n\tpublic readonly url: string;\\n\tpublic readonly status: number;\\n\tpublic readonly statusText: string;\\n\tpublic readonly body: unknown;\\n\tpublic readonly request: ApiRequestOptions;\\n\\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\\n\t\tsuper(message);\\n\\n\t\tthis.name = 'ApiError';\\n\t\tthis.url = response.url;\\n\t\tthis.status = response.status;\\n\t\tthis.statusText = response.statusText;\\n\t\tthis.body = response.body;\\n\t\tthis.request = request;\\n\t}\\n}\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export type ApiRequestOptions<T = unknown> = {\\n\treadonly body?: any;\\n\treadonly cookies?: Record<string, unknown>;\\n\treadonly errors?: Record<number | string, string>;\\n\treadonly formData?: Record<string, unknown> | any[] | Blob | File;\\n\treadonly headers?: Record<string, unknown>;\\n\treadonly mediaType?: string;\\n\treadonly method:\\n\t\t| 'DELETE'\\n\t\t| 'GET'\\n\t\t| 'HEAD'\\n\t\t| 'OPTIONS'\\n\t\t| 'PATCH'\\n\t\t| 'POST'\\n\t\t| 'PUT';\\n\treadonly path?: Record<string, unknown>;\\n\treadonly query?: Record<string, unknown>;\\n\treadonly responseHeader?: string;\\n\treadonly responseTransformer?: (data: unknown) => Promise<T>;\\n\treadonly url: string;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export type ApiResult<TData = any> = {\\n\treadonly body: TData;\\n\treadonly ok: boolean;\\n\treadonly status: number;\\n\treadonly statusText: string;\\n\treadonly url: string;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Record<string, string>> => {\\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.TOKEN),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.USERNAME),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.PASSWORD),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.HEADERS),\\n\t]);\\n\\n\tconst headers = Object.entries({\\n\t\tAccept: 'application/json',\\n\t\t...additionalHeaders,\\n\t\t...options.headers,\\n\t})\\n\t.filter(([, value]) => value !== undefined && value !== null)\\n\t.reduce((headers, [key, value]) => ({\\n\t\t...headers,\\n\t\t[key]: String(value),\\n\t}), {} as Record<string, string>);\\n\\n\tif (isStringWithValue(token)) {\\n\t\theaders['Authorization'] = `Bearer ${token}`;\\n\t}\\n\\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\\n\t\tconst credentials = base64(`${username}:${password}`);\\n\t\theaders['Authorization'] = `Basic ${credentials}`;\\n\t}\\n\\n\tif (options.body !== undefined) {\\n\t\tif (options.mediaType) {\\n\t\t\theaders['Content-Type'] = options.mediaType;\\n\t\t} else if (isBlob(options.body)) {\\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\\n\t\t} else if (isString(options.body)) {\\n\t\t\theaders['Content-Type'] = 'text/plain';\\n\t\t} else if (!isFormData(options.body)) {\\n\t\t\theaders['Content-Type'] = 'application/json';\\n\t\t}\\n\t} else if (options.formData !== undefined) {\\n\t\tif (options.mediaType) {\\n\t\t\theaders['Content-Type'] = options.mediaType;\\n\t\t}\\n\t}\\n\\n\treturn headers;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getRequestBody = (options: ApiRequestOptions): unknown => {\\n\tif (options.body) {\\n\t\treturn options.body;\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseBody = (response: AxiosResponse<unknown>): unknown => {\\n\tif (response.status !== 204) {\\n\t\treturn response.data;\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseHeader = (response: AxiosResponse<unknown>, responseHeader?: string): string | undefined => {\\n\tif (responseHeader) {\\n\t\tconst content = response.headers[responseHeader];\\n\t\tif (isString(content)) {\\n\t\t\treturn content;\\n\t\t}\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return 'ApiResult<T>';\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return 'T';\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return 'result.body';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return 'result';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      \"import axios from 'axios';\\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from 'axios';\\n\\nimport { ApiError } from './ApiError';\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { ApiResult } from './ApiResult';\\nimport { CancelablePromise } from './CancelablePromise';\\nimport type { OnCancel } from './CancelablePromise';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\\n\" +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isString'),\n        depth0,\n        {\n          name: 'functions/isString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isStringWithValue'),\n        depth0,\n        {\n          name: 'functions/isStringWithValue',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isBlob'),\n        depth0,\n        {\n          name: 'functions/isBlob',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isFormData'),\n        depth0,\n        {\n          name: 'functions/isFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isSuccess'),\n        depth0,\n        {\n          name: 'functions/isSuccess',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/base64'),\n        depth0,\n        {\n          name: 'functions/base64',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getQueryString'),\n        depth0,\n        {\n          name: 'functions/getQueryString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getUrl'),\n        depth0,\n        {\n          name: 'functions/getUrl',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getFormData'),\n        depth0,\n        {\n          name: 'functions/getFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/resolve'),\n        depth0,\n        {\n          name: 'functions/resolve',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'axios/getHeaders'),\n        depth0,\n        {\n          name: 'axios/getHeaders',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'axios/getRequestBody'),\n        depth0,\n        {\n          name: 'axios/getRequestBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'axios/sendRequest'),\n        depth0,\n        {\n          name: 'axios/sendRequest',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'axios/getResponseHeader'),\n        depth0,\n        {\n          name: 'axios/getResponseHeader',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'axios/getResponseBody'),\n        depth0,\n        {\n          name: 'axios/getResponseBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/catchErrorCodes'),\n        depth0,\n        {\n          name: 'functions/catchErrorCodes',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n/**\\n * Request method\\n * @param config The OpenAPI configuration object\\n * @param options The request options from the service\\n * @param axiosClient The axios client instance to use\\n * @returns CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: {\n            start: { line: 64, column: 30 },\n            end: { line: 64, column: 108 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '>\\n * @throws ApiError\\n */\\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>, axiosClient: AxiosInstance = axios): CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: {\n            start: { line: 67, column: 136 },\n            end: { line: 67, column: 214 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '> => {\\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\\n\t\ttry {\\n\t\t\tconst url = getUrl(config, options);\\n\t\t\tconst formData = getFormData(options);\\n\t\t\tconst body = getRequestBody(options);\\n\t\t\tconst headers = await getHeaders(config, options);\\n\\n\t\t\tif (!onCancel.isCancelled) {\\n\t\t\t\tlet response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel, axiosClient);\\n\\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\\n\t\t\t\t\tresponse = await fn(response);\\n\t\t\t\t}\\n\\n\t\t\t\tconst responseBody = getResponseBody(response);\\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\\n\\n\t\t\t\tlet transformedBody = responseBody;\\n\t\t\t\tif (options.responseTransformer && isSuccess(response.status)) {\\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\\n\t\t\t\t}\\n\\n\t\t\t\tconst result: ApiResult = {\\n\t\t\t\t\turl,\\n\t\t\t\t\tok: isSuccess(response.status),\\n\t\t\t\t\tstatus: response.status,\\n\t\t\t\t\tstatusText: response.statusText,\\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\\n\t\t\t\t};\\n\\n\t\t\t\tcatchErrorCodes(options, result);\\n\\n\t\t\t\tresolve(' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'body',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.program(7, data, 0),\n          data: data,\n          loc: {\n            start: { line: 100, column: 12 },\n            end: { line: 100, column: 90 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ');\\n\t\t\t}\\n\t\t} catch (error) {\\n\t\t\treject(error);\\n\t\t}\\n\t});\\n};'\n    );\n  },\n  usePartial: true,\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const sendRequest = async <T>(\\n\tconfig: OpenAPIConfig,\\n\toptions: ApiRequestOptions<T>,\\n\turl: string,\\n\tbody: unknown,\\n\tformData: FormData | undefined,\\n\theaders: Record<string, string>,\\n\tonCancel: OnCancel,\\n\taxiosClient: AxiosInstance\\n): Promise<AxiosResponse<T>> => {\\n\tconst controller = new AbortController();\\n\\n\tlet requestConfig: AxiosRequestConfig = {\\n\t\tdata: body ?? formData,\\n\t\theaders,\\n\t\tmethod: options.method,\\n\t\tsignal: controller.signal,\\n\t\turl,\\n\t\twithCredentials: config.WITH_CREDENTIALS,\\n\t};\\n\\n\tonCancel(() => controller.abort());\\n\\n\tfor (const fn of config.interceptors.request._fns) {\\n\t\trequestConfig = await fn(requestConfig);\\n\t}\\n\\n\ttry {\\n\t\treturn await axiosClient.request(requestConfig);\\n\t} catch (error) {\\n\t\tconst axiosError = error as AxiosError<T>;\\n\t\tif (axiosError.response) {\\n\t\t\treturn axiosError.response;\\n\t\t}\\n\t\tthrow error;\\n\t}\\n};';\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return \"import type { HttpClient } from '@angular/common/http';\\nimport type { Observable } from 'rxjs';\\n\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\";\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return \"import type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { CancelablePromise } from './CancelablePromise';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\";\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return '\tconstructor(\\n\t\tpublic readonly config: OpenAPIConfig,\\n\t\tpublic readonly http: HttpClient,\\n\t) {}\\n';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return '\tconstructor(public readonly config: OpenAPIConfig) {}\\n';\n  },\n  9: function (container, depth0, helpers, partials, data) {\n    return '\tpublic abstract request<T>(options: ApiRequestOptions<T>): Observable<T>;\\n';\n  },\n  11: function (container, depth0, helpers, partials, data) {\n    return '\tpublic abstract request<T>(options: ApiRequestOptions<T>): CancelablePromise<T>;\\n';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 11, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\nexport abstract class BaseHttpRequest {\\n\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.program(7, data, 0),\n          data: data,\n          loc: {\n            start: { line: 15, column: 1 },\n            end: { line: 22, column: 12 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(9, data, 0),\n          inverse: container.program(11, data, 0),\n          data: data,\n          loc: {\n            start: { line: 24, column: 1 },\n            end: { line: 28, column: 12 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '}'\n    );\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export class CancelError extends Error {\\n\tconstructor(message: string) {\\n\t\tsuper(message);\\n\t\tthis.name = 'CancelError';\\n\t}\\n\\n\tpublic get isCancelled(): boolean {\\n\t\treturn true;\\n\t}\\n}\\n\\nexport interface OnCancel {\\n\treadonly isResolved: boolean;\\n\treadonly isRejected: boolean;\\n\treadonly isCancelled: boolean;\\n\\n\t(cancelHandler: () => void): void;\\n}\\n\\nexport class CancelablePromise<T> implements Promise<T> {\\n\tprivate _isResolved: boolean;\\n\tprivate _isRejected: boolean;\\n\tprivate _isCancelled: boolean;\\n\treadonly cancelHandlers: (() => void)[];\\n\treadonly promise: Promise<T>;\\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\\n\tprivate _reject?: (reason?: unknown) => void;\\n\\n\tconstructor(\\n\t\texecutor: (\\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\\n\t\t\treject: (reason?: unknown) => void,\\n\t\t\tonCancel: OnCancel\\n\t\t) => void\\n\t) {\\n\t\tthis._isResolved = false;\\n\t\tthis._isRejected = false;\\n\t\tthis._isCancelled = false;\\n\t\tthis.cancelHandlers = [];\\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\\n\t\t\tthis._resolve = resolve;\\n\t\t\tthis._reject = reject;\\n\\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t\tthis._isResolved = true;\\n\t\t\t\tif (this._resolve) this._resolve(value);\\n\t\t\t};\\n\\n\t\t\tconst onReject = (reason?: unknown): void => {\\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t\tthis._isRejected = true;\\n\t\t\t\tif (this._reject) this._reject(reason);\\n\t\t\t};\\n\\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\\n\t\t\t\t\treturn;\\n\t\t\t\t}\\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\\n\t\t\t};\\n\\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\\n\t\t\t\tget: (): boolean => this._isResolved,\\n\t\t\t});\\n\\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\\n\t\t\t\tget: (): boolean => this._isRejected,\\n\t\t\t});\\n\\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\\n\t\t\t\tget: (): boolean => this._isCancelled,\\n\t\t\t});\\n\\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\\n\t\t});\\n\t}\\n\\n\tget [Symbol.toStringTag]() {\\n\t\treturn \\\"Cancellable Promise\\\";\\n\t}\\n\\n\tpublic then<TResult1 = T, TResult2 = never>(\\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\\n\t): Promise<TResult1 | TResult2> {\\n\t\treturn this.promise.then(onFulfilled, onRejected);\\n\t}\\n\\n\tpublic catch<TResult = never>(\\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\\n\t): Promise<T | TResult> {\\n\t\treturn this.promise.catch(onRejected);\\n\t}\\n\\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\\n\t\treturn this.promise.finally(onFinally);\\n\t}\\n\\n\tpublic cancel(): void {\\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\\n\t\t\treturn;\\n\t\t}\\n\t\tthis._isCancelled = true;\\n\t\tif (this.cancelHandlers.length) {\\n\t\t\ttry {\\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\\n\t\t\t\t\tcancelHandler();\\n\t\t\t\t}\\n\t\t\t} catch (error) {\\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\\n\t\t\t\treturn;\\n\t\t\t}\\n\t\t}\\n\t\tthis.cancelHandlers.length = 0;\\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\\n\t}\\n\\n\tpublic get isCancelled(): boolean {\\n\t\treturn this._isCancelled;\\n\t}\\n}\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {\\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.TOKEN),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.USERNAME),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.PASSWORD),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.HEADERS),\\n\t]);\\n\\n\tconst headers = Object.entries({\\n\t\tAccept: 'application/json',\\n\t\t...additionalHeaders,\\n\t\t...options.headers,\\n\t})\\n\t\t.filter(([, value]) => value !== undefined && value !== null)\\n\t\t.reduce((headers, [key, value]) => ({\\n\t\t\t...headers,\\n\t\t\t[key]: String(value),\\n\t\t}), {} as Record<string, string>);\\n\\n\tif (isStringWithValue(token)) {\\n\t\theaders['Authorization'] = `Bearer ${token}`;\\n\t}\\n\\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\\n\t\tconst credentials = base64(`${username}:${password}`);\\n\t\theaders['Authorization'] = `Basic ${credentials}`;\\n\t}\\n\\n\tif (options.body !== undefined) {\\n\t\tif (options.mediaType) {\\n\t\t\theaders['Content-Type'] = options.mediaType;\\n\t\t} else if (isBlob(options.body)) {\\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\\n\t\t} else if (isString(options.body)) {\\n\t\t\theaders['Content-Type'] = 'text/plain';\\n\t\t} else if (!isFormData(options.body)) {\\n\t\t\theaders['Content-Type'] = 'application/json';\\n\t\t}\\n\t}\\n\\n\treturn new Headers(headers);\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getRequestBody = (options: ApiRequestOptions): unknown => {\\n\tif (options.body !== undefined) {\\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\\n\t\t\treturn options.body;\\n\t\t} else {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t}\\n\t}\\n\treturn undefined;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getResponseBody = async (response: Response): Promise<unknown> => {\\n\tif (response.status !== 204) {\\n\t\ttry {\\n\t\t\tconst contentType = response.headers.get('Content-Type');\\n\t\t\tif (contentType) {\\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\\n\t\t\t\t\treturn await response.json();\\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\\n\t\t\t\t\treturn await response.blob();\\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\\n\t\t\t\t\treturn await response.formData();\\n\t\t\t\t} else if (contentType.includes('text/')) {\\n\t\t\t\t\treturn await response.text();\\n\t\t\t\t}\\n\t\t\t}\\n\t\t} catch (error) {\\n\t\t\tconsole.error(error);\\n\t\t}\\n\t}\\n\treturn undefined;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\\n\tif (responseHeader) {\\n\t\tconst content = response.headers.get(responseHeader);\\n\t\tif (isString(content)) {\\n\t\t\treturn content;\\n\t\t}\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return \"import fetch, { FormData, Headers } from 'node-fetch';\\nimport type { RequestInit, Response } from 'node-fetch';\\n\\n\";\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return 'ApiResult<T>';\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return 'T';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return 'result.body';\n  },\n  9: function (container, depth0, helpers, partials, data) {\n    return 'result';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/node',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 5, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      \"import { ApiError } from './ApiError';\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { ApiResult } from './ApiResult';\\nimport { CancelablePromise } from './CancelablePromise';\\nimport type { OnCancel } from './CancelablePromise';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\\n\" +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isString'),\n        depth0,\n        {\n          name: 'functions/isString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isStringWithValue'),\n        depth0,\n        {\n          name: 'functions/isStringWithValue',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isBlob'),\n        depth0,\n        {\n          name: 'functions/isBlob',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isFormData'),\n        depth0,\n        {\n          name: 'functions/isFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/base64'),\n        depth0,\n        {\n          name: 'functions/base64',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getQueryString'),\n        depth0,\n        {\n          name: 'functions/getQueryString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getUrl'),\n        depth0,\n        {\n          name: 'functions/getUrl',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getFormData'),\n        depth0,\n        {\n          name: 'functions/getFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/resolve'),\n        depth0,\n        {\n          name: 'functions/resolve',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/getHeaders'),\n        depth0,\n        {\n          name: 'fetch/getHeaders',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/getRequestBody'),\n        depth0,\n        {\n          name: 'fetch/getRequestBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/sendRequest'),\n        depth0,\n        {\n          name: 'fetch/sendRequest',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/getResponseHeader'),\n        depth0,\n        {\n          name: 'fetch/getResponseHeader',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/getResponseBody'),\n        depth0,\n        {\n          name: 'fetch/getResponseBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/catchErrorCodes'),\n        depth0,\n        {\n          name: 'functions/catchErrorCodes',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n/**\\n * Request method\\n * @param config The OpenAPI configuration object\\n * @param options The request options from the service\\n * @returns CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(3, data, 0),\n          inverse: container.program(5, data, 0),\n          data: data,\n          loc: {\n            start: { line: 62, column: 30 },\n            end: { line: 62, column: 108 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '>\\n * @throws ApiError\\n */\\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(3, data, 0),\n          inverse: container.program(5, data, 0),\n          data: data,\n          loc: {\n            start: { line: 65, column: 100 },\n            end: { line: 65, column: 178 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '> => {\\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\\n\t\ttry {\\n\t\t\tconst url = getUrl(config, options);\\n\t\t\tconst formData = getFormData(options);\\n\t\t\tconst body = getRequestBody(options);\\n\t\t\tconst headers = await getHeaders(config, options);\\n\\n\t\t\tif (!onCancel.isCancelled) {\\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\\n\\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\\n\t\t\t\t\tresponse = await fn(response);\\n\t\t\t\t}\\n\\n\t\t\t\tconst responseBody = await getResponseBody(response);\\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\\n\\n\t\t\t\tlet transformedBody = responseBody;\\n\t\t\t\tif (options.responseTransformer && response.ok) {\\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\\n\t\t\t\t}\\n\\n\t\t\t\tconst result: ApiResult = {\\n\t\t\t\t\turl,\\n\t\t\t\t\tok: response.ok,\\n\t\t\t\t\tstatus: response.status,\\n\t\t\t\t\tstatusText: response.statusText,\\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\\n\t\t\t\t};\\n\\n\t\t\t\tcatchErrorCodes(options, result);\\n\\n\t\t\t\tresolve(' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'body',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(7, data, 0),\n          inverse: container.program(9, data, 0),\n          data: data,\n          loc: {\n            start: { line: 98, column: 12 },\n            end: { line: 98, column: 90 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ');\\n\t\t\t}\\n\t\t} catch (error) {\\n\t\t\treject(error);\\n\t\t}\\n\t});\\n};'\n    );\n  },\n  usePartial: true,\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return '\tif (config.WITH_CREDENTIALS) {\\n\t\trequest.credentials = config.CREDENTIALS;\\n\t}\\n';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      'export const sendRequest = async (\\n\tconfig: OpenAPIConfig,\\n\toptions: ApiRequestOptions,\\n\turl: string,\\n\tbody: any,\\n\tformData: FormData | undefined,\\n\theaders: Headers,\\n\tonCancel: OnCancel\\n): Promise<Response> => {\\n\tconst controller = new AbortController();\\n\\n\tlet request: RequestInit = {\\n\t\theaders,\\n\t\tbody: body ?? formData,\\n\t\tmethod: options.method,\\n\t\tsignal: controller.signal,\\n\t};\\n\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        depth0 != null ? depth0 : container.nullContext || {},\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/fetch',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 19, column: 1 },\n            end: { line: 23, column: 12 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\tfor (const fn of config.interceptors.request._fns) {\\n\t\trequest = await fn(request);\\n\t}\\n\\n\tonCancel(() => controller.abort());\\n\\n\treturn await fetch(url, request);\\n};'\n    );\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const base64 = (str: string): string => {\\n\ttry {\\n\t\treturn btoa(str);\\n\t} catch (err) {\\n\t\t// @ts-ignore\\n\t\treturn Buffer.from(str).toString('base64');\\n\t}\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\\n\tconst errors: Record<number, string> = {\\n\t\t400: 'Bad Request',\\n\t\t401: 'Unauthorized',\\n\t\t402: 'Payment Required',\\n\t\t403: 'Forbidden',\\n\t\t404: 'Not Found',\\n\t\t405: 'Method Not Allowed',\\n\t\t406: 'Not Acceptable',\\n\t\t407: 'Proxy Authentication Required',\\n\t\t408: 'Request Timeout',\\n\t\t409: 'Conflict',\\n\t\t410: 'Gone',\\n\t\t411: 'Length Required',\\n\t\t412: 'Precondition Failed',\\n\t\t413: 'Payload Too Large',\\n\t\t414: 'URI Too Long',\\n\t\t415: 'Unsupported Media Type',\\n\t\t416: 'Range Not Satisfiable',\\n\t\t417: 'Expectation Failed',\\n\t\t418: 'Im a teapot',\\n\t\t421: 'Misdirected Request',\\n\t\t422: 'Unprocessable Content',\\n\t\t423: 'Locked',\\n\t\t424: 'Failed Dependency',\\n\t\t425: 'Too Early',\\n\t\t426: 'Upgrade Required',\\n\t\t428: 'Precondition Required',\\n\t\t429: 'Too Many Requests',\\n\t\t431: 'Request Header Fields Too Large',\\n\t\t451: 'Unavailable For Legal Reasons',\\n\t\t500: 'Internal Server Error',\\n\t\t501: 'Not Implemented',\\n\t\t502: 'Bad Gateway',\\n\t\t503: 'Service Unavailable',\\n\t\t504: 'Gateway Timeout',\\n\t\t505: 'HTTP Version Not Supported',\\n\t\t506: 'Variant Also Negotiates',\\n\t\t507: 'Insufficient Storage',\\n\t\t508: 'Loop Detected',\\n\t\t510: 'Not Extended',\\n\t\t511: 'Network Authentication Required',\\n\t\t...options.errors,\\n\t}\\n\\n\tconst error = errors[result.status];\\n\tif (error) {\\n\t\tthrow new ApiError(options, result, error);\\n\t}\\n\\n\tif (!result.ok) {\\n\t\tconst errorStatus = result.status ?? 'unknown';\\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\\n\t\tconst errorBody = (() => {\\n\t\t\ttry {\\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\\n\t\t\t} catch (e) {\\n\t\t\t\treturn undefined;\\n\t\t\t}\\n\t\t})();\\n\\n\t\tthrow new ApiError(options, result,\\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\\n\t\t);\\n\t}\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getFormData = (options: ApiRequestOptions): FormData | undefined => {\\n\tif (options.formData) {\\n\t\tconst formData = new FormData();\\n\\n\t\tconst process = (key: string, value: unknown) => {\\n\t\t\tif (isString(value) || isBlob(value)) {\\n\t\t\t\tformData.append(key, value);\\n\t\t\t} else {\\n\t\t\t\tformData.append(key, JSON.stringify(value));\\n\t\t\t}\\n\t\t};\\n\\n\t\tObject.entries(options.formData)\\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\\n\t\t\t.forEach(([key, value]) => {\\n\t\t\t\tif (Array.isArray(value)) {\\n\t\t\t\t\tvalue.forEach(v => process(key, v));\\n\t\t\t\t} else {\\n\t\t\t\t\tprocess(key, value);\\n\t\t\t\t}\\n\t\t\t});\\n\\n\t\treturn formData;\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getQueryString = (params: Record<string, unknown>): string => {\\n\tconst qs: string[] = [];\\n\\n\tconst append = (key: string, value: unknown) => {\\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\\n\t};\\n\\n\tconst encodePair = (key: string, value: unknown) => {\\n\t\tif (value === undefined || value === null) {\\n\t\t\treturn;\\n\t\t}\\n\\n\t\tif (value instanceof Date) {\\n\t\t\tappend(key, value.toISOString());\\n\t\t} else if (Array.isArray(value)) {\\n\t\t\tvalue.forEach(v => encodePair(key, v));\\n\t\t} else if (typeof value === 'object') {\\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\\n\t\t} else {\\n\t\t\tappend(key, value);\\n\t\t}\\n\t};\\n\\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\\n\\n\treturn qs.length ? `?${qs.join('&')}` : '';\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\\n\tconst encoder = config.ENCODE_PATH || encodeURI;\\n\\n\tconst path = options.url\\n\t\t.replace('{api-version}', config.VERSION)\\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\\n\t\t\tif (options.path?.hasOwnProperty(group)) {\\n\t\t\t\treturn encoder(String(options.path[group]));\\n\t\t\t}\\n\t\t\treturn substring;\\n\t\t});\\n\\n\tconst url = config.BASE + path;\\n\treturn options.query ? url + getQueryString(options.query) : url;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const isBlob = (value: any): value is Blob => {\\n\treturn value instanceof Blob;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const isFormData = (value: unknown): value is FormData => {\\n\treturn value instanceof FormData;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const isString = (value: unknown): value is string => {\\n\treturn typeof value === 'string';\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const isStringWithValue = (value: unknown): value is string => {\\n\treturn isString(value) && value !== '';\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const isSuccess = (status: number): boolean => {\\n\treturn status >= 200 && status < 300;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"type Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\\n\\nexport const resolve = async <T>(options: ApiRequestOptions<T>, resolver?: T | Resolver<T>): Promise<T | undefined> => {\\n\tif (typeof resolver === 'function') {\\n\t\treturn (resolver as Resolver<T>)(options);\\n\t}\\n\treturn resolver;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return \"import { Inject, Injectable } from '@angular/core';\\nimport { HttpClient } from '@angular/common/http';\\nimport type { Observable } from 'rxjs';\\n\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport { BaseHttpRequest } from './BaseHttpRequest';\\nimport type { OpenAPIConfig } from './OpenAPI';\\nimport { OpenAPI } from './OpenAPI';\\nimport { request as __request } from './request';\\n\";\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return \"import type { ApiRequestOptions } from './ApiRequestOptions';\\nimport { BaseHttpRequest } from './BaseHttpRequest';\\nimport type { CancelablePromise } from './CancelablePromise';\\nimport type { OpenAPIConfig } from './OpenAPI';\\nimport { request as __request } from './request';\\n\";\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return '@Injectable()\\n';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return '\tconstructor(\\n\t\t@Inject(OpenAPI)\\n\t\tconfig: OpenAPIConfig,\\n\t\thttp: HttpClient,\\n\t) {\\n\t\tsuper(config, http);\\n\t}\\n';\n  },\n  9: function (container, depth0, helpers, partials, data) {\n    return '\tconstructor(config: OpenAPIConfig) {\\n\t\tsuper(config);\\n\t}\\n';\n  },\n  11: function (container, depth0, helpers, partials, data) {\n    return '\t/**\\n\t * Request method\\n\t * @param options The request options from the service\\n\t * @returns Observable<T>\\n\t * @throws ApiError\\n\t */\\n\tpublic override request<T>(options: ApiRequestOptions<T>): Observable<T> {\\n\t\treturn __request(this.config, this.http, options);\\n\t}\\n';\n  },\n  13: function (container, depth0, helpers, partials, data) {\n    return '\t/**\\n\t * Request method\\n\t * @param options The request options from the service\\n\t * @returns CancelablePromise<T>\\n\t * @throws ApiError\\n\t */\\n\tpublic override request<T>(options: ApiRequestOptions<T>): CancelablePromise<T> {\\n\t\treturn __request(this.config, options);\\n\t}\\n';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 17, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 19, column: 0 },\n            end: { line: 21, column: 11 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      'export class ' +\n      ((stack1 = container.lambda(\n        container.strict(depth0, 'httpRequest', {\n          start: { line: 22, column: 15 },\n          end: { line: 22, column: 26 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      ' extends BaseHttpRequest {\\n\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(7, data, 0),\n          inverse: container.program(9, data, 0),\n          data: data,\n          loc: {\n            start: { line: 24, column: 1 },\n            end: { line: 36, column: 12 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n' +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(11, data, 0),\n          inverse: container.program(13, data, 0),\n          data: data,\n          loc: {\n            start: { line: 38, column: 1 },\n            end: { line: 58, column: 12 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '}'\n    );\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return \"import type { HttpResponse } from '@angular/common/http';\\n\";\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return \"import type { AxiosRequestConfig, AxiosResponse } from 'axios';\\n\";\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return \"import type { RequestInit, Response } from 'node-fetch';\\n\";\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return '\t\tresponse: Interceptors<HttpResponse<any>>;\\n';\n  },\n  9: function (container, depth0, helpers, partials, data) {\n    return '\t\trequest: Interceptors<AxiosRequestConfig>;\\n\t\tresponse: Interceptors<AxiosResponse>;\\n';\n  },\n  11: function (container, depth0, helpers, partials, data) {\n    return '\t\trequest: Interceptors<RequestInit>;\\n\t\tresponse: Interceptors<Response>;\\n';\n  },\n  13: function (container, depth0, helpers, partials, data) {\n    return '\t\trequest: Interceptors<XMLHttpRequest>;\\n\t\tresponse: Interceptors<XMLHttpRequest>;\\n';\n  },\n  15: function (container, depth0, helpers, partials, data) {\n    return '\t\trequest: new Interceptors(),\\n';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      alias2 = container.strict,\n      alias3 = container.lambda,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 3, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/axios',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(3, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 4, column: 0 }, end: { line: 6, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/node',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 7, column: 0 }, end: { line: 9, column: 11 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      \"import type { ApiRequestOptions } from './ApiRequestOptions';\\n\\ntype Headers = Record<string, string>;\\ntype Middleware<T> = (value: T) => T | Promise<T>;\\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\\n\\nexport class Interceptors<T> {\\n  _fns: Middleware<T>[];\\n\\n  constructor() {\\n    this._fns = [];\\n  }\\n\\n  eject(fn: Middleware<T>): void {\\n    const index = this._fns.indexOf(fn);\\n    if (index !== -1) {\\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\\n    }\\n  }\\n\\n  use(fn: Middleware<T>): void {\\n    this._fns = [...this._fns, fn];\\n  }\\n}\\n\\nexport type OpenAPIConfig = {\\n\tBASE: string;\\n\tCREDENTIALS: 'include' | 'omit' | 'same-origin';\\n\tENCODE_PATH?: ((path: string) => string) | undefined;\\n\tHEADERS?: Headers | Resolver<Headers> | undefined;\\n\tPASSWORD?: string | Resolver<string> | undefined;\\n\tTOKEN?: string | Resolver<string> | undefined;\\n\tUSERNAME?: string | Resolver<string> | undefined;\\n\tVERSION: string;\\n\tWITH_CREDENTIALS: boolean;\\n\tinterceptors: {\\n\" +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(7, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 46, column: 2 },\n            end: { line: 48, column: 13 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/axios',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(9, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 49, column: 2 },\n            end: { line: 52, column: 13 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/fetch',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(11, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 53, column: 2 },\n            end: { line: 56, column: 13 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/node',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(11, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 57, column: 2 },\n            end: { line: 60, column: 13 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/xhr',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(13, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 61, column: 2 },\n            end: { line: 64, column: 13 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      \"\t};\\n};\\n\\nexport const OpenAPI: OpenAPIConfig = {\\n\tBASE: '\" +\n      ((stack1 = alias3(\n        alias2(depth0, 'server', {\n          start: { line: 69, column: 11 },\n          end: { line: 69, column: 17 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\tCREDENTIALS: 'include',\\n\tENCODE_PATH: undefined,\\n\tHEADERS: undefined,\\n\tPASSWORD: undefined,\\n\tTOKEN: undefined,\\n\tUSERNAME: undefined,\\n\tVERSION: '\" +\n      ((stack1 = alias3(\n        alias2(depth0, 'version', {\n          start: { line: 76, column: 14 },\n          end: { line: 76, column: 21 },\n        }),\n        depth0,\n      )) != null\n        ? stack1\n        : '') +\n      \"',\\n\tWITH_CREDENTIALS: false,\\n\tinterceptors: {\\n\" +\n      ((stack1 = lookupProperty(helpers, 'notEquals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'notEquals',\n          hash: {},\n          fn: container.program(15, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: {\n            start: { line: 79, column: 2 },\n            end: { line: 81, column: 16 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\t\tresponse: new Interceptors(),\\n\t},\\n};'\n    );\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (stack1 = container.invokePartial(\n      lookupProperty(partials, 'angular/request'),\n      depth0,\n      {\n        name: 'angular/request',\n        data: data,\n        helpers: helpers,\n        partials: partials,\n        decorators: container.decorators,\n      },\n    )) != null\n      ? stack1\n      : '';\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (stack1 = container.invokePartial(\n      lookupProperty(partials, 'axios/request'),\n      depth0,\n      {\n        name: 'axios/request',\n        data: data,\n        helpers: helpers,\n        partials: partials,\n        decorators: container.decorators,\n      },\n    )) != null\n      ? stack1\n      : '';\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (stack1 = container.invokePartial(\n      lookupProperty(partials, 'fetch/request'),\n      depth0,\n      {\n        name: 'fetch/request',\n        data: data,\n        helpers: helpers,\n        partials: partials,\n        decorators: container.decorators,\n      },\n    )) != null\n      ? stack1\n      : '';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (stack1 = container.invokePartial(\n      lookupProperty(partials, 'xhr/request'),\n      depth0,\n      {\n        name: 'xhr/request',\n        data: data,\n        helpers: helpers,\n        partials: partials,\n        decorators: container.decorators,\n      },\n    )) != null\n      ? stack1\n      : '';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/angular',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 87 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/axios',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(3, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 2, column: 0 }, end: { line: 2, column: 83 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/fetch',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 3, column: 0 }, end: { line: 3, column: 83 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/node',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 4, column: 0 }, end: { line: 4, column: 82 } },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ((stack1 = lookupProperty(helpers, 'equals').call(\n        alias1,\n        lookupProperty(\n          lookupProperty(\n            lookupProperty(lookupProperty(data, 'root'), '$config'),\n            'client',\n          ),\n          'name',\n        ),\n        'legacy/xhr',\n        {\n          name: 'equals',\n          hash: {},\n          fn: container.program(7, data, 0),\n          inverse: container.noop,\n          data: data,\n          loc: { start: { line: 5, column: 0 }, end: { line: 5, column: 79 } },\n        },\n      )) != null\n        ? stack1\n        : '')\n    );\n  },\n  usePartial: true,\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {\\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.TOKEN),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.USERNAME),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.PASSWORD),\\n\t\t// @ts-ignore\\n\t\tresolve(options, config.HEADERS),\\n\t]);\\n\\n\tconst headers = Object.entries({\\n\t\tAccept: 'application/json',\\n\t\t...additionalHeaders,\\n\t\t...options.headers,\\n\t})\\n\t\t.filter(([, value]) => value !== undefined && value !== null)\\n\t\t.reduce((headers, [key, value]) => ({\\n\t\t\t...headers,\\n\t\t\t[key]: String(value),\\n\t\t}), {} as Record<string, string>);\\n\\n\tif (isStringWithValue(token)) {\\n\t\theaders['Authorization'] = `Bearer ${token}`;\\n\t}\\n\\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\\n\t\tconst credentials = base64(`${username}:${password}`);\\n\t\theaders['Authorization'] = `Basic ${credentials}`;\\n\t}\\n\\n\tif (options.body !== undefined) {\\n\t\tif (options.mediaType) {\\n\t\t\theaders['Content-Type'] = options.mediaType;\\n\t\t} else if (isBlob(options.body)) {\\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\\n\t\t} else if (isString(options.body)) {\\n\t\t\theaders['Content-Type'] = 'text/plain';\\n\t\t} else if (!isFormData(options.body)) {\\n\t\t\theaders['Content-Type'] = 'application/json';\\n\t\t}\\n\t}\\n\\n\treturn new Headers(headers);\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getRequestBody = (options: ApiRequestOptions): unknown => {\\n\tif (options.body !== undefined) {\\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\\n\t\t\treturn options.body;\\n\t\t} else {\\n\t\t\treturn JSON.stringify(options.body);\\n\t\t}\\n\t}\\n\treturn undefined;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const getResponseBody = (xhr: XMLHttpRequest): unknown => {\\n\tif (xhr.status !== 204) {\\n\t\ttry {\\n\t\t\tconst contentType = xhr.getResponseHeader('Content-Type');\\n\t\t\tif (contentType) {\\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\\n\t\t\t\t\treturn JSON.parse(xhr.responseText);\\n\t\t\t\t} else {\\n\t\t\t\t\treturn xhr.responseText;\\n\t\t\t\t}\\n\t\t\t}\\n\t\t} catch (error) {\\n\t\t\tconsole.error(error);\\n\t\t}\\n\t}\\n\treturn undefined;\\n};\";\n  },\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return 'export const getResponseHeader = (xhr: XMLHttpRequest, responseHeader?: string): string | undefined => {\\n\tif (responseHeader) {\\n\t\tconst content = xhr.getResponseHeader(responseHeader);\\n\t\tif (isString(content)) {\\n\t\t\treturn content;\\n\t\t}\\n\t}\\n\treturn undefined;\\n};';\n  },\n  useData: true,\n};\n","export default {\n  1: function (container, depth0, helpers, partials, data) {\n    return 'ApiResult<T>';\n  },\n  3: function (container, depth0, helpers, partials, data) {\n    return 'T';\n  },\n  5: function (container, depth0, helpers, partials, data) {\n    return 'result.body';\n  },\n  7: function (container, depth0, helpers, partials, data) {\n    return 'result';\n  },\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    var stack1,\n      alias1 = depth0 != null ? depth0 : container.nullContext || {},\n      lookupProperty =\n        container.lookupProperty ||\n        function (parent, propertyName) {\n          if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n            return parent[propertyName];\n          }\n          return undefined;\n        };\n\n    return (\n      \"import { ApiError } from './ApiError';\\nimport type { ApiRequestOptions } from './ApiRequestOptions';\\nimport type { ApiResult } from './ApiResult';\\nimport { CancelablePromise } from './CancelablePromise';\\nimport type { OnCancel } from './CancelablePromise';\\nimport type { OpenAPIConfig } from './OpenAPI';\\n\\n\" +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isString'),\n        depth0,\n        {\n          name: 'functions/isString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isStringWithValue'),\n        depth0,\n        {\n          name: 'functions/isStringWithValue',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isBlob'),\n        depth0,\n        {\n          name: 'functions/isBlob',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isFormData'),\n        depth0,\n        {\n          name: 'functions/isFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/isSuccess'),\n        depth0,\n        {\n          name: 'functions/isSuccess',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/base64'),\n        depth0,\n        {\n          name: 'functions/base64',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getQueryString'),\n        depth0,\n        {\n          name: 'functions/getQueryString',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getUrl'),\n        depth0,\n        {\n          name: 'functions/getUrl',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/getFormData'),\n        depth0,\n        {\n          name: 'functions/getFormData',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/resolve'),\n        depth0,\n        {\n          name: 'functions/resolve',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'fetch/getHeaders'),\n        depth0,\n        {\n          name: 'fetch/getHeaders',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'xhr/getRequestBody'),\n        depth0,\n        {\n          name: 'xhr/getRequestBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'xhr/sendRequest'),\n        depth0,\n        {\n          name: 'xhr/sendRequest',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'xhr/getResponseHeader'),\n        depth0,\n        {\n          name: 'xhr/getResponseHeader',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'xhr/getResponseBody'),\n        depth0,\n        {\n          name: 'xhr/getResponseBody',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n' +\n      ((stack1 = container.invokePartial(\n        lookupProperty(partials, 'functions/catchErrorCodes'),\n        depth0,\n        {\n          name: 'functions/catchErrorCodes',\n          data: data,\n          helpers: helpers,\n          partials: partials,\n          decorators: container.decorators,\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '\\n\\n/**\\n * Request method\\n * @param config The OpenAPI configuration object\\n * @param options The request options from the service\\n * @returns CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: {\n            start: { line: 60, column: 30 },\n            end: { line: 60, column: 108 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '>\\n * @throws ApiError\\n */\\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'response',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(1, data, 0),\n          inverse: container.program(3, data, 0),\n          data: data,\n          loc: {\n            start: { line: 63, column: 100 },\n            end: { line: 63, column: 178 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      '> => {\\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\\n\t\ttry {\\n\t\t\tconst url = getUrl(config, options);\\n\t\t\tconst formData = getFormData(options);\\n\t\t\tconst body = getRequestBody(options);\\n\t\t\tconst headers = await getHeaders(config, options);\\n\\n\t\t\tif (!onCancel.isCancelled) {\\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\\n\\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\\n\t\t\t\t\tresponse = await fn(response);\\n\t\t\t\t}\\n\\n\t\t\t\tconst responseBody = getResponseBody(response);\\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\\n\\n\t\t\t\tlet transformedBody = responseBody;\\n\t\t\t\tif (options.responseTransformer && isSuccess(response.status)) {\\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\\n\t\t\t\t}\\n\\n\t\t\t\tconst result: ApiResult = {\\n\t\t\t\t\turl,\\n\t\t\t\t\tok: isSuccess(response.status),\\n\t\t\t\t\tstatus: response.status,\\n\t\t\t\t\tstatusText: response.statusText,\\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\\n\t\t\t\t};\\n\\n\t\t\t\tcatchErrorCodes(options, result);\\n\\n\t\t\t\tresolve(' +\n      ((stack1 = lookupProperty(helpers, 'ifServicesResponse').call(\n        alias1,\n        'body',\n        {\n          name: 'ifServicesResponse',\n          hash: {},\n          fn: container.program(5, data, 0),\n          inverse: container.program(7, data, 0),\n          data: data,\n          loc: {\n            start: { line: 96, column: 12 },\n            end: { line: 96, column: 90 },\n          },\n        },\n      )) != null\n        ? stack1\n        : '') +\n      ');\\n\t\t\t}\\n\t\t} catch (error) {\\n\t\t\treject(error);\\n\t\t}\\n\t});\\n};'\n    );\n  },\n  usePartial: true,\n  useData: true,\n};\n","export default {\n  compiler: [8, '>= 4.3.0'],\n  main: function (container, depth0, helpers, partials, data) {\n    return \"export const sendRequest = async (\\n\tconfig: OpenAPIConfig,\\n\toptions: ApiRequestOptions,\\n\turl: string,\\n\tbody: any,\\n\tformData: FormData | undefined,\\n\theaders: Headers,\\n\tonCancel: OnCancel\\n): Promise<XMLHttpRequest> => {\\n\tlet xhr = new XMLHttpRequest();\\n\txhr.open(options.method, url, true);\\n\txhr.withCredentials = config.WITH_CREDENTIALS;\\n\\n\theaders.forEach((value, key) => {\\n\t\txhr.setRequestHeader(key, value);\\n\t});\\n\\n\treturn new Promise<XMLHttpRequest>(async (resolve, reject) => {\\n\t\txhr.onload = () => resolve(xhr);\\n\t\txhr.onabort = () => reject(new Error('Request aborted'));\\n\t\txhr.onerror = () => reject(new Error('Network error'));\\n\\n\t\tfor (const fn of config.interceptors.request._fns) {\\n\t\t\txhr = await fn(xhr);\\n\t\t}\\n\\n\t\txhr.send(body ?? formData);\\n\\n\t\tonCancel(() => xhr.abort());\\n\t});\\n};\";\n  },\n  useData: true,\n};\n","const idEnd = (id: string) => `${id}-end`;\n\nconst idLength = (id: string) => `${id}-length`;\n\nconst idStart = (id: string) => `${id}-start`;\n\nexport const Performance = {\n  clear: (): void => {\n    performance.clearMarks();\n    performance.clearMeasures();\n  },\n  end: (id: string): PerformanceMark => performance.mark(idEnd(id)),\n  getEntriesByName: (id: string): PerformanceEntryList =>\n    performance.getEntriesByName(idLength(id)),\n  measure: (id: string): PerformanceMeasure =>\n    performance.measure(idLength(id), idStart(id), idEnd(id)),\n  start: (id: string): PerformanceMark => performance.mark(idStart(id)),\n};\n\nexport class PerformanceReport {\n  totalMeasure: PerformanceMeasure;\n\n  constructor({ totalMark }: { totalMark: string }) {\n    this.totalMeasure = Performance.measure(totalMark);\n  }\n\n  public report({ marks }: { marks: ReadonlyArray<string> }) {\n    const totalDuration = Math.ceil(this.totalMeasure.duration * 100) / 100;\n    const totalName = this.totalMeasure.name;\n    console.warn(\n      `${totalName.substring(0, totalName.length - idLength('').length)}: ${totalDuration.toFixed(2)}ms`,\n    );\n\n    marks.forEach((mark) => {\n      const markMeasure = Performance.measure(mark);\n      const markDuration = Math.ceil(markMeasure.duration * 100) / 100;\n      const percentage =\n        Math.ceil(\n          (markMeasure.duration / this.totalMeasure.duration) * 100 * 100,\n        ) / 100;\n      console.warn(\n        `${mark}: ${markDuration.toFixed(2)}ms (${percentage.toFixed(2)}%)`,\n      );\n    });\n  }\n}\n","import { stringCase } from './stringCase';\n\n// publicly exposed utils\nexport const utils = {\n  stringCase,\n};\n"]}