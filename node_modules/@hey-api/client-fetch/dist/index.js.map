{"version":3,"sources":["../src/utils.ts","../src/index.ts"],"names":["PATH_PARAM_RE","serializePrimitiveParam","allowReserved","name","value","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","explode","joinedValues","v","separator","serializeObjectParam","values","key","defaultPathSerializer","path","_url","url","matches","match","replaceValue","createQuerySerializer","array","object","queryParams","search","getParseAs","contentType","cleanContent","type","getAuthToken","auth","callback","token","setAuthParams","security","options","buildUrl","getUrl","baseUrl","query","querySerializer","pathUrl","mergeConfigs","a","b","config","mergeHeaders","headers","mergedHeaders","header","iterator","Interceptors","fn","index","createInterceptors","serializeFormDataPair","data","formDataBodySerializer","body","jsonBodySerializer","serializeUrlSearchParamsPair","urlSearchParamsBodySerializer","defaultQuerySerializer","defaultHeaders","createConfig","override","createClient","_config","getConfig","setConfig","interceptors","request","opts","requestInit","_fetch","response","result","parseAs","error","finalError"],"mappings":"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","file":"index.js","sourcesContent":["import type { Auth, Client, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\ninterface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\ninterface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nconst separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nconst separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nconst separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nconst serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nconst serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n}) => {\n  if (value instanceof Date) {\n    return `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    let search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          search = [\n            ...search,\n            serializeArrayParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'form',\n              value,\n              ...array,\n            }),\n          ];\n          continue;\n        }\n\n        if (typeof value === 'object') {\n          search = [\n            ...search,\n            serializeObjectParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'deepObject',\n              value: value as Record<string, unknown>,\n              ...object,\n            }),\n          ];\n          continue;\n        }\n\n        search = [\n          ...search,\n          serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          }),\n        ];\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n  contentType: string | null,\n): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: RequestOptions['auth'],\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    baseUrl: options.baseUrl ?? '',\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = baseUrl + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (\n  request: Req,\n  options: Options,\n) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  _fns: Interceptor[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  clear() {\n    this._fns = [];\n  }\n\n  exists(fn: Interceptor) {\n    return this._fns.indexOf(fn) !== -1;\n  }\n\n  eject(fn: Interceptor) {\n    const index = this._fns.indexOf(fn);\n    if (index !== -1) {\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\n    }\n  }\n\n  use(fn: Interceptor) {\n    this._fns = [...this._fns, fn];\n  }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Pick<\n    Interceptors<ErrInterceptor<Err, Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n  request: Pick<Interceptors<ReqInterceptor<Req, Options>>, 'eject' | 'use'>;\n  response: Pick<\n    Interceptors<ResInterceptor<Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = <Req, Res, Err, Options>() => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) => JSON.stringify(body),\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = (override: Config = {}): Config => ({\n  ...jsonBodySerializer,\n  baseUrl: '',\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","import type { Client, Config, RequestOptions } from './types';\nimport {\n  buildUrl,\n  createConfig,\n  createInterceptors,\n  getParseAs,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils';\n\ntype ReqInit = Omit<RequestInit, 'body' | 'headers'> & {\n  body?: any;\n  headers: ReturnType<typeof mergeHeaders>;\n};\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    return getConfig();\n  };\n\n  const interceptors = createInterceptors<\n    Request,\n    Response,\n    unknown,\n    RequestOptions\n  >();\n\n  // @ts-expect-error\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n      headers: mergeHeaders(_config.headers, options.headers),\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    // remove Content-Type header if body is empty to avoid sending invalid requests\n    if (!opts.body) {\n      opts.headers.delete('Content-Type');\n    }\n\n    const url = buildUrl(opts);\n    const requestInit: ReqInit = {\n      redirect: 'follow',\n      ...opts,\n    };\n\n    let request = new Request(url, requestInit);\n\n    for (const fn of interceptors.request._fns) {\n      request = await fn(request, opts);\n    }\n\n    // fetch must be assigned here, otherwise it would throw the error:\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n    const _fetch = opts.fetch!;\n    let response = await _fetch(request);\n\n    for (const fn of interceptors.response._fns) {\n      response = await fn(response, request, opts);\n    }\n\n    const result = {\n      request,\n      response,\n    };\n\n    if (response.ok) {\n      if (\n        response.status === 204 ||\n        response.headers.get('Content-Length') === '0'\n      ) {\n        return {\n          data: {},\n          ...result,\n        };\n      }\n\n      const parseAs =\n        (opts.parseAs === 'auto'\n          ? getParseAs(response.headers.get('Content-Type'))\n          : opts.parseAs) ?? 'json';\n\n      if (parseAs === 'stream') {\n        return {\n          data: response.body,\n          ...result,\n        };\n      }\n\n      let data = await response[parseAs]();\n      if (parseAs === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return {\n        data,\n        ...result,\n      };\n    }\n\n    let error = await response.text();\n\n    try {\n      error = JSON.parse(error);\n    } catch {\n      // noop\n    }\n\n    let finalError = error;\n\n    for (const fn of interceptors.error._fns) {\n      finalError = (await fn(error, response, request, opts)) as string;\n    }\n\n    finalError = finalError || ({} as string);\n\n    if (opts.throwOnError) {\n      throw finalError;\n    }\n\n    return {\n      error: finalError,\n      ...result,\n    };\n  };\n\n  return {\n    buildUrl,\n    connect: (options) => request({ ...options, method: 'CONNECT' }),\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    interceptors,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n    trace: (options) => request({ ...options, method: 'TRACE' }),\n  };\n};\n\nexport type {\n  Auth,\n  Client,\n  Config,\n  Options,\n  OptionsLegacyParser,\n  RequestOptions,\n  RequestResult,\n} from './types';\nexport {\n  createConfig,\n  formDataBodySerializer,\n  jsonBodySerializer,\n  type QuerySerializerOptions,\n  urlSearchParamsBodySerializer,\n} from './utils';\n"]}